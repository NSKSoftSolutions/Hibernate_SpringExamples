Logging Provider: org.jboss.logging.Log4jLoggerProvider
Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
HHH000412: Hibernate Core {5.2.16.Final}
HHH000206: hibernate.properties not found
Building session factory using internal StandardServiceRegistryBuilder
Overriding existing service binding [org.hibernate.secure.spi.JaccService]
Building session factory using provided StandardServiceRegistry
Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
Adding type registration boolean -> org.hibernate.type.BooleanType@87a85e1
Adding type registration boolean -> org.hibernate.type.BooleanType@87a85e1
Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@87a85e1
Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@55f616cf
Adding type registration true_false -> org.hibernate.type.TrueFalseType@46fa7c39
Adding type registration yes_no -> org.hibernate.type.YesNoType@4a668b6e
Adding type registration byte -> org.hibernate.type.ByteType@6c779568
Adding type registration byte -> org.hibernate.type.ByteType@6c779568
Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@6c779568
Adding type registration character -> org.hibernate.type.CharacterType@61d6015a
Adding type registration char -> org.hibernate.type.CharacterType@61d6015a
Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@61d6015a
Adding type registration short -> org.hibernate.type.ShortType@37858383
Adding type registration short -> org.hibernate.type.ShortType@37858383
Adding type registration java.lang.Short -> org.hibernate.type.ShortType@37858383
Adding type registration integer -> org.hibernate.type.IntegerType@5136d012
Adding type registration int -> org.hibernate.type.IntegerType@5136d012
Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@5136d012
Adding type registration long -> org.hibernate.type.LongType@13b13b5d
Adding type registration long -> org.hibernate.type.LongType@13b13b5d
Adding type registration java.lang.Long -> org.hibernate.type.LongType@13b13b5d
Adding type registration float -> org.hibernate.type.FloatType@366647c2
Adding type registration float -> org.hibernate.type.FloatType@366647c2
Adding type registration java.lang.Float -> org.hibernate.type.FloatType@366647c2
Adding type registration double -> org.hibernate.type.DoubleType@503d687a
Adding type registration double -> org.hibernate.type.DoubleType@503d687a
Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@503d687a
Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@4d910fd6
Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@4d910fd6
Adding type registration big_integer -> org.hibernate.type.BigIntegerType@2e222612
Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@2e222612
Adding type registration string -> org.hibernate.type.StringType@6b8ca3c8
Adding type registration java.lang.String -> org.hibernate.type.StringType@6b8ca3c8
Adding type registration nstring -> org.hibernate.type.StringNVarcharType@65f095f8
Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@747edf66
Adding type registration url -> org.hibernate.type.UrlType@74455848
Adding type registration java.net.URL -> org.hibernate.type.UrlType@74455848
Adding type registration Duration -> org.hibernate.type.DurationType@11bd0f3b
Adding type registration java.time.Duration -> org.hibernate.type.DurationType@11bd0f3b
Adding type registration Instant -> org.hibernate.type.InstantType@51dcb805
Adding type registration java.time.Instant -> org.hibernate.type.InstantType@51dcb805
Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@b62d79
Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@b62d79
Adding type registration LocalDate -> org.hibernate.type.LocalDateType@693fe6c9
Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@693fe6c9
Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@306f16f3
Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@306f16f3
Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@2dde1bff
Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@2dde1bff
Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@48974e45
Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@48974e45
Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@793be5ca
Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@793be5ca
Adding type registration date -> org.hibernate.type.DateType@101952da
Adding type registration java.sql.Date -> org.hibernate.type.DateType@101952da
Adding type registration time -> org.hibernate.type.TimeType@10feca44
Adding type registration java.sql.Time -> org.hibernate.type.TimeType@10feca44
Adding type registration timestamp -> org.hibernate.type.TimestampType@1e683a3e
Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@1e683a3e
Adding type registration java.util.Date -> org.hibernate.type.TimestampType@1e683a3e
Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@14555e0a
Adding type registration calendar -> org.hibernate.type.CalendarType@6f46426d
Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@6f46426d
Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@6f46426d
Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@10d307f1
Adding type registration locale -> org.hibernate.type.LocaleType@5403f35f
Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@5403f35f
Adding type registration currency -> org.hibernate.type.CurrencyType@1b1426f4
Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@1b1426f4
Adding type registration timezone -> org.hibernate.type.TimeZoneType@76c3e77a
Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@76c3e77a
Adding type registration class -> org.hibernate.type.ClassType@fa49800
Adding type registration java.lang.Class -> org.hibernate.type.ClassType@fa49800
Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@25084a1e
Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@25084a1e
Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@16610890
Adding type registration binary -> org.hibernate.type.BinaryType@5562c41e
Adding type registration byte[] -> org.hibernate.type.BinaryType@5562c41e
Adding type registration [B -> org.hibernate.type.BinaryType@5562c41e
Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@73e22a3d
Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@73e22a3d
Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@73e22a3d
Adding type registration row_version -> org.hibernate.type.RowVersionType@7fee8714
Adding type registration image -> org.hibernate.type.ImageType@2fb3536e
Adding type registration characters -> org.hibernate.type.CharArrayType@22ef9844
Adding type registration char[] -> org.hibernate.type.CharArrayType@22ef9844
Adding type registration [C -> org.hibernate.type.CharArrayType@22ef9844
Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@1da2cb77
Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@1da2cb77
Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@1da2cb77
Adding type registration text -> org.hibernate.type.TextType@5acf93bb
Adding type registration ntext -> org.hibernate.type.NTextType@66d3eec0
Adding type registration blob -> org.hibernate.type.BlobType@6392827e
Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@6392827e
Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@43dac38f
Adding type registration clob -> org.hibernate.type.ClobType@53ce1329
Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@53ce1329
Adding type registration nclob -> org.hibernate.type.NClobType@290222c1
Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@290222c1
Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@49049a04
Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@82de64a
Adding type registration serializable -> org.hibernate.type.SerializableType@54a7079e
Adding type registration object -> org.hibernate.type.ObjectType@29215f06
Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@29215f06
Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@6bd61f98
Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@48aca48b
Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@13fd2ccd
Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@b9b00e0
Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@506ae4d4
Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@7d4f9aae
Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@72e5a8e
Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@54e1c68b
Database ->
       name : MySQL
    version : 5.7.18-log
      major : 5
      minor : 7
Driver ->
       name : MySQL Connector Java
    version : mysql-connector-java-5.1.45 ( Revision: 9131eefa398531c7dc98776e8a3fe839e544c5b2 )
      major : 5
      minor : 1
JDBC version : 4.0
HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
JDBC driver metadata reported database stores quoted identifiers in more than one case
IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
Binding entity from annotated class: com.nsksoft.spring.hibernate.bean.User
Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
Import with entity name User
Bind entity com.nsksoft.spring.hibernate.bean.User on table UserDetails
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=Email_id, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property email with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:email]
building SimpleValue for email
Building property email
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=country, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property country with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:country]
building SimpleValue for country
Building property country
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=dob, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property dob with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:dob]
building SimpleValue for dob
Building property dob
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=first_name, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property first_name with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:first_name]
building SimpleValue for first_name
Building property first_name
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=gender, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property gender with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:gender]
building SimpleValue for gender
Building property gender
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=last_name, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property last_name with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:last_name]
building SimpleValue for last_name
Building property last_name
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=marital_status, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property marital_status with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:marital_status]
building SimpleValue for marital_status
Building property marital_status
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=mobile, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property mobile with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:mobile]
building SimpleValue for mobile
Building property mobile
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=pass_word, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property password with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:password]
building SimpleValue for password
Building property password
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=permanent_adreess, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property permanent_adreess with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:permanent_adreess]
building SimpleValue for permanent_adreess
Building property permanent_adreess
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=pincode, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property pincode with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:pincode]
building SimpleValue for pincode
Building property pincode
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=present_address, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property present_address with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:present_address]
building SimpleValue for present_address
Building property present_address
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=state, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property state with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:state]
building SimpleValue for state
Building property state
Starting fillSimpleValue for email
Starting fillSimpleValue for country
Starting fillSimpleValue for dob
Starting fillSimpleValue for first_name
Starting fillSimpleValue for gender
Starting fillSimpleValue for last_name
Starting fillSimpleValue for marital_status
Starting fillSimpleValue for mobile
Starting fillSimpleValue for password
Starting fillSimpleValue for permanent_adreess
Starting fillSimpleValue for pincode
Starting fillSimpleValue for present_address
Starting fillSimpleValue for state
Forcing column [email_id] to be non-null as it is part of the primary key for table [userdetails]
Building session factory
SessionFactory name : null
Automatic flush during beforeCompletion(): enabled
Automatic session close at end of transaction: disabled
Statistics: disabled
Deleted entity synthetic identifier rollback: disabled
Default entity-mode: pojo
Check Nullability in Core (should be disabled when Bean Validation is on): enabled
Allow initialization of lazy state outside session : disabled
Using BatchFetchStyle : LEGACY
Default batch fetch size: -1
Maximum outer join fetch depth: 2
Default null ordering: NONE
Order SQL updates by primary key: disabled
Order SQL inserts for batching: disabled
multi-tenancy strategy : NONE
JTA Track by Thread: enabled
Query language substitutions: {}
JPA query language strict compliance: disabled
Named query checking : enabled
Second-level cache: enabled
Second-level query cache: disabled
Second-level query cache factory: org.hibernate.cache.internal.StandardQueryCacheFactory@93cf163
Second-level cache region prefix: null
Optimize second-level cache for minimal puts: disabled
Structured second-level cache entries: disabled
Second-level cache direct-reference entries: disabled
Automatic eviction of collection cache: disabled
JDBC batch size: 15
JDBC batch updates for versioned data: enabled
Scrollable result sets: enabled
Wrap result sets: disabled
JDBC3 getGeneratedKeys(): enabled
JDBC result set fetch size: null
Connection release mode: ON_CLOSE
Generate SQL with comments: disabled
Session factory constructed with filter configurations : {}
Instantiating session factory with properties: {sun.desktop=windows, awt.toolkit=sun.awt.windows.WToolkit, file.encoding.pkg=sun.io, java.specification.version=1.8, hibernate.connection.handling_mode=DELAYED_ACQUISITION_AND_HOLD, sun.cpu.isalist=amd64, sun.jnu.encoding=Cp1252, hibernate.dialect=org.hibernate.dialect.MySQL5Dialect, java.class.path=C:\Program Files\Java\jre1.8.0_151\lib\resources.jar;C:\Program Files\Java\jre1.8.0_151\lib\rt.jar;C:\Program Files\Java\jre1.8.0_151\lib\jsse.jar;C:\Program Files\Java\jre1.8.0_151\lib\jce.jar;C:\Program Files\Java\jre1.8.0_151\lib\charsets.jar;C:\Program Files\Java\jre1.8.0_151\lib\jfr.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\access-bridge-64.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\cldrdata.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\dnsns.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\jaccess.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\jfxrt.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\localedata.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\nashorn.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunec.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunjce_provider.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunmscapi.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunpkcs11.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\zipfs.jar;E:\spring_hibernate17\SpringWithHibernate\target\classes;C:\Users\Sajjad\.m2\repository\org\springframework\spring-context\5.0.6.RELEASE\spring-context-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-aop\5.0.6.RELEASE\spring-aop-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-beans\5.0.6.RELEASE\spring-beans-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-core\5.0.6.RELEASE\spring-core-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-jcl\5.0.6.RELEASE\spring-jcl-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-expression\5.0.6.RELEASE\spring-expression-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-orm\4.3.14.RELEASE\spring-orm-4.3.14.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-jdbc\4.3.14.RELEASE\spring-jdbc-4.3.14.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-tx\4.3.14.RELEASE\spring-tx-4.3.14.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\hibernate\hibernate-core\5.2.16.Final\hibernate-core-5.2.16.Final.jar;C:\Users\Sajjad\.m2\repository\org\jboss\logging\jboss-logging\3.3.1.Final\jboss-logging-3.3.1.Final.jar;C:\Users\Sajjad\.m2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;C:\Users\Sajjad\.m2\repository\org\javassist\javassist\3.22.0-GA\javassist-3.22.0-GA.jar;C:\Users\Sajjad\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\Sajjad\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.0.1.Final\jboss-transaction-api_1.2_spec-1.0.1.Final.jar;C:\Users\Sajjad\.m2\repository\org\jboss\jandex\2.0.3.Final\jandex-2.0.3.Final.jar;C:\Users\Sajjad\.m2\repository\com\fasterxml\classmate\1.3.0\classmate-1.3.0.jar;C:\Users\Sajjad\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;C:\Users\Sajjad\.m2\repository\org\hibernate\common\hibernate-commons-annotations\5.0.1.Final\hibernate-commons-annotations-5.0.1.Final.jar;C:\Users\Sajjad\.m2\repository\mysql\mysql-connector-java\5.1.45\mysql-connector-java-5.1.45.jar, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=http://java.oracle.com/, user.timezone=Asia/Calcutta, os.name=Windows 10, java.vm.specification.version=1.8, user.country=IN, sun.java.launcher=SUN_STANDARD, sun.boot.library.path=C:\Program Files\Java\jre1.8.0_151\bin, sun.java.command=com.nsksoft.spring.hibernate.client.App, sun.cpu.endian=little, user.home=C:\Users\Sajjad, user.language=en, java.specification.vendor=Oracle Corporation, java.home=C:\Program Files\Java\jre1.8.0_151, file.separator=\, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, sun.boot.class.path=C:\Program Files\Java\jre1.8.0_151\lib\resources.jar;C:\Program Files\Java\jre1.8.0_151\lib\rt.jar;C:\Program Files\Java\jre1.8.0_151\lib\sunrsasign.jar;C:\Program Files\Java\jre1.8.0_151\lib\jsse.jar;C:\Program Files\Java\jre1.8.0_151\lib\jce.jar;C:\Program Files\Java\jre1.8.0_151\lib\charsets.jar;C:\Program Files\Java\jre1.8.0_151\lib\jfr.jar;C:\Program Files\Java\jre1.8.0_151\classes, hibernate.hbm2ddl.auto=update, user.script=, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=1.8.0_151-b12, user.name=Sajjad, path.separator=;, os.version=10.0, java.endorsed.dirs=C:\Program Files\Java\jre1.8.0_151\lib\endorsed, java.runtime.name=Java(TM) SE Runtime Environment, file.encoding=UTF-8, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.show_sql=true, hibernate.classLoaders=[sun.misc.Launcher$AppClassLoader@2a139a55], hibernate.current_session_context_class=org.springframework.orm.hibernate5.SpringSessionContext, java.vendor.url.bug=http://bugreport.sun.com/bugreport/, java.io.tmpdir=C:\Users\Sajjad\AppData\Local\Temp\, java.version=1.8.0_151, user.dir=E:\spring_hibernate17\SpringWithHibernate, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.os.patch.level=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@7e276594, java.library.path=C:\Program Files\Java\jre1.8.0_151\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:/Program Files/Java/jre1.8.0_151/bin/server;C:/Program Files/Java/jre1.8.0_151/bin;C:/Program Files/Java/jre1.8.0_151/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\Program Files\MySQL\MySQL Utilities 1.6\;"C:\Program Files\Java\jdk1.8.0_121\bin;";C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Git\cmd;C:\Users\Sajjad\AppData\Local\Microsoft\WindowsApps;C:\Users\Sajjad\AppData\Local\GitHubDesktop\bin;%USERPROFILE%\AppData\Local\Microsoft\WindowsApps;;E:\Softwares\spring-tool-suite-3.9.2.RELEASE-e4.7.2-win32-x86_64\sts-bundle\sts-3.9.2.RELEASE;;., java.vm.info=mixed mode, java.vendor=Oracle Corporation, java.vm.version=25.151-b12, hibernate.bytecode.use_reflection_optimizer=false, hibernate.connection.datasource=org.springframework.jdbc.datasource.DriverManagerDataSource@53ca01a2, java.ext.dirs=C:\Program Files\Java\jre1.8.0_151\lib\ext;C:\WINDOWS\Sun\Java\lib\ext, sun.io.unicode.encoding=UnicodeLittle, java.class.version=52.0}
Skipping JACC integration as it was not enabled
Instantiated session factory
Not known whether passed class name [com.nsksoft.spring.hibernate.bean.User] is safe
No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.nsksoft.spring.hibernate.bean.User
Not known whether passed class name [com.nsksoft.spring.hibernate.bean.User] is safe
No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.nsksoft.spring.hibernate.bean.User
Static SQL for entity: com.nsksoft.spring.hibernate.bean.User
 Version select: select Email_id from UserDetails where Email_id =?
 Snapshot select: select user_.Email_id, user_.country as country2_0_, user_.dob as dob3_0_, user_.first_name as first_na4_0_, user_.gender as gender5_0_, user_.last_name as last_nam6_0_, user_.marital_status as marital_7_0_, user_.mobile as mobile8_0_, user_.pass_word as pass_wor9_0_, user_.permanent_adreess as permane10_0_, user_.pincode as pincode11_0_, user_.present_address as present12_0_, user_.state as state13_0_ from UserDetails user_ where user_.Email_id=?
 Insert 0: insert into UserDetails (country, dob, first_name, gender, last_name, marital_status, mobile, pass_word, permanent_adreess, pincode, present_address, state, Email_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
 Update 0: update UserDetails set country=?, dob=?, first_name=?, gender=?, last_name=?, marital_status=?, mobile=?, pass_word=?, permanent_adreess=?, pincode=?, present_address=?, state=? where Email_id=?
 Delete 0: delete from UserDetails where Email_id=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@741b3bc3]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {Email_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [NONE]: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@53e211ee]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {Email_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [READ]: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3d8bbcdc]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {Email_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [UPGRADE]: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@117e0fe5]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {Email_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [UPGRADE_NOWAIT]: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@78aea4b9]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {Email_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [UPGRADE_SKIPLOCKED]: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4b85880b]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {Email_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [FORCE]: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4215838f]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {Email_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [PESSIMISTIC_READ]: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=? lock in share mode
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2289aca5]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {Email_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [PESSIMISTIC_WRITE]: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@184497d1]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {Email_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6ffab045]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {Email_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [OPTIMISTIC]: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3e2943ab]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {Email_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=?
Static select for action ACTION_MERGE on entity com.nsksoft.spring.hibernate.bean.User: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=?
Static select for action ACTION_REFRESH on entity com.nsksoft.spring.hibernate.bean.User: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=?
No alter strings for table : UserDetails
No JtaPlatform was specified, checking resolver
No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
Checking 0 named HQL queries
Checking 0 named SQL queries
Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@6691490c
Registering SessionFactory: 0c41fa10-9ddd-4639-85df-9dc534724fea (<unnamed>)
Not binding SessionFactory to JNDI, no JNDI name configured
Statistics initialized [enabled=false]
Generated identifier: anil@gmail.com, using strategy: org.hibernate.id.Assigned
Logging Provider: org.jboss.logging.Log4jLoggerProvider
Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
HHH000412: Hibernate Core {5.2.16.Final}
HHH000206: hibernate.properties not found
Building session factory using internal StandardServiceRegistryBuilder
Overriding existing service binding [org.hibernate.secure.spi.JaccService]
Building session factory using provided StandardServiceRegistry
Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
Adding type registration boolean -> org.hibernate.type.BooleanType@87a85e1
Adding type registration boolean -> org.hibernate.type.BooleanType@87a85e1
Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@87a85e1
Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@55f616cf
Adding type registration true_false -> org.hibernate.type.TrueFalseType@46fa7c39
Adding type registration yes_no -> org.hibernate.type.YesNoType@4a668b6e
Adding type registration byte -> org.hibernate.type.ByteType@6c779568
Adding type registration byte -> org.hibernate.type.ByteType@6c779568
Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@6c779568
Adding type registration character -> org.hibernate.type.CharacterType@61d6015a
Adding type registration char -> org.hibernate.type.CharacterType@61d6015a
Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@61d6015a
Adding type registration short -> org.hibernate.type.ShortType@37858383
Adding type registration short -> org.hibernate.type.ShortType@37858383
Adding type registration java.lang.Short -> org.hibernate.type.ShortType@37858383
Adding type registration integer -> org.hibernate.type.IntegerType@5136d012
Adding type registration int -> org.hibernate.type.IntegerType@5136d012
Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@5136d012
Adding type registration long -> org.hibernate.type.LongType@13b13b5d
Adding type registration long -> org.hibernate.type.LongType@13b13b5d
Adding type registration java.lang.Long -> org.hibernate.type.LongType@13b13b5d
Adding type registration float -> org.hibernate.type.FloatType@366647c2
Adding type registration float -> org.hibernate.type.FloatType@366647c2
Adding type registration java.lang.Float -> org.hibernate.type.FloatType@366647c2
Adding type registration double -> org.hibernate.type.DoubleType@503d687a
Adding type registration double -> org.hibernate.type.DoubleType@503d687a
Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@503d687a
Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@4d910fd6
Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@4d910fd6
Adding type registration big_integer -> org.hibernate.type.BigIntegerType@2e222612
Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@2e222612
Adding type registration string -> org.hibernate.type.StringType@6b8ca3c8
Adding type registration java.lang.String -> org.hibernate.type.StringType@6b8ca3c8
Adding type registration nstring -> org.hibernate.type.StringNVarcharType@65f095f8
Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@747edf66
Adding type registration url -> org.hibernate.type.UrlType@74455848
Adding type registration java.net.URL -> org.hibernate.type.UrlType@74455848
Adding type registration Duration -> org.hibernate.type.DurationType@11bd0f3b
Adding type registration java.time.Duration -> org.hibernate.type.DurationType@11bd0f3b
Adding type registration Instant -> org.hibernate.type.InstantType@51dcb805
Adding type registration java.time.Instant -> org.hibernate.type.InstantType@51dcb805
Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@b62d79
Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@b62d79
Adding type registration LocalDate -> org.hibernate.type.LocalDateType@693fe6c9
Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@693fe6c9
Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@306f16f3
Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@306f16f3
Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@2dde1bff
Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@2dde1bff
Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@48974e45
Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@48974e45
Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@793be5ca
Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@793be5ca
Adding type registration date -> org.hibernate.type.DateType@101952da
Adding type registration java.sql.Date -> org.hibernate.type.DateType@101952da
Adding type registration time -> org.hibernate.type.TimeType@10feca44
Adding type registration java.sql.Time -> org.hibernate.type.TimeType@10feca44
Adding type registration timestamp -> org.hibernate.type.TimestampType@1e683a3e
Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@1e683a3e
Adding type registration java.util.Date -> org.hibernate.type.TimestampType@1e683a3e
Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@14555e0a
Adding type registration calendar -> org.hibernate.type.CalendarType@6f46426d
Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@6f46426d
Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@6f46426d
Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@10d307f1
Adding type registration locale -> org.hibernate.type.LocaleType@5403f35f
Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@5403f35f
Adding type registration currency -> org.hibernate.type.CurrencyType@1b1426f4
Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@1b1426f4
Adding type registration timezone -> org.hibernate.type.TimeZoneType@76c3e77a
Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@76c3e77a
Adding type registration class -> org.hibernate.type.ClassType@fa49800
Adding type registration java.lang.Class -> org.hibernate.type.ClassType@fa49800
Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@25084a1e
Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@25084a1e
Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@16610890
Adding type registration binary -> org.hibernate.type.BinaryType@5562c41e
Adding type registration byte[] -> org.hibernate.type.BinaryType@5562c41e
Adding type registration [B -> org.hibernate.type.BinaryType@5562c41e
Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@73e22a3d
Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@73e22a3d
Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@73e22a3d
Adding type registration row_version -> org.hibernate.type.RowVersionType@7fee8714
Adding type registration image -> org.hibernate.type.ImageType@2fb3536e
Adding type registration characters -> org.hibernate.type.CharArrayType@22ef9844
Adding type registration char[] -> org.hibernate.type.CharArrayType@22ef9844
Adding type registration [C -> org.hibernate.type.CharArrayType@22ef9844
Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@1da2cb77
Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@1da2cb77
Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@1da2cb77
Adding type registration text -> org.hibernate.type.TextType@5acf93bb
Adding type registration ntext -> org.hibernate.type.NTextType@66d3eec0
Adding type registration blob -> org.hibernate.type.BlobType@6392827e
Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@6392827e
Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@43dac38f
Adding type registration clob -> org.hibernate.type.ClobType@53ce1329
Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@53ce1329
Adding type registration nclob -> org.hibernate.type.NClobType@290222c1
Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@290222c1
Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@49049a04
Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@82de64a
Adding type registration serializable -> org.hibernate.type.SerializableType@54a7079e
Adding type registration object -> org.hibernate.type.ObjectType@29215f06
Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@29215f06
Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@6bd61f98
Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@48aca48b
Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@13fd2ccd
Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@b9b00e0
Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@506ae4d4
Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@7d4f9aae
Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@72e5a8e
Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@54e1c68b
Database ->
       name : MySQL
    version : 5.7.18-log
      major : 5
      minor : 7
Driver ->
       name : MySQL Connector Java
    version : mysql-connector-java-5.1.45 ( Revision: 9131eefa398531c7dc98776e8a3fe839e544c5b2 )
      major : 5
      minor : 1
JDBC version : 4.0
HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
JDBC driver metadata reported database stores quoted identifiers in more than one case
IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
Binding entity from annotated class: com.nsksoft.spring.hibernate.bean.User
Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
Import with entity name User
Bind entity com.nsksoft.spring.hibernate.bean.User on table UserDetails
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=Email_id, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property email with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:email]
building SimpleValue for email
Building property email
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=country, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property country with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:country]
building SimpleValue for country
Building property country
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=dob, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property dob with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:dob]
building SimpleValue for dob
Building property dob
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=first_name, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property first_name with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:first_name]
building SimpleValue for first_name
Building property first_name
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=gender, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property gender with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:gender]
building SimpleValue for gender
Building property gender
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=last_name, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property last_name with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:last_name]
building SimpleValue for last_name
Building property last_name
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=marital_status, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property marital_status with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:marital_status]
building SimpleValue for marital_status
Building property marital_status
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=mobile, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property mobile with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:mobile]
building SimpleValue for mobile
Building property mobile
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=pass_word, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property password with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:password]
building SimpleValue for password
Building property password
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=permanent_adreess, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property permanent_adreess with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:permanent_adreess]
building SimpleValue for permanent_adreess
Building property permanent_adreess
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=pincode, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property pincode with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:pincode]
building SimpleValue for pincode
Building property pincode
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=present_address, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property present_address with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:present_address]
building SimpleValue for present_address
Building property present_address
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=state, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property state with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:state]
building SimpleValue for state
Building property state
Starting fillSimpleValue for email
Starting fillSimpleValue for country
Starting fillSimpleValue for dob
Starting fillSimpleValue for first_name
Starting fillSimpleValue for gender
Starting fillSimpleValue for last_name
Starting fillSimpleValue for marital_status
Starting fillSimpleValue for mobile
Starting fillSimpleValue for password
Starting fillSimpleValue for permanent_adreess
Starting fillSimpleValue for pincode
Starting fillSimpleValue for present_address
Starting fillSimpleValue for state
Forcing column [email_id] to be non-null as it is part of the primary key for table [userdetails]
Building session factory
SessionFactory name : null
Automatic flush during beforeCompletion(): enabled
Automatic session close at end of transaction: disabled
Statistics: disabled
Deleted entity synthetic identifier rollback: disabled
Default entity-mode: pojo
Check Nullability in Core (should be disabled when Bean Validation is on): enabled
Allow initialization of lazy state outside session : disabled
Using BatchFetchStyle : LEGACY
Default batch fetch size: -1
Maximum outer join fetch depth: 2
Default null ordering: NONE
Order SQL updates by primary key: disabled
Order SQL inserts for batching: disabled
multi-tenancy strategy : NONE
JTA Track by Thread: enabled
Query language substitutions: {}
JPA query language strict compliance: disabled
Named query checking : enabled
Second-level cache: enabled
Second-level query cache: disabled
Second-level query cache factory: org.hibernate.cache.internal.StandardQueryCacheFactory@93cf163
Second-level cache region prefix: null
Optimize second-level cache for minimal puts: disabled
Structured second-level cache entries: disabled
Second-level cache direct-reference entries: disabled
Automatic eviction of collection cache: disabled
JDBC batch size: 15
JDBC batch updates for versioned data: enabled
Scrollable result sets: enabled
Wrap result sets: disabled
JDBC3 getGeneratedKeys(): enabled
JDBC result set fetch size: null
Connection release mode: ON_CLOSE
Generate SQL with comments: disabled
Session factory constructed with filter configurations : {}
Instantiating session factory with properties: {sun.desktop=windows, awt.toolkit=sun.awt.windows.WToolkit, file.encoding.pkg=sun.io, java.specification.version=1.8, hibernate.connection.handling_mode=DELAYED_ACQUISITION_AND_HOLD, sun.cpu.isalist=amd64, sun.jnu.encoding=Cp1252, hibernate.dialect=org.hibernate.dialect.MySQL5Dialect, java.class.path=C:\Program Files\Java\jre1.8.0_151\lib\resources.jar;C:\Program Files\Java\jre1.8.0_151\lib\rt.jar;C:\Program Files\Java\jre1.8.0_151\lib\jsse.jar;C:\Program Files\Java\jre1.8.0_151\lib\jce.jar;C:\Program Files\Java\jre1.8.0_151\lib\charsets.jar;C:\Program Files\Java\jre1.8.0_151\lib\jfr.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\access-bridge-64.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\cldrdata.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\dnsns.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\jaccess.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\jfxrt.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\localedata.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\nashorn.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunec.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunjce_provider.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunmscapi.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunpkcs11.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\zipfs.jar;E:\spring_hibernate17\SpringWithHibernate\target\classes;C:\Users\Sajjad\.m2\repository\org\springframework\spring-context\5.0.6.RELEASE\spring-context-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-aop\5.0.6.RELEASE\spring-aop-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-beans\5.0.6.RELEASE\spring-beans-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-core\5.0.6.RELEASE\spring-core-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-jcl\5.0.6.RELEASE\spring-jcl-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-expression\5.0.6.RELEASE\spring-expression-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-orm\4.3.14.RELEASE\spring-orm-4.3.14.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-jdbc\4.3.14.RELEASE\spring-jdbc-4.3.14.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-tx\4.3.14.RELEASE\spring-tx-4.3.14.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\hibernate\hibernate-core\5.2.16.Final\hibernate-core-5.2.16.Final.jar;C:\Users\Sajjad\.m2\repository\org\jboss\logging\jboss-logging\3.3.1.Final\jboss-logging-3.3.1.Final.jar;C:\Users\Sajjad\.m2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;C:\Users\Sajjad\.m2\repository\org\javassist\javassist\3.22.0-GA\javassist-3.22.0-GA.jar;C:\Users\Sajjad\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\Sajjad\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.0.1.Final\jboss-transaction-api_1.2_spec-1.0.1.Final.jar;C:\Users\Sajjad\.m2\repository\org\jboss\jandex\2.0.3.Final\jandex-2.0.3.Final.jar;C:\Users\Sajjad\.m2\repository\com\fasterxml\classmate\1.3.0\classmate-1.3.0.jar;C:\Users\Sajjad\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;C:\Users\Sajjad\.m2\repository\org\hibernate\common\hibernate-commons-annotations\5.0.1.Final\hibernate-commons-annotations-5.0.1.Final.jar;C:\Users\Sajjad\.m2\repository\mysql\mysql-connector-java\5.1.45\mysql-connector-java-5.1.45.jar, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=http://java.oracle.com/, user.timezone=Asia/Calcutta, os.name=Windows 10, java.vm.specification.version=1.8, user.country=IN, sun.java.launcher=SUN_STANDARD, sun.boot.library.path=C:\Program Files\Java\jre1.8.0_151\bin, sun.java.command=com.nsksoft.spring.hibernate.client.App, sun.cpu.endian=little, user.home=C:\Users\Sajjad, user.language=en, java.specification.vendor=Oracle Corporation, java.home=C:\Program Files\Java\jre1.8.0_151, file.separator=\, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, sun.boot.class.path=C:\Program Files\Java\jre1.8.0_151\lib\resources.jar;C:\Program Files\Java\jre1.8.0_151\lib\rt.jar;C:\Program Files\Java\jre1.8.0_151\lib\sunrsasign.jar;C:\Program Files\Java\jre1.8.0_151\lib\jsse.jar;C:\Program Files\Java\jre1.8.0_151\lib\jce.jar;C:\Program Files\Java\jre1.8.0_151\lib\charsets.jar;C:\Program Files\Java\jre1.8.0_151\lib\jfr.jar;C:\Program Files\Java\jre1.8.0_151\classes, hibernate.hbm2ddl.auto=update, user.script=, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=1.8.0_151-b12, user.name=Sajjad, path.separator=;, os.version=10.0, java.endorsed.dirs=C:\Program Files\Java\jre1.8.0_151\lib\endorsed, java.runtime.name=Java(TM) SE Runtime Environment, file.encoding=UTF-8, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.show_sql=true, hibernate.classLoaders=[sun.misc.Launcher$AppClassLoader@2a139a55], hibernate.current_session_context_class=org.springframework.orm.hibernate5.SpringSessionContext, java.vendor.url.bug=http://bugreport.sun.com/bugreport/, java.io.tmpdir=C:\Users\Sajjad\AppData\Local\Temp\, java.version=1.8.0_151, user.dir=E:\spring_hibernate17\SpringWithHibernate, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.os.patch.level=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@7e276594, java.library.path=C:\Program Files\Java\jre1.8.0_151\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:/Program Files/Java/jre1.8.0_151/bin/server;C:/Program Files/Java/jre1.8.0_151/bin;C:/Program Files/Java/jre1.8.0_151/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\Program Files\MySQL\MySQL Utilities 1.6\;"C:\Program Files\Java\jdk1.8.0_121\bin;";C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Git\cmd;C:\Users\Sajjad\AppData\Local\Microsoft\WindowsApps;C:\Users\Sajjad\AppData\Local\GitHubDesktop\bin;%USERPROFILE%\AppData\Local\Microsoft\WindowsApps;;E:\Softwares\spring-tool-suite-3.9.2.RELEASE-e4.7.2-win32-x86_64\sts-bundle\sts-3.9.2.RELEASE;;., java.vm.info=mixed mode, java.vendor=Oracle Corporation, java.vm.version=25.151-b12, hibernate.bytecode.use_reflection_optimizer=false, hibernate.connection.datasource=org.springframework.jdbc.datasource.DriverManagerDataSource@53ca01a2, java.ext.dirs=C:\Program Files\Java\jre1.8.0_151\lib\ext;C:\WINDOWS\Sun\Java\lib\ext, sun.io.unicode.encoding=UnicodeLittle, java.class.version=52.0}
Skipping JACC integration as it was not enabled
Instantiated session factory
Not known whether passed class name [com.nsksoft.spring.hibernate.bean.User] is safe
No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.nsksoft.spring.hibernate.bean.User
Not known whether passed class name [com.nsksoft.spring.hibernate.bean.User] is safe
No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.nsksoft.spring.hibernate.bean.User
Static SQL for entity: com.nsksoft.spring.hibernate.bean.User
 Version select: select Email_id from UserDetails where Email_id =?
 Snapshot select: select user_.Email_id, user_.country as country2_0_, user_.dob as dob3_0_, user_.first_name as first_na4_0_, user_.gender as gender5_0_, user_.last_name as last_nam6_0_, user_.marital_status as marital_7_0_, user_.mobile as mobile8_0_, user_.pass_word as pass_wor9_0_, user_.permanent_adreess as permane10_0_, user_.pincode as pincode11_0_, user_.present_address as present12_0_, user_.state as state13_0_ from UserDetails user_ where user_.Email_id=?
 Insert 0: insert into UserDetails (country, dob, first_name, gender, last_name, marital_status, mobile, pass_word, permanent_adreess, pincode, present_address, state, Email_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
 Update 0: update UserDetails set country=?, dob=?, first_name=?, gender=?, last_name=?, marital_status=?, mobile=?, pass_word=?, permanent_adreess=?, pincode=?, present_address=?, state=? where Email_id=?
 Delete 0: delete from UserDetails where Email_id=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@741b3bc3]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {Email_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [NONE]: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@53e211ee]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {Email_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [READ]: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3d8bbcdc]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {Email_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [UPGRADE]: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@117e0fe5]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {Email_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [UPGRADE_NOWAIT]: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@78aea4b9]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {Email_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [UPGRADE_SKIPLOCKED]: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4b85880b]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {Email_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [FORCE]: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4215838f]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {Email_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [PESSIMISTIC_READ]: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=? lock in share mode
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2289aca5]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {Email_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [PESSIMISTIC_WRITE]: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@184497d1]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {Email_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6ffab045]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {Email_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [OPTIMISTIC]: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3e2943ab]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {Email_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=?
Static select for action ACTION_MERGE on entity com.nsksoft.spring.hibernate.bean.User: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=?
Static select for action ACTION_REFRESH on entity com.nsksoft.spring.hibernate.bean.User: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=?
No alter strings for table : UserDetails
No JtaPlatform was specified, checking resolver
No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
Checking 0 named HQL queries
Checking 0 named SQL queries
Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@6691490c
Registering SessionFactory: c821607b-1e22-4e3d-9b8f-093ba0db87f5 (<unnamed>)
Not binding SessionFactory to JNDI, no JNDI name configured
Statistics initialized [enabled=false]
select user_.Email_id, user_.country as country2_0_, user_.dob as dob3_0_, user_.first_name as first_na4_0_, user_.gender as gender5_0_, user_.last_name as last_nam6_0_, user_.marital_status as marital_7_0_, user_.mobile as mobile8_0_, user_.pass_word as pass_wor9_0_, user_.permanent_adreess as permane10_0_, user_.pincode as pincode11_0_, user_.present_address as present12_0_, user_.state as state13_0_ from UserDetails user_ where user_.Email_id=?
HHH000387: ResultSet's statement was not registered
Generated identifier: anil@gmail.com, using strategy: org.hibernate.id.Assigned
Logging Provider: org.jboss.logging.Log4jLoggerProvider
Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
HHH000412: Hibernate Core {5.2.16.Final}
HHH000206: hibernate.properties not found
Building session factory using internal StandardServiceRegistryBuilder
Overriding existing service binding [org.hibernate.secure.spi.JaccService]
Building session factory using provided StandardServiceRegistry
Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
Adding type registration boolean -> org.hibernate.type.BooleanType@87a85e1
Adding type registration boolean -> org.hibernate.type.BooleanType@87a85e1
Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@87a85e1
Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@55f616cf
Adding type registration true_false -> org.hibernate.type.TrueFalseType@46fa7c39
Adding type registration yes_no -> org.hibernate.type.YesNoType@4a668b6e
Adding type registration byte -> org.hibernate.type.ByteType@6c779568
Adding type registration byte -> org.hibernate.type.ByteType@6c779568
Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@6c779568
Adding type registration character -> org.hibernate.type.CharacterType@61d6015a
Adding type registration char -> org.hibernate.type.CharacterType@61d6015a
Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@61d6015a
Adding type registration short -> org.hibernate.type.ShortType@37858383
Adding type registration short -> org.hibernate.type.ShortType@37858383
Adding type registration java.lang.Short -> org.hibernate.type.ShortType@37858383
Adding type registration integer -> org.hibernate.type.IntegerType@5136d012
Adding type registration int -> org.hibernate.type.IntegerType@5136d012
Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@5136d012
Adding type registration long -> org.hibernate.type.LongType@13b13b5d
Adding type registration long -> org.hibernate.type.LongType@13b13b5d
Adding type registration java.lang.Long -> org.hibernate.type.LongType@13b13b5d
Adding type registration float -> org.hibernate.type.FloatType@366647c2
Adding type registration float -> org.hibernate.type.FloatType@366647c2
Adding type registration java.lang.Float -> org.hibernate.type.FloatType@366647c2
Adding type registration double -> org.hibernate.type.DoubleType@503d687a
Adding type registration double -> org.hibernate.type.DoubleType@503d687a
Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@503d687a
Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@4d910fd6
Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@4d910fd6
Adding type registration big_integer -> org.hibernate.type.BigIntegerType@2e222612
Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@2e222612
Adding type registration string -> org.hibernate.type.StringType@6b8ca3c8
Adding type registration java.lang.String -> org.hibernate.type.StringType@6b8ca3c8
Adding type registration nstring -> org.hibernate.type.StringNVarcharType@65f095f8
Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@747edf66
Adding type registration url -> org.hibernate.type.UrlType@74455848
Adding type registration java.net.URL -> org.hibernate.type.UrlType@74455848
Adding type registration Duration -> org.hibernate.type.DurationType@11bd0f3b
Adding type registration java.time.Duration -> org.hibernate.type.DurationType@11bd0f3b
Adding type registration Instant -> org.hibernate.type.InstantType@51dcb805
Adding type registration java.time.Instant -> org.hibernate.type.InstantType@51dcb805
Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@b62d79
Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@b62d79
Adding type registration LocalDate -> org.hibernate.type.LocalDateType@693fe6c9
Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@693fe6c9
Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@306f16f3
Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@306f16f3
Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@2dde1bff
Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@2dde1bff
Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@48974e45
Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@48974e45
Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@793be5ca
Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@793be5ca
Adding type registration date -> org.hibernate.type.DateType@101952da
Adding type registration java.sql.Date -> org.hibernate.type.DateType@101952da
Adding type registration time -> org.hibernate.type.TimeType@10feca44
Adding type registration java.sql.Time -> org.hibernate.type.TimeType@10feca44
Adding type registration timestamp -> org.hibernate.type.TimestampType@1e683a3e
Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@1e683a3e
Adding type registration java.util.Date -> org.hibernate.type.TimestampType@1e683a3e
Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@14555e0a
Adding type registration calendar -> org.hibernate.type.CalendarType@6f46426d
Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@6f46426d
Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@6f46426d
Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@10d307f1
Adding type registration locale -> org.hibernate.type.LocaleType@5403f35f
Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@5403f35f
Adding type registration currency -> org.hibernate.type.CurrencyType@1b1426f4
Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@1b1426f4
Adding type registration timezone -> org.hibernate.type.TimeZoneType@76c3e77a
Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@76c3e77a
Adding type registration class -> org.hibernate.type.ClassType@fa49800
Adding type registration java.lang.Class -> org.hibernate.type.ClassType@fa49800
Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@25084a1e
Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@25084a1e
Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@16610890
Adding type registration binary -> org.hibernate.type.BinaryType@5562c41e
Adding type registration byte[] -> org.hibernate.type.BinaryType@5562c41e
Adding type registration [B -> org.hibernate.type.BinaryType@5562c41e
Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@73e22a3d
Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@73e22a3d
Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@73e22a3d
Adding type registration row_version -> org.hibernate.type.RowVersionType@7fee8714
Adding type registration image -> org.hibernate.type.ImageType@2fb3536e
Adding type registration characters -> org.hibernate.type.CharArrayType@22ef9844
Adding type registration char[] -> org.hibernate.type.CharArrayType@22ef9844
Adding type registration [C -> org.hibernate.type.CharArrayType@22ef9844
Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@1da2cb77
Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@1da2cb77
Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@1da2cb77
Adding type registration text -> org.hibernate.type.TextType@5acf93bb
Adding type registration ntext -> org.hibernate.type.NTextType@66d3eec0
Adding type registration blob -> org.hibernate.type.BlobType@6392827e
Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@6392827e
Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@43dac38f
Adding type registration clob -> org.hibernate.type.ClobType@53ce1329
Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@53ce1329
Adding type registration nclob -> org.hibernate.type.NClobType@290222c1
Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@290222c1
Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@49049a04
Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@82de64a
Adding type registration serializable -> org.hibernate.type.SerializableType@54a7079e
Adding type registration object -> org.hibernate.type.ObjectType@29215f06
Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@29215f06
Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@6bd61f98
Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@48aca48b
Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@13fd2ccd
Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@b9b00e0
Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@506ae4d4
Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@7d4f9aae
Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@72e5a8e
Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@54e1c68b
Database ->
       name : MySQL
    version : 5.7.18-log
      major : 5
      minor : 7
Driver ->
       name : MySQL Connector Java
    version : mysql-connector-java-5.1.45 ( Revision: 9131eefa398531c7dc98776e8a3fe839e544c5b2 )
      major : 5
      minor : 1
JDBC version : 4.0
HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
JDBC driver metadata reported database stores quoted identifiers in more than one case
IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
Binding entity from annotated class: com.nsksoft.spring.hibernate.bean.User
Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
Import with entity name User
Bind entity com.nsksoft.spring.hibernate.bean.User on table UserDetails
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=Email_id, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property email with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:email]
building SimpleValue for email
Building property email
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=country, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property country with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:country]
building SimpleValue for country
Building property country
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=dob, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property dob with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:dob]
building SimpleValue for dob
Building property dob
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=first_name, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property first_name with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:first_name]
building SimpleValue for first_name
Building property first_name
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=gender, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property gender with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:gender]
building SimpleValue for gender
Building property gender
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=last_name, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property last_name with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:last_name]
building SimpleValue for last_name
Building property last_name
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=marital_status, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property marital_status with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:marital_status]
building SimpleValue for marital_status
Building property marital_status
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=mobile, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property mobile with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:mobile]
building SimpleValue for mobile
Building property mobile
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=pass_word, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property password with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:password]
building SimpleValue for password
Building property password
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=permanent_adreess, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property permanent_adreess with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:permanent_adreess]
building SimpleValue for permanent_adreess
Building property permanent_adreess
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=pincode, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property pincode with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:pincode]
building SimpleValue for pincode
Building property pincode
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=present_address, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property present_address with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:present_address]
building SimpleValue for present_address
Building property present_address
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=state, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property state with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:state]
building SimpleValue for state
Building property state
Starting fillSimpleValue for email
Starting fillSimpleValue for country
Starting fillSimpleValue for dob
Starting fillSimpleValue for first_name
Starting fillSimpleValue for gender
Starting fillSimpleValue for last_name
Starting fillSimpleValue for marital_status
Starting fillSimpleValue for mobile
Starting fillSimpleValue for password
Starting fillSimpleValue for permanent_adreess
Starting fillSimpleValue for pincode
Starting fillSimpleValue for present_address
Starting fillSimpleValue for state
Forcing column [email_id] to be non-null as it is part of the primary key for table [userdetails]
Building session factory
SessionFactory name : null
Automatic flush during beforeCompletion(): enabled
Automatic session close at end of transaction: disabled
Statistics: disabled
Deleted entity synthetic identifier rollback: disabled
Default entity-mode: pojo
Check Nullability in Core (should be disabled when Bean Validation is on): enabled
Allow initialization of lazy state outside session : disabled
Using BatchFetchStyle : LEGACY
Default batch fetch size: -1
Maximum outer join fetch depth: 2
Default null ordering: NONE
Order SQL updates by primary key: disabled
Order SQL inserts for batching: disabled
multi-tenancy strategy : NONE
JTA Track by Thread: enabled
Query language substitutions: {}
JPA query language strict compliance: disabled
Named query checking : enabled
Second-level cache: enabled
Second-level query cache: disabled
Second-level query cache factory: org.hibernate.cache.internal.StandardQueryCacheFactory@93cf163
Second-level cache region prefix: null
Optimize second-level cache for minimal puts: disabled
Structured second-level cache entries: disabled
Second-level cache direct-reference entries: disabled
Automatic eviction of collection cache: disabled
JDBC batch size: 15
JDBC batch updates for versioned data: enabled
Scrollable result sets: enabled
Wrap result sets: disabled
JDBC3 getGeneratedKeys(): enabled
JDBC result set fetch size: null
Connection release mode: ON_CLOSE
Generate SQL with comments: disabled
Session factory constructed with filter configurations : {}
Instantiating session factory with properties: {sun.desktop=windows, awt.toolkit=sun.awt.windows.WToolkit, file.encoding.pkg=sun.io, java.specification.version=1.8, hibernate.connection.handling_mode=DELAYED_ACQUISITION_AND_HOLD, sun.cpu.isalist=amd64, sun.jnu.encoding=Cp1252, hibernate.dialect=org.hibernate.dialect.MySQL5Dialect, java.class.path=C:\Program Files\Java\jre1.8.0_151\lib\resources.jar;C:\Program Files\Java\jre1.8.0_151\lib\rt.jar;C:\Program Files\Java\jre1.8.0_151\lib\jsse.jar;C:\Program Files\Java\jre1.8.0_151\lib\jce.jar;C:\Program Files\Java\jre1.8.0_151\lib\charsets.jar;C:\Program Files\Java\jre1.8.0_151\lib\jfr.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\access-bridge-64.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\cldrdata.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\dnsns.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\jaccess.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\jfxrt.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\localedata.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\nashorn.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunec.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunjce_provider.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunmscapi.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunpkcs11.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\zipfs.jar;E:\spring_hibernate17\SpringWithHibernate\target\classes;C:\Users\Sajjad\.m2\repository\org\springframework\spring-context\5.0.6.RELEASE\spring-context-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-aop\5.0.6.RELEASE\spring-aop-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-beans\5.0.6.RELEASE\spring-beans-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-core\5.0.6.RELEASE\spring-core-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-jcl\5.0.6.RELEASE\spring-jcl-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-expression\5.0.6.RELEASE\spring-expression-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-orm\4.3.14.RELEASE\spring-orm-4.3.14.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-jdbc\4.3.14.RELEASE\spring-jdbc-4.3.14.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-tx\4.3.14.RELEASE\spring-tx-4.3.14.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\hibernate\hibernate-core\5.2.16.Final\hibernate-core-5.2.16.Final.jar;C:\Users\Sajjad\.m2\repository\org\jboss\logging\jboss-logging\3.3.1.Final\jboss-logging-3.3.1.Final.jar;C:\Users\Sajjad\.m2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;C:\Users\Sajjad\.m2\repository\org\javassist\javassist\3.22.0-GA\javassist-3.22.0-GA.jar;C:\Users\Sajjad\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\Sajjad\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.0.1.Final\jboss-transaction-api_1.2_spec-1.0.1.Final.jar;C:\Users\Sajjad\.m2\repository\org\jboss\jandex\2.0.3.Final\jandex-2.0.3.Final.jar;C:\Users\Sajjad\.m2\repository\com\fasterxml\classmate\1.3.0\classmate-1.3.0.jar;C:\Users\Sajjad\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;C:\Users\Sajjad\.m2\repository\org\hibernate\common\hibernate-commons-annotations\5.0.1.Final\hibernate-commons-annotations-5.0.1.Final.jar;C:\Users\Sajjad\.m2\repository\mysql\mysql-connector-java\5.1.45\mysql-connector-java-5.1.45.jar, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=http://java.oracle.com/, user.timezone=Asia/Calcutta, os.name=Windows 10, java.vm.specification.version=1.8, user.country=IN, sun.java.launcher=SUN_STANDARD, sun.boot.library.path=C:\Program Files\Java\jre1.8.0_151\bin, sun.java.command=com.nsksoft.spring.hibernate.client.App, sun.cpu.endian=little, user.home=C:\Users\Sajjad, user.language=en, java.specification.vendor=Oracle Corporation, java.home=C:\Program Files\Java\jre1.8.0_151, file.separator=\, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, sun.boot.class.path=C:\Program Files\Java\jre1.8.0_151\lib\resources.jar;C:\Program Files\Java\jre1.8.0_151\lib\rt.jar;C:\Program Files\Java\jre1.8.0_151\lib\sunrsasign.jar;C:\Program Files\Java\jre1.8.0_151\lib\jsse.jar;C:\Program Files\Java\jre1.8.0_151\lib\jce.jar;C:\Program Files\Java\jre1.8.0_151\lib\charsets.jar;C:\Program Files\Java\jre1.8.0_151\lib\jfr.jar;C:\Program Files\Java\jre1.8.0_151\classes, hibernate.hbm2ddl.auto=update, user.script=, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=1.8.0_151-b12, user.name=Sajjad, path.separator=;, os.version=10.0, java.endorsed.dirs=C:\Program Files\Java\jre1.8.0_151\lib\endorsed, java.runtime.name=Java(TM) SE Runtime Environment, file.encoding=UTF-8, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.show_sql=true, hibernate.classLoaders=[sun.misc.Launcher$AppClassLoader@2a139a55], hibernate.current_session_context_class=org.springframework.orm.hibernate5.SpringSessionContext, java.vendor.url.bug=http://bugreport.sun.com/bugreport/, java.io.tmpdir=C:\Users\Sajjad\AppData\Local\Temp\, java.version=1.8.0_151, user.dir=E:\spring_hibernate17\SpringWithHibernate, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.os.patch.level=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@7e276594, java.library.path=C:\Program Files\Java\jre1.8.0_151\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:/Program Files/Java/jre1.8.0_151/bin/server;C:/Program Files/Java/jre1.8.0_151/bin;C:/Program Files/Java/jre1.8.0_151/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\Program Files\MySQL\MySQL Utilities 1.6\;"C:\Program Files\Java\jdk1.8.0_121\bin;";C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Git\cmd;C:\Users\Sajjad\AppData\Local\Microsoft\WindowsApps;C:\Users\Sajjad\AppData\Local\GitHubDesktop\bin;%USERPROFILE%\AppData\Local\Microsoft\WindowsApps;;E:\Softwares\spring-tool-suite-3.9.2.RELEASE-e4.7.2-win32-x86_64\sts-bundle\sts-3.9.2.RELEASE;;., java.vm.info=mixed mode, java.vendor=Oracle Corporation, java.vm.version=25.151-b12, hibernate.bytecode.use_reflection_optimizer=false, hibernate.connection.datasource=org.springframework.jdbc.datasource.DriverManagerDataSource@351d0846, java.ext.dirs=C:\Program Files\Java\jre1.8.0_151\lib\ext;C:\WINDOWS\Sun\Java\lib\ext, sun.io.unicode.encoding=UnicodeLittle, java.class.version=52.0}
Skipping JACC integration as it was not enabled
Instantiated session factory
Not known whether passed class name [com.nsksoft.spring.hibernate.bean.User] is safe
No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.nsksoft.spring.hibernate.bean.User
Not known whether passed class name [com.nsksoft.spring.hibernate.bean.User] is safe
No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.nsksoft.spring.hibernate.bean.User
Static SQL for entity: com.nsksoft.spring.hibernate.bean.User
 Version select: select Email_id from UserDetails where Email_id =?
 Snapshot select: select user_.Email_id, user_.country as country2_0_, user_.dob as dob3_0_, user_.first_name as first_na4_0_, user_.gender as gender5_0_, user_.last_name as last_nam6_0_, user_.marital_status as marital_7_0_, user_.mobile as mobile8_0_, user_.pass_word as pass_wor9_0_, user_.permanent_adreess as permane10_0_, user_.pincode as pincode11_0_, user_.present_address as present12_0_, user_.state as state13_0_ from UserDetails user_ where user_.Email_id=?
 Insert 0: insert into UserDetails (country, dob, first_name, gender, last_name, marital_status, mobile, pass_word, permanent_adreess, pincode, present_address, state, Email_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
 Update 0: update UserDetails set country=?, dob=?, first_name=?, gender=?, last_name=?, marital_status=?, mobile=?, pass_word=?, permanent_adreess=?, pincode=?, present_address=?, state=? where Email_id=?
 Delete 0: delete from UserDetails where Email_id=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@741b3bc3]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {Email_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [NONE]: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@53e211ee]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {Email_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [READ]: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3d8bbcdc]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {Email_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [UPGRADE]: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@117e0fe5]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {Email_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [UPGRADE_NOWAIT]: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@78aea4b9]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {Email_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [UPGRADE_SKIPLOCKED]: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4b85880b]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {Email_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [FORCE]: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4215838f]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {Email_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [PESSIMISTIC_READ]: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=? lock in share mode
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2289aca5]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {Email_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [PESSIMISTIC_WRITE]: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@184497d1]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {Email_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6ffab045]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {Email_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [OPTIMISTIC]: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3e2943ab]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {Email_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=?
Static select for action ACTION_MERGE on entity com.nsksoft.spring.hibernate.bean.User: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=?
Static select for action ACTION_REFRESH on entity com.nsksoft.spring.hibernate.bean.User: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=?
No alter strings for table : UserDetails
No JtaPlatform was specified, checking resolver
No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
Checking 0 named HQL queries
Checking 0 named SQL queries
Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@6691490c
Registering SessionFactory: 382ea6e6-6650-49ba-9bd8-ac5dcae38456 (<unnamed>)
Not binding SessionFactory to JNDI, no JNDI name configured
Statistics initialized [enabled=false]
select user_.Email_id, user_.country as country2_0_, user_.dob as dob3_0_, user_.first_name as first_na4_0_, user_.gender as gender5_0_, user_.last_name as last_nam6_0_, user_.marital_status as marital_7_0_, user_.mobile as mobile8_0_, user_.pass_word as pass_wor9_0_, user_.permanent_adreess as permane10_0_, user_.pincode as pincode11_0_, user_.present_address as present12_0_, user_.state as state13_0_ from UserDetails user_ where user_.Email_id=?
HHH000387: ResultSet's statement was not registered
Generated identifier: anil@gmail.com, using strategy: org.hibernate.id.Assigned
Logging Provider: org.jboss.logging.Log4jLoggerProvider
Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
HHH000412: Hibernate Core {5.2.16.Final}
HHH000206: hibernate.properties not found
Building session factory using internal StandardServiceRegistryBuilder
Overriding existing service binding [org.hibernate.secure.spi.JaccService]
Building session factory using provided StandardServiceRegistry
Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
Adding type registration boolean -> org.hibernate.type.BooleanType@87a85e1
Adding type registration boolean -> org.hibernate.type.BooleanType@87a85e1
Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@87a85e1
Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@55f616cf
Adding type registration true_false -> org.hibernate.type.TrueFalseType@46fa7c39
Adding type registration yes_no -> org.hibernate.type.YesNoType@4a668b6e
Adding type registration byte -> org.hibernate.type.ByteType@6c779568
Adding type registration byte -> org.hibernate.type.ByteType@6c779568
Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@6c779568
Adding type registration character -> org.hibernate.type.CharacterType@61d6015a
Adding type registration char -> org.hibernate.type.CharacterType@61d6015a
Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@61d6015a
Adding type registration short -> org.hibernate.type.ShortType@37858383
Adding type registration short -> org.hibernate.type.ShortType@37858383
Adding type registration java.lang.Short -> org.hibernate.type.ShortType@37858383
Adding type registration integer -> org.hibernate.type.IntegerType@5136d012
Adding type registration int -> org.hibernate.type.IntegerType@5136d012
Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@5136d012
Adding type registration long -> org.hibernate.type.LongType@13b13b5d
Adding type registration long -> org.hibernate.type.LongType@13b13b5d
Adding type registration java.lang.Long -> org.hibernate.type.LongType@13b13b5d
Adding type registration float -> org.hibernate.type.FloatType@366647c2
Adding type registration float -> org.hibernate.type.FloatType@366647c2
Adding type registration java.lang.Float -> org.hibernate.type.FloatType@366647c2
Adding type registration double -> org.hibernate.type.DoubleType@503d687a
Adding type registration double -> org.hibernate.type.DoubleType@503d687a
Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@503d687a
Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@4d910fd6
Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@4d910fd6
Adding type registration big_integer -> org.hibernate.type.BigIntegerType@2e222612
Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@2e222612
Adding type registration string -> org.hibernate.type.StringType@6b8ca3c8
Adding type registration java.lang.String -> org.hibernate.type.StringType@6b8ca3c8
Adding type registration nstring -> org.hibernate.type.StringNVarcharType@65f095f8
Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@747edf66
Adding type registration url -> org.hibernate.type.UrlType@74455848
Adding type registration java.net.URL -> org.hibernate.type.UrlType@74455848
Adding type registration Duration -> org.hibernate.type.DurationType@11bd0f3b
Adding type registration java.time.Duration -> org.hibernate.type.DurationType@11bd0f3b
Adding type registration Instant -> org.hibernate.type.InstantType@51dcb805
Adding type registration java.time.Instant -> org.hibernate.type.InstantType@51dcb805
Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@b62d79
Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@b62d79
Adding type registration LocalDate -> org.hibernate.type.LocalDateType@693fe6c9
Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@693fe6c9
Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@306f16f3
Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@306f16f3
Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@2dde1bff
Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@2dde1bff
Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@48974e45
Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@48974e45
Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@793be5ca
Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@793be5ca
Adding type registration date -> org.hibernate.type.DateType@101952da
Adding type registration java.sql.Date -> org.hibernate.type.DateType@101952da
Adding type registration time -> org.hibernate.type.TimeType@10feca44
Adding type registration java.sql.Time -> org.hibernate.type.TimeType@10feca44
Adding type registration timestamp -> org.hibernate.type.TimestampType@1e683a3e
Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@1e683a3e
Adding type registration java.util.Date -> org.hibernate.type.TimestampType@1e683a3e
Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@14555e0a
Adding type registration calendar -> org.hibernate.type.CalendarType@6f46426d
Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@6f46426d
Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@6f46426d
Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@10d307f1
Adding type registration locale -> org.hibernate.type.LocaleType@5403f35f
Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@5403f35f
Adding type registration currency -> org.hibernate.type.CurrencyType@1b1426f4
Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@1b1426f4
Adding type registration timezone -> org.hibernate.type.TimeZoneType@76c3e77a
Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@76c3e77a
Adding type registration class -> org.hibernate.type.ClassType@fa49800
Adding type registration java.lang.Class -> org.hibernate.type.ClassType@fa49800
Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@25084a1e
Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@25084a1e
Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@16610890
Adding type registration binary -> org.hibernate.type.BinaryType@5562c41e
Adding type registration byte[] -> org.hibernate.type.BinaryType@5562c41e
Adding type registration [B -> org.hibernate.type.BinaryType@5562c41e
Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@73e22a3d
Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@73e22a3d
Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@73e22a3d
Adding type registration row_version -> org.hibernate.type.RowVersionType@7fee8714
Adding type registration image -> org.hibernate.type.ImageType@2fb3536e
Adding type registration characters -> org.hibernate.type.CharArrayType@22ef9844
Adding type registration char[] -> org.hibernate.type.CharArrayType@22ef9844
Adding type registration [C -> org.hibernate.type.CharArrayType@22ef9844
Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@1da2cb77
Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@1da2cb77
Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@1da2cb77
Adding type registration text -> org.hibernate.type.TextType@5acf93bb
Adding type registration ntext -> org.hibernate.type.NTextType@66d3eec0
Adding type registration blob -> org.hibernate.type.BlobType@6392827e
Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@6392827e
Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@43dac38f
Adding type registration clob -> org.hibernate.type.ClobType@53ce1329
Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@53ce1329
Adding type registration nclob -> org.hibernate.type.NClobType@290222c1
Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@290222c1
Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@49049a04
Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@82de64a
Adding type registration serializable -> org.hibernate.type.SerializableType@54a7079e
Adding type registration object -> org.hibernate.type.ObjectType@29215f06
Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@29215f06
Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@6bd61f98
Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@48aca48b
Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@13fd2ccd
Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@b9b00e0
Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@506ae4d4
Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@7d4f9aae
Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@72e5a8e
Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@54e1c68b
Database ->
       name : MySQL
    version : 5.7.18-log
      major : 5
      minor : 7
Driver ->
       name : MySQL Connector Java
    version : mysql-connector-java-5.1.45 ( Revision: 9131eefa398531c7dc98776e8a3fe839e544c5b2 )
      major : 5
      minor : 1
JDBC version : 4.0
HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
JDBC driver metadata reported database stores quoted identifiers in more than one case
IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
Binding entity from annotated class: com.nsksoft.spring.hibernate.bean.User
Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
Import with entity name User
Bind entity com.nsksoft.spring.hibernate.bean.User on table UserDetails
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=Email_id, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property email with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:email]
building SimpleValue for email
Building property email
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=country, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property country with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:country]
building SimpleValue for country
Building property country
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=dob, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property dob with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:dob]
building SimpleValue for dob
Building property dob
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=first_name, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property first_name with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:first_name]
building SimpleValue for first_name
Building property first_name
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=gender, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property gender with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:gender]
building SimpleValue for gender
Building property gender
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=last_name, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property last_name with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:last_name]
building SimpleValue for last_name
Building property last_name
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=marital_status, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property marital_status with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:marital_status]
building SimpleValue for marital_status
Building property marital_status
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=mobile, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property mobile with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:mobile]
building SimpleValue for mobile
Building property mobile
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=pass_word, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property password with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:password]
building SimpleValue for password
Building property password
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=permanent_adreess, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property permanent_adreess with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:permanent_adreess]
building SimpleValue for permanent_adreess
Building property permanent_adreess
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=pincode, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property pincode with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:pincode]
building SimpleValue for pincode
Building property pincode
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=present_address, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property present_address with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:present_address]
building SimpleValue for present_address
Building property present_address
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=state, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property state with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:state]
building SimpleValue for state
Building property state
Starting fillSimpleValue for email
Starting fillSimpleValue for country
Starting fillSimpleValue for dob
Starting fillSimpleValue for first_name
Starting fillSimpleValue for gender
Starting fillSimpleValue for last_name
Starting fillSimpleValue for marital_status
Starting fillSimpleValue for mobile
Starting fillSimpleValue for password
Starting fillSimpleValue for permanent_adreess
Starting fillSimpleValue for pincode
Starting fillSimpleValue for present_address
Starting fillSimpleValue for state
Forcing column [email_id] to be non-null as it is part of the primary key for table [userdetails]
Building session factory
SessionFactory name : null
Automatic flush during beforeCompletion(): enabled
Automatic session close at end of transaction: disabled
Statistics: disabled
Deleted entity synthetic identifier rollback: disabled
Default entity-mode: pojo
Check Nullability in Core (should be disabled when Bean Validation is on): enabled
Allow initialization of lazy state outside session : disabled
Using BatchFetchStyle : LEGACY
Default batch fetch size: -1
Maximum outer join fetch depth: 2
Default null ordering: NONE
Order SQL updates by primary key: disabled
Order SQL inserts for batching: disabled
multi-tenancy strategy : NONE
JTA Track by Thread: enabled
Query language substitutions: {}
JPA query language strict compliance: disabled
Named query checking : enabled
Second-level cache: enabled
Second-level query cache: disabled
Second-level query cache factory: org.hibernate.cache.internal.StandardQueryCacheFactory@93cf163
Second-level cache region prefix: null
Optimize second-level cache for minimal puts: disabled
Structured second-level cache entries: disabled
Second-level cache direct-reference entries: disabled
Automatic eviction of collection cache: disabled
JDBC batch size: 15
JDBC batch updates for versioned data: enabled
Scrollable result sets: enabled
Wrap result sets: disabled
JDBC3 getGeneratedKeys(): enabled
JDBC result set fetch size: null
Connection release mode: ON_CLOSE
Generate SQL with comments: disabled
Session factory constructed with filter configurations : {}
Instantiating session factory with properties: {sun.desktop=windows, awt.toolkit=sun.awt.windows.WToolkit, file.encoding.pkg=sun.io, java.specification.version=1.8, hibernate.connection.handling_mode=DELAYED_ACQUISITION_AND_HOLD, sun.cpu.isalist=amd64, sun.jnu.encoding=Cp1252, hibernate.dialect=org.hibernate.dialect.MySQL5Dialect, java.class.path=C:\Program Files\Java\jre1.8.0_151\lib\resources.jar;C:\Program Files\Java\jre1.8.0_151\lib\rt.jar;C:\Program Files\Java\jre1.8.0_151\lib\jsse.jar;C:\Program Files\Java\jre1.8.0_151\lib\jce.jar;C:\Program Files\Java\jre1.8.0_151\lib\charsets.jar;C:\Program Files\Java\jre1.8.0_151\lib\jfr.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\access-bridge-64.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\cldrdata.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\dnsns.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\jaccess.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\jfxrt.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\localedata.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\nashorn.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunec.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunjce_provider.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunmscapi.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunpkcs11.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\zipfs.jar;E:\spring_hibernate17\SpringWithHibernate\target\classes;C:\Users\Sajjad\.m2\repository\org\springframework\spring-context\5.0.6.RELEASE\spring-context-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-aop\5.0.6.RELEASE\spring-aop-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-beans\5.0.6.RELEASE\spring-beans-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-core\5.0.6.RELEASE\spring-core-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-jcl\5.0.6.RELEASE\spring-jcl-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-expression\5.0.6.RELEASE\spring-expression-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-orm\4.3.14.RELEASE\spring-orm-4.3.14.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-jdbc\4.3.14.RELEASE\spring-jdbc-4.3.14.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-tx\4.3.14.RELEASE\spring-tx-4.3.14.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\hibernate\hibernate-core\5.2.16.Final\hibernate-core-5.2.16.Final.jar;C:\Users\Sajjad\.m2\repository\org\jboss\logging\jboss-logging\3.3.1.Final\jboss-logging-3.3.1.Final.jar;C:\Users\Sajjad\.m2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;C:\Users\Sajjad\.m2\repository\org\javassist\javassist\3.22.0-GA\javassist-3.22.0-GA.jar;C:\Users\Sajjad\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\Sajjad\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.0.1.Final\jboss-transaction-api_1.2_spec-1.0.1.Final.jar;C:\Users\Sajjad\.m2\repository\org\jboss\jandex\2.0.3.Final\jandex-2.0.3.Final.jar;C:\Users\Sajjad\.m2\repository\com\fasterxml\classmate\1.3.0\classmate-1.3.0.jar;C:\Users\Sajjad\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;C:\Users\Sajjad\.m2\repository\org\hibernate\common\hibernate-commons-annotations\5.0.1.Final\hibernate-commons-annotations-5.0.1.Final.jar;C:\Users\Sajjad\.m2\repository\mysql\mysql-connector-java\5.1.45\mysql-connector-java-5.1.45.jar, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=http://java.oracle.com/, user.timezone=Asia/Calcutta, os.name=Windows 10, java.vm.specification.version=1.8, user.country=IN, sun.java.launcher=SUN_STANDARD, sun.boot.library.path=C:\Program Files\Java\jre1.8.0_151\bin, sun.java.command=com.nsksoft.spring.hibernate.client.App, sun.cpu.endian=little, user.home=C:\Users\Sajjad, user.language=en, java.specification.vendor=Oracle Corporation, java.home=C:\Program Files\Java\jre1.8.0_151, file.separator=\, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, sun.boot.class.path=C:\Program Files\Java\jre1.8.0_151\lib\resources.jar;C:\Program Files\Java\jre1.8.0_151\lib\rt.jar;C:\Program Files\Java\jre1.8.0_151\lib\sunrsasign.jar;C:\Program Files\Java\jre1.8.0_151\lib\jsse.jar;C:\Program Files\Java\jre1.8.0_151\lib\jce.jar;C:\Program Files\Java\jre1.8.0_151\lib\charsets.jar;C:\Program Files\Java\jre1.8.0_151\lib\jfr.jar;C:\Program Files\Java\jre1.8.0_151\classes, hibernate.hbm2ddl.auto=update, user.script=, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=1.8.0_151-b12, user.name=Sajjad, path.separator=;, os.version=10.0, java.endorsed.dirs=C:\Program Files\Java\jre1.8.0_151\lib\endorsed, java.runtime.name=Java(TM) SE Runtime Environment, file.encoding=UTF-8, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.show_sql=true, hibernate.classLoaders=[sun.misc.Launcher$AppClassLoader@2a139a55], hibernate.current_session_context_class=org.springframework.orm.hibernate5.SpringSessionContext, java.vendor.url.bug=http://bugreport.sun.com/bugreport/, java.io.tmpdir=C:\Users\Sajjad\AppData\Local\Temp\, java.version=1.8.0_151, user.dir=E:\spring_hibernate17\SpringWithHibernate, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.os.patch.level=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@7e276594, java.library.path=C:\Program Files\Java\jre1.8.0_151\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:/Program Files/Java/jre1.8.0_151/bin/server;C:/Program Files/Java/jre1.8.0_151/bin;C:/Program Files/Java/jre1.8.0_151/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\Program Files\MySQL\MySQL Utilities 1.6\;"C:\Program Files\Java\jdk1.8.0_121\bin;";C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Git\cmd;C:\Users\Sajjad\AppData\Local\Microsoft\WindowsApps;C:\Users\Sajjad\AppData\Local\GitHubDesktop\bin;%USERPROFILE%\AppData\Local\Microsoft\WindowsApps;;E:\Softwares\spring-tool-suite-3.9.2.RELEASE-e4.7.2-win32-x86_64\sts-bundle\sts-3.9.2.RELEASE;;., java.vm.info=mixed mode, java.vendor=Oracle Corporation, java.vm.version=25.151-b12, hibernate.bytecode.use_reflection_optimizer=false, hibernate.connection.datasource=org.springframework.jdbc.datasource.DriverManagerDataSource@351d0846, java.ext.dirs=C:\Program Files\Java\jre1.8.0_151\lib\ext;C:\WINDOWS\Sun\Java\lib\ext, sun.io.unicode.encoding=UnicodeLittle, java.class.version=52.0}
Skipping JACC integration as it was not enabled
Instantiated session factory
Not known whether passed class name [com.nsksoft.spring.hibernate.bean.User] is safe
No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.nsksoft.spring.hibernate.bean.User
Not known whether passed class name [com.nsksoft.spring.hibernate.bean.User] is safe
No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.nsksoft.spring.hibernate.bean.User
Static SQL for entity: com.nsksoft.spring.hibernate.bean.User
 Version select: select Email_id from UserDetails where Email_id =?
 Snapshot select: select user_.Email_id, user_.country as country2_0_, user_.dob as dob3_0_, user_.first_name as first_na4_0_, user_.gender as gender5_0_, user_.last_name as last_nam6_0_, user_.marital_status as marital_7_0_, user_.mobile as mobile8_0_, user_.pass_word as pass_wor9_0_, user_.permanent_adreess as permane10_0_, user_.pincode as pincode11_0_, user_.present_address as present12_0_, user_.state as state13_0_ from UserDetails user_ where user_.Email_id=?
 Insert 0: insert into UserDetails (country, dob, first_name, gender, last_name, marital_status, mobile, pass_word, permanent_adreess, pincode, present_address, state, Email_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
 Update 0: update UserDetails set country=?, dob=?, first_name=?, gender=?, last_name=?, marital_status=?, mobile=?, pass_word=?, permanent_adreess=?, pincode=?, present_address=?, state=? where Email_id=?
 Delete 0: delete from UserDetails where Email_id=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@741b3bc3]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {Email_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [NONE]: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@53e211ee]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {Email_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [READ]: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3d8bbcdc]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {Email_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [UPGRADE]: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@117e0fe5]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {Email_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [UPGRADE_NOWAIT]: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@78aea4b9]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {Email_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [UPGRADE_SKIPLOCKED]: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4b85880b]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {Email_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [FORCE]: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4215838f]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {Email_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [PESSIMISTIC_READ]: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=? lock in share mode
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2289aca5]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {Email_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [PESSIMISTIC_WRITE]: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@184497d1]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {Email_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6ffab045]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {Email_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [OPTIMISTIC]: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3e2943ab]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {Email_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=?
Static select for action ACTION_MERGE on entity com.nsksoft.spring.hibernate.bean.User: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=?
Static select for action ACTION_REFRESH on entity com.nsksoft.spring.hibernate.bean.User: select user0_.Email_id as Email_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.first_name as first_na4_0_0_, user0_.gender as gender5_0_0_, user0_.last_name as last_nam6_0_0_, user0_.marital_status as marital_7_0_0_, user0_.mobile as mobile8_0_0_, user0_.pass_word as pass_wor9_0_0_, user0_.permanent_adreess as permane10_0_0_, user0_.pincode as pincode11_0_0_, user0_.present_address as present12_0_0_, user0_.state as state13_0_0_ from UserDetails user0_ where user0_.Email_id=?
No alter strings for table : UserDetails
No JtaPlatform was specified, checking resolver
No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
Checking 0 named HQL queries
Checking 0 named SQL queries
Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@6691490c
Registering SessionFactory: 244adeef-a053-4360-b8bb-a249f02046df (<unnamed>)
Not binding SessionFactory to JNDI, no JNDI name configured
Statistics initialized [enabled=false]
select user_.Email_id, user_.country as country2_0_, user_.dob as dob3_0_, user_.first_name as first_na4_0_, user_.gender as gender5_0_, user_.last_name as last_nam6_0_, user_.marital_status as marital_7_0_, user_.mobile as mobile8_0_, user_.pass_word as pass_wor9_0_, user_.permanent_adreess as permane10_0_, user_.pincode as pincode11_0_, user_.present_address as present12_0_, user_.state as state13_0_ from UserDetails user_ where user_.Email_id=?
HHH000387: ResultSet's statement was not registered
Generated identifier: anil@gmail.com, using strategy: org.hibernate.id.Assigned
Logging Provider: org.jboss.logging.Log4jLoggerProvider
Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
HHH000412: Hibernate Core {5.2.16.Final}
HHH000206: hibernate.properties not found
Building session factory using internal StandardServiceRegistryBuilder
Overriding existing service binding [org.hibernate.secure.spi.JaccService]
Building session factory using provided StandardServiceRegistry
Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
Adding type registration boolean -> org.hibernate.type.BooleanType@87a85e1
Adding type registration boolean -> org.hibernate.type.BooleanType@87a85e1
Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@87a85e1
Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@55f616cf
Adding type registration true_false -> org.hibernate.type.TrueFalseType@46fa7c39
Adding type registration yes_no -> org.hibernate.type.YesNoType@4a668b6e
Adding type registration byte -> org.hibernate.type.ByteType@6c779568
Adding type registration byte -> org.hibernate.type.ByteType@6c779568
Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@6c779568
Adding type registration character -> org.hibernate.type.CharacterType@61d6015a
Adding type registration char -> org.hibernate.type.CharacterType@61d6015a
Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@61d6015a
Adding type registration short -> org.hibernate.type.ShortType@37858383
Adding type registration short -> org.hibernate.type.ShortType@37858383
Adding type registration java.lang.Short -> org.hibernate.type.ShortType@37858383
Adding type registration integer -> org.hibernate.type.IntegerType@5136d012
Adding type registration int -> org.hibernate.type.IntegerType@5136d012
Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@5136d012
Adding type registration long -> org.hibernate.type.LongType@13b13b5d
Adding type registration long -> org.hibernate.type.LongType@13b13b5d
Adding type registration java.lang.Long -> org.hibernate.type.LongType@13b13b5d
Adding type registration float -> org.hibernate.type.FloatType@366647c2
Adding type registration float -> org.hibernate.type.FloatType@366647c2
Adding type registration java.lang.Float -> org.hibernate.type.FloatType@366647c2
Adding type registration double -> org.hibernate.type.DoubleType@503d687a
Adding type registration double -> org.hibernate.type.DoubleType@503d687a
Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@503d687a
Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@4d910fd6
Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@4d910fd6
Adding type registration big_integer -> org.hibernate.type.BigIntegerType@2e222612
Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@2e222612
Adding type registration string -> org.hibernate.type.StringType@6b8ca3c8
Adding type registration java.lang.String -> org.hibernate.type.StringType@6b8ca3c8
Adding type registration nstring -> org.hibernate.type.StringNVarcharType@65f095f8
Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@747edf66
Adding type registration url -> org.hibernate.type.UrlType@74455848
Adding type registration java.net.URL -> org.hibernate.type.UrlType@74455848
Adding type registration Duration -> org.hibernate.type.DurationType@11bd0f3b
Adding type registration java.time.Duration -> org.hibernate.type.DurationType@11bd0f3b
Adding type registration Instant -> org.hibernate.type.InstantType@51dcb805
Adding type registration java.time.Instant -> org.hibernate.type.InstantType@51dcb805
Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@b62d79
Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@b62d79
Adding type registration LocalDate -> org.hibernate.type.LocalDateType@693fe6c9
Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@693fe6c9
Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@306f16f3
Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@306f16f3
Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@2dde1bff
Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@2dde1bff
Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@48974e45
Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@48974e45
Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@793be5ca
Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@793be5ca
Adding type registration date -> org.hibernate.type.DateType@101952da
Adding type registration java.sql.Date -> org.hibernate.type.DateType@101952da
Adding type registration time -> org.hibernate.type.TimeType@10feca44
Adding type registration java.sql.Time -> org.hibernate.type.TimeType@10feca44
Adding type registration timestamp -> org.hibernate.type.TimestampType@1e683a3e
Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@1e683a3e
Adding type registration java.util.Date -> org.hibernate.type.TimestampType@1e683a3e
Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@14555e0a
Adding type registration calendar -> org.hibernate.type.CalendarType@6f46426d
Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@6f46426d
Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@6f46426d
Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@10d307f1
Adding type registration locale -> org.hibernate.type.LocaleType@5403f35f
Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@5403f35f
Adding type registration currency -> org.hibernate.type.CurrencyType@1b1426f4
Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@1b1426f4
Adding type registration timezone -> org.hibernate.type.TimeZoneType@76c3e77a
Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@76c3e77a
Adding type registration class -> org.hibernate.type.ClassType@fa49800
Adding type registration java.lang.Class -> org.hibernate.type.ClassType@fa49800
Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@25084a1e
Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@25084a1e
Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@16610890
Adding type registration binary -> org.hibernate.type.BinaryType@5562c41e
Adding type registration byte[] -> org.hibernate.type.BinaryType@5562c41e
Adding type registration [B -> org.hibernate.type.BinaryType@5562c41e
Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@73e22a3d
Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@73e22a3d
Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@73e22a3d
Adding type registration row_version -> org.hibernate.type.RowVersionType@7fee8714
Adding type registration image -> org.hibernate.type.ImageType@2fb3536e
Adding type registration characters -> org.hibernate.type.CharArrayType@22ef9844
Adding type registration char[] -> org.hibernate.type.CharArrayType@22ef9844
Adding type registration [C -> org.hibernate.type.CharArrayType@22ef9844
Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@1da2cb77
Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@1da2cb77
Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@1da2cb77
Adding type registration text -> org.hibernate.type.TextType@5acf93bb
Adding type registration ntext -> org.hibernate.type.NTextType@66d3eec0
Adding type registration blob -> org.hibernate.type.BlobType@6392827e
Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@6392827e
Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@43dac38f
Adding type registration clob -> org.hibernate.type.ClobType@53ce1329
Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@53ce1329
Adding type registration nclob -> org.hibernate.type.NClobType@290222c1
Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@290222c1
Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@49049a04
Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@82de64a
Adding type registration serializable -> org.hibernate.type.SerializableType@54a7079e
Adding type registration object -> org.hibernate.type.ObjectType@29215f06
Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@29215f06
Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@6bd61f98
Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@48aca48b
Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@13fd2ccd
Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@b9b00e0
Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@506ae4d4
Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@7d4f9aae
Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@72e5a8e
Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@54e1c68b
Database ->
       name : MySQL
    version : 5.7.18-log
      major : 5
      minor : 7
Driver ->
       name : MySQL Connector Java
    version : mysql-connector-java-5.1.45 ( Revision: 9131eefa398531c7dc98776e8a3fe839e544c5b2 )
      major : 5
      minor : 1
JDBC version : 4.0
HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
JDBC driver metadata reported database stores quoted identifiers in more than one case
IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
Binding entity from annotated class: com.nsksoft.spring.hibernate.bean.User
Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
Import with entity name User
Bind entity com.nsksoft.spring.hibernate.bean.User on table UserDetails
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=user_id, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property user_id with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:user_id]
building SimpleValue for user_id
Building property user_id
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=country, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property country with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:country]
building SimpleValue for country
Building property country
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=dob, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property dob with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:dob]
building SimpleValue for dob
Building property dob
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=email, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property email with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:email]
building SimpleValue for email
Building property email
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=first_name, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property first_name with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:first_name]
building SimpleValue for first_name
Building property first_name
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=gender, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property gender with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:gender]
building SimpleValue for gender
Building property gender
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=last_name, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property last_name with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:last_name]
building SimpleValue for last_name
Building property last_name
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=marital_status, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property marital_status with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:marital_status]
building SimpleValue for marital_status
Building property marital_status
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=mobile, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property mobile with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:mobile]
building SimpleValue for mobile
Building property mobile
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=pass_word, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property password with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:password]
building SimpleValue for password
Building property password
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=permanent_adreess, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property permanent_adreess with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:permanent_adreess]
building SimpleValue for permanent_adreess
Building property permanent_adreess
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=pincode, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property pincode with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:pincode]
building SimpleValue for pincode
Building property pincode
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=present_address, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property present_address with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:present_address]
building SimpleValue for present_address
Building property present_address
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=state, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property state with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:state]
building SimpleValue for state
Building property state
Starting fillSimpleValue for user_id
Starting fillSimpleValue for country
Starting fillSimpleValue for dob
Starting fillSimpleValue for email
Starting fillSimpleValue for first_name
Starting fillSimpleValue for gender
Starting fillSimpleValue for last_name
Starting fillSimpleValue for marital_status
Starting fillSimpleValue for mobile
Starting fillSimpleValue for password
Starting fillSimpleValue for permanent_adreess
Starting fillSimpleValue for pincode
Starting fillSimpleValue for present_address
Starting fillSimpleValue for state
Forcing column [user_id] to be non-null as it is part of the primary key for table [userdetails]
Building session factory
SessionFactory name : null
Automatic flush during beforeCompletion(): enabled
Automatic session close at end of transaction: disabled
Statistics: disabled
Deleted entity synthetic identifier rollback: disabled
Default entity-mode: pojo
Check Nullability in Core (should be disabled when Bean Validation is on): enabled
Allow initialization of lazy state outside session : disabled
Using BatchFetchStyle : LEGACY
Default batch fetch size: -1
Maximum outer join fetch depth: 2
Default null ordering: NONE
Order SQL updates by primary key: disabled
Order SQL inserts for batching: disabled
multi-tenancy strategy : NONE
JTA Track by Thread: enabled
Query language substitutions: {}
JPA query language strict compliance: disabled
Named query checking : enabled
Second-level cache: enabled
Second-level query cache: disabled
Second-level query cache factory: org.hibernate.cache.internal.StandardQueryCacheFactory@7cf6a5f9
Second-level cache region prefix: null
Optimize second-level cache for minimal puts: disabled
Structured second-level cache entries: disabled
Second-level cache direct-reference entries: disabled
Automatic eviction of collection cache: disabled
JDBC batch size: 15
JDBC batch updates for versioned data: enabled
Scrollable result sets: enabled
Wrap result sets: disabled
JDBC3 getGeneratedKeys(): enabled
JDBC result set fetch size: null
Connection release mode: ON_CLOSE
Generate SQL with comments: disabled
Session factory constructed with filter configurations : {}
Instantiating session factory with properties: {sun.desktop=windows, awt.toolkit=sun.awt.windows.WToolkit, file.encoding.pkg=sun.io, java.specification.version=1.8, hibernate.connection.handling_mode=DELAYED_ACQUISITION_AND_HOLD, sun.cpu.isalist=amd64, sun.jnu.encoding=Cp1252, hibernate.dialect=org.hibernate.dialect.MySQL5Dialect, java.class.path=C:\Program Files\Java\jre1.8.0_151\lib\resources.jar;C:\Program Files\Java\jre1.8.0_151\lib\rt.jar;C:\Program Files\Java\jre1.8.0_151\lib\jsse.jar;C:\Program Files\Java\jre1.8.0_151\lib\jce.jar;C:\Program Files\Java\jre1.8.0_151\lib\charsets.jar;C:\Program Files\Java\jre1.8.0_151\lib\jfr.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\access-bridge-64.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\cldrdata.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\dnsns.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\jaccess.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\jfxrt.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\localedata.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\nashorn.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunec.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunjce_provider.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunmscapi.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunpkcs11.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\zipfs.jar;E:\spring_hibernate17\SpringWithHibernate\target\classes;C:\Users\Sajjad\.m2\repository\org\springframework\spring-context\5.0.6.RELEASE\spring-context-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-aop\5.0.6.RELEASE\spring-aop-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-beans\5.0.6.RELEASE\spring-beans-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-core\5.0.6.RELEASE\spring-core-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-jcl\5.0.6.RELEASE\spring-jcl-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-expression\5.0.6.RELEASE\spring-expression-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-orm\4.3.14.RELEASE\spring-orm-4.3.14.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-jdbc\4.3.14.RELEASE\spring-jdbc-4.3.14.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-tx\4.3.14.RELEASE\spring-tx-4.3.14.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\hibernate\hibernate-core\5.2.16.Final\hibernate-core-5.2.16.Final.jar;C:\Users\Sajjad\.m2\repository\org\jboss\logging\jboss-logging\3.3.1.Final\jboss-logging-3.3.1.Final.jar;C:\Users\Sajjad\.m2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;C:\Users\Sajjad\.m2\repository\org\javassist\javassist\3.22.0-GA\javassist-3.22.0-GA.jar;C:\Users\Sajjad\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\Sajjad\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.0.1.Final\jboss-transaction-api_1.2_spec-1.0.1.Final.jar;C:\Users\Sajjad\.m2\repository\org\jboss\jandex\2.0.3.Final\jandex-2.0.3.Final.jar;C:\Users\Sajjad\.m2\repository\com\fasterxml\classmate\1.3.0\classmate-1.3.0.jar;C:\Users\Sajjad\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;C:\Users\Sajjad\.m2\repository\org\hibernate\common\hibernate-commons-annotations\5.0.1.Final\hibernate-commons-annotations-5.0.1.Final.jar;C:\Users\Sajjad\.m2\repository\mysql\mysql-connector-java\5.1.45\mysql-connector-java-5.1.45.jar, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=http://java.oracle.com/, user.timezone=Asia/Calcutta, os.name=Windows 10, java.vm.specification.version=1.8, user.country=IN, sun.java.launcher=SUN_STANDARD, sun.boot.library.path=C:\Program Files\Java\jre1.8.0_151\bin, sun.java.command=com.nsksoft.spring.hibernate.client.App, sun.cpu.endian=little, user.home=C:\Users\Sajjad, user.language=en, java.specification.vendor=Oracle Corporation, java.home=C:\Program Files\Java\jre1.8.0_151, file.separator=\, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, sun.boot.class.path=C:\Program Files\Java\jre1.8.0_151\lib\resources.jar;C:\Program Files\Java\jre1.8.0_151\lib\rt.jar;C:\Program Files\Java\jre1.8.0_151\lib\sunrsasign.jar;C:\Program Files\Java\jre1.8.0_151\lib\jsse.jar;C:\Program Files\Java\jre1.8.0_151\lib\jce.jar;C:\Program Files\Java\jre1.8.0_151\lib\charsets.jar;C:\Program Files\Java\jre1.8.0_151\lib\jfr.jar;C:\Program Files\Java\jre1.8.0_151\classes, hibernate.hbm2ddl.auto=update, user.script=, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=1.8.0_151-b12, user.name=Sajjad, path.separator=;, os.version=10.0, java.endorsed.dirs=C:\Program Files\Java\jre1.8.0_151\lib\endorsed, java.runtime.name=Java(TM) SE Runtime Environment, file.encoding=UTF-8, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.show_sql=true, hibernate.classLoaders=[sun.misc.Launcher$AppClassLoader@2a139a55], hibernate.current_session_context_class=org.springframework.orm.hibernate5.SpringSessionContext, java.vendor.url.bug=http://bugreport.sun.com/bugreport/, java.io.tmpdir=C:\Users\Sajjad\AppData\Local\Temp\, java.version=1.8.0_151, user.dir=E:\spring_hibernate17\SpringWithHibernate, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.os.patch.level=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@319bc845, java.library.path=C:\Program Files\Java\jre1.8.0_151\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:/Program Files/Java/jre1.8.0_151/bin/server;C:/Program Files/Java/jre1.8.0_151/bin;C:/Program Files/Java/jre1.8.0_151/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\Program Files\MySQL\MySQL Utilities 1.6\;"C:\Program Files\Java\jdk1.8.0_121\bin;";C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Git\cmd;C:\Users\Sajjad\AppData\Local\Microsoft\WindowsApps;C:\Users\Sajjad\AppData\Local\GitHubDesktop\bin;%USERPROFILE%\AppData\Local\Microsoft\WindowsApps;;E:\Softwares\spring-tool-suite-3.9.2.RELEASE-e4.7.2-win32-x86_64\sts-bundle\sts-3.9.2.RELEASE;;., java.vm.info=mixed mode, java.vendor=Oracle Corporation, java.vm.version=25.151-b12, hibernate.bytecode.use_reflection_optimizer=false, hibernate.connection.datasource=org.springframework.jdbc.datasource.DriverManagerDataSource@351d0846, java.ext.dirs=C:\Program Files\Java\jre1.8.0_151\lib\ext;C:\WINDOWS\Sun\Java\lib\ext, sun.io.unicode.encoding=UnicodeLittle, java.class.version=52.0}
Skipping JACC integration as it was not enabled
Instantiated session factory
Not known whether passed class name [com.nsksoft.spring.hibernate.bean.User] is safe
No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.nsksoft.spring.hibernate.bean.User
Not known whether passed class name [com.nsksoft.spring.hibernate.bean.User] is safe
No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.nsksoft.spring.hibernate.bean.User
Static SQL for entity: com.nsksoft.spring.hibernate.bean.User
 Version select: select user_id from UserDetails where user_id =?
 Snapshot select: select user_.user_id, user_.country as country2_0_, user_.dob as dob3_0_, user_.email as email4_0_, user_.first_name as first_na5_0_, user_.gender as gender6_0_, user_.last_name as last_nam7_0_, user_.marital_status as marital_8_0_, user_.mobile as mobile9_0_, user_.pass_word as pass_wo10_0_, user_.permanent_adreess as permane11_0_, user_.pincode as pincode12_0_, user_.present_address as present13_0_, user_.state as state14_0_ from UserDetails user_ where user_.user_id=?
 Insert 0: insert into UserDetails (country, dob, email, first_name, gender, last_name, marital_status, mobile, pass_word, permanent_adreess, pincode, present_address, state, user_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
 Update 0: update UserDetails set country=?, dob=?, email=?, first_name=?, gender=?, last_name=?, marital_status=?, mobile=?, pass_word=?, permanent_adreess=?, pincode=?, present_address=?, state=? where user_id=?
 Delete 0: delete from UserDetails where user_id=?
 Identity insert: insert into UserDetails (country, dob, email, first_name, gender, last_name, marital_status, mobile, pass_word, permanent_adreess, pincode, present_address, state) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4648ce9]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [NONE]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4a9f80d3]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [READ]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@41fe9859]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [UPGRADE]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6c67e137]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [UPGRADE_NOWAIT]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@191ae03f]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [UPGRADE_SKIPLOCKED]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@53ab0286]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [FORCE]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2d10e0b1]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [PESSIMISTIC_READ]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? lock in share mode
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@172ca72b]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [PESSIMISTIC_WRITE]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@71e5f61d]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5e8f9e2d]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [OPTIMISTIC]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@fd46303]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
Static select for action ACTION_MERGE on entity com.nsksoft.spring.hibernate.bean.User: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
Static select for action ACTION_REFRESH on entity com.nsksoft.spring.hibernate.bean.User: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
alter table batch17.userdetails add column user_id integer not null
alter table batch17.userdetails add column email varchar(255)
No JtaPlatform was specified, checking resolver
No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
Checking 0 named HQL queries
Checking 0 named SQL queries
Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@780ec4a5
Registering SessionFactory: 523eebcd-8187-426d-b305-b2d6cede286a (<unnamed>)
Not binding SessionFactory to JNDI, no JNDI name configured
Statistics initialized [enabled=false]
Executing identity-insert immediately
insert into UserDetails (country, dob, email, first_name, gender, last_name, marital_status, mobile, pass_word, permanent_adreess, pincode, present_address, state) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
could not execute statement [n/a]
java.sql.SQLException: Field 'Email_id' doesn't have a default value
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:965)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3973)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3909)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2527)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2680)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2484)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.executeUpdateInternal(PreparedStatement.java:2079)
	at com.mysql.jdbc.PreparedStatement.executeUpdateInternal(PreparedStatement.java:2013)
	at com.mysql.jdbc.PreparedStatement.executeLargeUpdate(PreparedStatement.java:5104)
	at com.mysql.jdbc.PreparedStatement.executeUpdate(PreparedStatement.java:1998)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:175)
	at org.hibernate.dialect.identity.GetGeneratedKeysDelegate.executeAndExtract(GetGeneratedKeysDelegate.java:57)
	at org.hibernate.id.insert.AbstractReturningDelegate.performInsert(AbstractReturningDelegate.java:42)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2919)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3510)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:81)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:637)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:282)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:263)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:317)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:318)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:275)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:182)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:113)
	at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.saveWithGeneratedOrRequestedId(DefaultSaveOrUpdateEventListener.java:192)
	at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.entityIsTransient(DefaultSaveOrUpdateEventListener.java:177)
	at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.performSaveOrUpdate(DefaultSaveOrUpdateEventListener.java:97)
	at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.onSaveOrUpdate(DefaultSaveOrUpdateEventListener.java:73)
	at org.hibernate.internal.SessionImpl.fireSaveOrUpdate(SessionImpl.java:660)
	at org.hibernate.internal.SessionImpl.saveOrUpdate(SessionImpl.java:652)
	at org.hibernate.internal.SessionImpl.saveOrUpdate(SessionImpl.java:647)
	at com.nsksoft.spring.hibernate.repositry.SpringRepositry.adduser(SpringRepositry.java:21)
	at com.nsksoft.spring.hibernate.client.App.main(App.java:34)
SQL Error: 1364, SQLState: HY000
Field 'Email_id' doesn't have a default value
Logging Provider: org.jboss.logging.Log4jLoggerProvider
Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
HHH000412: Hibernate Core {5.2.16.Final}
HHH000206: hibernate.properties not found
Building session factory using internal StandardServiceRegistryBuilder
Overriding existing service binding [org.hibernate.secure.spi.JaccService]
Building session factory using provided StandardServiceRegistry
Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
Adding type registration boolean -> org.hibernate.type.BooleanType@87a85e1
Adding type registration boolean -> org.hibernate.type.BooleanType@87a85e1
Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@87a85e1
Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@55f616cf
Adding type registration true_false -> org.hibernate.type.TrueFalseType@46fa7c39
Adding type registration yes_no -> org.hibernate.type.YesNoType@4a668b6e
Adding type registration byte -> org.hibernate.type.ByteType@6c779568
Adding type registration byte -> org.hibernate.type.ByteType@6c779568
Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@6c779568
Adding type registration character -> org.hibernate.type.CharacterType@61d6015a
Adding type registration char -> org.hibernate.type.CharacterType@61d6015a
Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@61d6015a
Adding type registration short -> org.hibernate.type.ShortType@37858383
Adding type registration short -> org.hibernate.type.ShortType@37858383
Adding type registration java.lang.Short -> org.hibernate.type.ShortType@37858383
Adding type registration integer -> org.hibernate.type.IntegerType@5136d012
Adding type registration int -> org.hibernate.type.IntegerType@5136d012
Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@5136d012
Adding type registration long -> org.hibernate.type.LongType@13b13b5d
Adding type registration long -> org.hibernate.type.LongType@13b13b5d
Adding type registration java.lang.Long -> org.hibernate.type.LongType@13b13b5d
Adding type registration float -> org.hibernate.type.FloatType@366647c2
Adding type registration float -> org.hibernate.type.FloatType@366647c2
Adding type registration java.lang.Float -> org.hibernate.type.FloatType@366647c2
Adding type registration double -> org.hibernate.type.DoubleType@503d687a
Adding type registration double -> org.hibernate.type.DoubleType@503d687a
Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@503d687a
Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@4d910fd6
Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@4d910fd6
Adding type registration big_integer -> org.hibernate.type.BigIntegerType@2e222612
Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@2e222612
Adding type registration string -> org.hibernate.type.StringType@6b8ca3c8
Adding type registration java.lang.String -> org.hibernate.type.StringType@6b8ca3c8
Adding type registration nstring -> org.hibernate.type.StringNVarcharType@65f095f8
Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@747edf66
Adding type registration url -> org.hibernate.type.UrlType@74455848
Adding type registration java.net.URL -> org.hibernate.type.UrlType@74455848
Adding type registration Duration -> org.hibernate.type.DurationType@11bd0f3b
Adding type registration java.time.Duration -> org.hibernate.type.DurationType@11bd0f3b
Adding type registration Instant -> org.hibernate.type.InstantType@51dcb805
Adding type registration java.time.Instant -> org.hibernate.type.InstantType@51dcb805
Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@b62d79
Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@b62d79
Adding type registration LocalDate -> org.hibernate.type.LocalDateType@693fe6c9
Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@693fe6c9
Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@306f16f3
Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@306f16f3
Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@2dde1bff
Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@2dde1bff
Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@48974e45
Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@48974e45
Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@793be5ca
Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@793be5ca
Adding type registration date -> org.hibernate.type.DateType@101952da
Adding type registration java.sql.Date -> org.hibernate.type.DateType@101952da
Adding type registration time -> org.hibernate.type.TimeType@10feca44
Adding type registration java.sql.Time -> org.hibernate.type.TimeType@10feca44
Adding type registration timestamp -> org.hibernate.type.TimestampType@1e683a3e
Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@1e683a3e
Adding type registration java.util.Date -> org.hibernate.type.TimestampType@1e683a3e
Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@14555e0a
Adding type registration calendar -> org.hibernate.type.CalendarType@6f46426d
Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@6f46426d
Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@6f46426d
Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@10d307f1
Adding type registration locale -> org.hibernate.type.LocaleType@5403f35f
Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@5403f35f
Adding type registration currency -> org.hibernate.type.CurrencyType@1b1426f4
Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@1b1426f4
Adding type registration timezone -> org.hibernate.type.TimeZoneType@76c3e77a
Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@76c3e77a
Adding type registration class -> org.hibernate.type.ClassType@fa49800
Adding type registration java.lang.Class -> org.hibernate.type.ClassType@fa49800
Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@25084a1e
Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@25084a1e
Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@16610890
Adding type registration binary -> org.hibernate.type.BinaryType@5562c41e
Adding type registration byte[] -> org.hibernate.type.BinaryType@5562c41e
Adding type registration [B -> org.hibernate.type.BinaryType@5562c41e
Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@73e22a3d
Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@73e22a3d
Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@73e22a3d
Adding type registration row_version -> org.hibernate.type.RowVersionType@7fee8714
Adding type registration image -> org.hibernate.type.ImageType@2fb3536e
Adding type registration characters -> org.hibernate.type.CharArrayType@22ef9844
Adding type registration char[] -> org.hibernate.type.CharArrayType@22ef9844
Adding type registration [C -> org.hibernate.type.CharArrayType@22ef9844
Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@1da2cb77
Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@1da2cb77
Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@1da2cb77
Adding type registration text -> org.hibernate.type.TextType@5acf93bb
Adding type registration ntext -> org.hibernate.type.NTextType@66d3eec0
Adding type registration blob -> org.hibernate.type.BlobType@6392827e
Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@6392827e
Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@43dac38f
Adding type registration clob -> org.hibernate.type.ClobType@53ce1329
Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@53ce1329
Adding type registration nclob -> org.hibernate.type.NClobType@290222c1
Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@290222c1
Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@49049a04
Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@82de64a
Adding type registration serializable -> org.hibernate.type.SerializableType@54a7079e
Adding type registration object -> org.hibernate.type.ObjectType@29215f06
Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@29215f06
Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@6bd61f98
Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@48aca48b
Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@13fd2ccd
Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@b9b00e0
Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@506ae4d4
Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@7d4f9aae
Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@72e5a8e
Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@54e1c68b
Database ->
       name : MySQL
    version : 5.7.18-log
      major : 5
      minor : 7
Driver ->
       name : MySQL Connector Java
    version : mysql-connector-java-5.1.45 ( Revision: 9131eefa398531c7dc98776e8a3fe839e544c5b2 )
      major : 5
      minor : 1
JDBC version : 4.0
HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
JDBC driver metadata reported database stores quoted identifiers in more than one case
IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
Binding entity from annotated class: com.nsksoft.spring.hibernate.bean.User
Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
Import with entity name User
Bind entity com.nsksoft.spring.hibernate.bean.User on table UserDetails
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=user_id, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property user_id with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:user_id]
building SimpleValue for user_id
Building property user_id
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=country, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property country with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:country]
building SimpleValue for country
Building property country
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=dob, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property dob with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:dob]
building SimpleValue for dob
Building property dob
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=email, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property email with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:email]
building SimpleValue for email
Building property email
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=first_name, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property first_name with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:first_name]
building SimpleValue for first_name
Building property first_name
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=gender, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property gender with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:gender]
building SimpleValue for gender
Building property gender
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=last_name, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property last_name with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:last_name]
building SimpleValue for last_name
Building property last_name
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=marital_status, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property marital_status with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:marital_status]
building SimpleValue for marital_status
Building property marital_status
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=mobile, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property mobile with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:mobile]
building SimpleValue for mobile
Building property mobile
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=pass_word, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property password with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:password]
building SimpleValue for password
Building property password
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=permanent_adreess, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property permanent_adreess with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:permanent_adreess]
building SimpleValue for permanent_adreess
Building property permanent_adreess
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=pincode, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property pincode with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:pincode]
building SimpleValue for pincode
Building property pincode
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=present_address, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property present_address with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:present_address]
building SimpleValue for present_address
Building property present_address
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=state, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property state with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:state]
building SimpleValue for state
Building property state
Starting fillSimpleValue for user_id
Starting fillSimpleValue for country
Starting fillSimpleValue for dob
Starting fillSimpleValue for email
Starting fillSimpleValue for first_name
Starting fillSimpleValue for gender
Starting fillSimpleValue for last_name
Starting fillSimpleValue for marital_status
Starting fillSimpleValue for mobile
Starting fillSimpleValue for password
Starting fillSimpleValue for permanent_adreess
Starting fillSimpleValue for pincode
Starting fillSimpleValue for present_address
Starting fillSimpleValue for state
Forcing column [user_id] to be non-null as it is part of the primary key for table [userdetails]
Building session factory
SessionFactory name : null
Automatic flush during beforeCompletion(): enabled
Automatic session close at end of transaction: disabled
Statistics: disabled
Deleted entity synthetic identifier rollback: disabled
Default entity-mode: pojo
Check Nullability in Core (should be disabled when Bean Validation is on): enabled
Allow initialization of lazy state outside session : disabled
Using BatchFetchStyle : LEGACY
Default batch fetch size: -1
Maximum outer join fetch depth: 2
Default null ordering: NONE
Order SQL updates by primary key: disabled
Order SQL inserts for batching: disabled
multi-tenancy strategy : NONE
JTA Track by Thread: enabled
Query language substitutions: {}
JPA query language strict compliance: disabled
Named query checking : enabled
Second-level cache: enabled
Second-level query cache: disabled
Second-level query cache factory: org.hibernate.cache.internal.StandardQueryCacheFactory@7cf6a5f9
Second-level cache region prefix: null
Optimize second-level cache for minimal puts: disabled
Structured second-level cache entries: disabled
Second-level cache direct-reference entries: disabled
Automatic eviction of collection cache: disabled
JDBC batch size: 15
JDBC batch updates for versioned data: enabled
Scrollable result sets: enabled
Wrap result sets: disabled
JDBC3 getGeneratedKeys(): enabled
JDBC result set fetch size: null
Connection release mode: ON_CLOSE
Generate SQL with comments: disabled
Session factory constructed with filter configurations : {}
Instantiating session factory with properties: {sun.desktop=windows, awt.toolkit=sun.awt.windows.WToolkit, file.encoding.pkg=sun.io, java.specification.version=1.8, hibernate.connection.handling_mode=DELAYED_ACQUISITION_AND_HOLD, sun.cpu.isalist=amd64, sun.jnu.encoding=Cp1252, hibernate.dialect=org.hibernate.dialect.MySQL5Dialect, java.class.path=C:\Program Files\Java\jre1.8.0_151\lib\resources.jar;C:\Program Files\Java\jre1.8.0_151\lib\rt.jar;C:\Program Files\Java\jre1.8.0_151\lib\jsse.jar;C:\Program Files\Java\jre1.8.0_151\lib\jce.jar;C:\Program Files\Java\jre1.8.0_151\lib\charsets.jar;C:\Program Files\Java\jre1.8.0_151\lib\jfr.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\access-bridge-64.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\cldrdata.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\dnsns.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\jaccess.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\jfxrt.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\localedata.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\nashorn.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunec.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunjce_provider.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunmscapi.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunpkcs11.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\zipfs.jar;E:\spring_hibernate17\SpringWithHibernate\target\classes;C:\Users\Sajjad\.m2\repository\org\springframework\spring-context\5.0.6.RELEASE\spring-context-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-aop\5.0.6.RELEASE\spring-aop-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-beans\5.0.6.RELEASE\spring-beans-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-core\5.0.6.RELEASE\spring-core-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-jcl\5.0.6.RELEASE\spring-jcl-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-expression\5.0.6.RELEASE\spring-expression-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-orm\4.3.14.RELEASE\spring-orm-4.3.14.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-jdbc\4.3.14.RELEASE\spring-jdbc-4.3.14.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-tx\4.3.14.RELEASE\spring-tx-4.3.14.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\hibernate\hibernate-core\5.2.16.Final\hibernate-core-5.2.16.Final.jar;C:\Users\Sajjad\.m2\repository\org\jboss\logging\jboss-logging\3.3.1.Final\jboss-logging-3.3.1.Final.jar;C:\Users\Sajjad\.m2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;C:\Users\Sajjad\.m2\repository\org\javassist\javassist\3.22.0-GA\javassist-3.22.0-GA.jar;C:\Users\Sajjad\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\Sajjad\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.0.1.Final\jboss-transaction-api_1.2_spec-1.0.1.Final.jar;C:\Users\Sajjad\.m2\repository\org\jboss\jandex\2.0.3.Final\jandex-2.0.3.Final.jar;C:\Users\Sajjad\.m2\repository\com\fasterxml\classmate\1.3.0\classmate-1.3.0.jar;C:\Users\Sajjad\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;C:\Users\Sajjad\.m2\repository\org\hibernate\common\hibernate-commons-annotations\5.0.1.Final\hibernate-commons-annotations-5.0.1.Final.jar;C:\Users\Sajjad\.m2\repository\mysql\mysql-connector-java\5.1.45\mysql-connector-java-5.1.45.jar, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=http://java.oracle.com/, user.timezone=Asia/Calcutta, os.name=Windows 10, java.vm.specification.version=1.8, user.country=IN, sun.java.launcher=SUN_STANDARD, sun.boot.library.path=C:\Program Files\Java\jre1.8.0_151\bin, sun.java.command=com.nsksoft.spring.hibernate.client.App, sun.cpu.endian=little, user.home=C:\Users\Sajjad, user.language=en, java.specification.vendor=Oracle Corporation, java.home=C:\Program Files\Java\jre1.8.0_151, file.separator=\, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, sun.boot.class.path=C:\Program Files\Java\jre1.8.0_151\lib\resources.jar;C:\Program Files\Java\jre1.8.0_151\lib\rt.jar;C:\Program Files\Java\jre1.8.0_151\lib\sunrsasign.jar;C:\Program Files\Java\jre1.8.0_151\lib\jsse.jar;C:\Program Files\Java\jre1.8.0_151\lib\jce.jar;C:\Program Files\Java\jre1.8.0_151\lib\charsets.jar;C:\Program Files\Java\jre1.8.0_151\lib\jfr.jar;C:\Program Files\Java\jre1.8.0_151\classes, hibernate.hbm2ddl.auto=update, user.script=, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=1.8.0_151-b12, user.name=Sajjad, path.separator=;, os.version=10.0, java.endorsed.dirs=C:\Program Files\Java\jre1.8.0_151\lib\endorsed, java.runtime.name=Java(TM) SE Runtime Environment, file.encoding=UTF-8, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.show_sql=true, hibernate.classLoaders=[sun.misc.Launcher$AppClassLoader@2a139a55], hibernate.current_session_context_class=org.springframework.orm.hibernate5.SpringSessionContext, java.vendor.url.bug=http://bugreport.sun.com/bugreport/, java.io.tmpdir=C:\Users\Sajjad\AppData\Local\Temp\, java.version=1.8.0_151, user.dir=E:\spring_hibernate17\SpringWithHibernate, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.os.patch.level=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@319bc845, java.library.path=C:\Program Files\Java\jre1.8.0_151\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:/Program Files/Java/jre1.8.0_151/bin/server;C:/Program Files/Java/jre1.8.0_151/bin;C:/Program Files/Java/jre1.8.0_151/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\Program Files\MySQL\MySQL Utilities 1.6\;"C:\Program Files\Java\jdk1.8.0_121\bin;";C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Git\cmd;C:\Users\Sajjad\AppData\Local\Microsoft\WindowsApps;C:\Users\Sajjad\AppData\Local\GitHubDesktop\bin;%USERPROFILE%\AppData\Local\Microsoft\WindowsApps;;E:\Softwares\spring-tool-suite-3.9.2.RELEASE-e4.7.2-win32-x86_64\sts-bundle\sts-3.9.2.RELEASE;;., java.vm.info=mixed mode, java.vendor=Oracle Corporation, java.vm.version=25.151-b12, hibernate.bytecode.use_reflection_optimizer=false, hibernate.connection.datasource=org.springframework.jdbc.datasource.DriverManagerDataSource@351d0846, java.ext.dirs=C:\Program Files\Java\jre1.8.0_151\lib\ext;C:\WINDOWS\Sun\Java\lib\ext, sun.io.unicode.encoding=UnicodeLittle, java.class.version=52.0}
Skipping JACC integration as it was not enabled
Instantiated session factory
Not known whether passed class name [com.nsksoft.spring.hibernate.bean.User] is safe
No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.nsksoft.spring.hibernate.bean.User
Not known whether passed class name [com.nsksoft.spring.hibernate.bean.User] is safe
No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.nsksoft.spring.hibernate.bean.User
Static SQL for entity: com.nsksoft.spring.hibernate.bean.User
 Version select: select user_id from UserDetails where user_id =?
 Snapshot select: select user_.user_id, user_.country as country2_0_, user_.dob as dob3_0_, user_.email as email4_0_, user_.first_name as first_na5_0_, user_.gender as gender6_0_, user_.last_name as last_nam7_0_, user_.marital_status as marital_8_0_, user_.mobile as mobile9_0_, user_.pass_word as pass_wo10_0_, user_.permanent_adreess as permane11_0_, user_.pincode as pincode12_0_, user_.present_address as present13_0_, user_.state as state14_0_ from UserDetails user_ where user_.user_id=?
 Insert 0: insert into UserDetails (country, dob, email, first_name, gender, last_name, marital_status, mobile, pass_word, permanent_adreess, pincode, present_address, state, user_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
 Update 0: update UserDetails set country=?, dob=?, email=?, first_name=?, gender=?, last_name=?, marital_status=?, mobile=?, pass_word=?, permanent_adreess=?, pincode=?, present_address=?, state=? where user_id=?
 Delete 0: delete from UserDetails where user_id=?
 Identity insert: insert into UserDetails (country, dob, email, first_name, gender, last_name, marital_status, mobile, pass_word, permanent_adreess, pincode, present_address, state) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4648ce9]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [NONE]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4a9f80d3]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [READ]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@41fe9859]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [UPGRADE]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6c67e137]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [UPGRADE_NOWAIT]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@191ae03f]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [UPGRADE_SKIPLOCKED]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@53ab0286]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [FORCE]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2d10e0b1]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [PESSIMISTIC_READ]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? lock in share mode
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@172ca72b]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [PESSIMISTIC_WRITE]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@71e5f61d]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5e8f9e2d]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [OPTIMISTIC]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@fd46303]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
Static select for action ACTION_MERGE on entity com.nsksoft.spring.hibernate.bean.User: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
Static select for action ACTION_REFRESH on entity com.nsksoft.spring.hibernate.bean.User: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
create table UserDetails (user_id integer not null auto_increment, country varchar(255), dob varchar(255), email varchar(255), first_name varchar(255), gender varchar(255), last_name varchar(255), marital_status varchar(255), mobile bigint not null, pass_word varchar(255), permanent_adreess varchar(255), pincode varchar(255), present_address varchar(255), state varchar(255), primary key (user_id)) engine=MyISAM
No JtaPlatform was specified, checking resolver
No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
Checking 0 named HQL queries
Checking 0 named SQL queries
Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@b5cc23a
Registering SessionFactory: 0b496d93-c66d-466f-a4ec-19182f9ca962 (<unnamed>)
Not binding SessionFactory to JNDI, no JNDI name configured
Statistics initialized [enabled=false]
Executing identity-insert immediately
insert into UserDetails (country, dob, email, first_name, gender, last_name, marital_status, mobile, pass_word, permanent_adreess, pincode, present_address, state) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Natively generated identity: 1
HHH000387: ResultSet's statement was not registered
Logging Provider: org.jboss.logging.Log4jLoggerProvider
Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
HHH000412: Hibernate Core {5.2.16.Final}
HHH000206: hibernate.properties not found
Building session factory using internal StandardServiceRegistryBuilder
Overriding existing service binding [org.hibernate.secure.spi.JaccService]
Building session factory using provided StandardServiceRegistry
Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
Adding type registration boolean -> org.hibernate.type.BooleanType@609db43b
Adding type registration boolean -> org.hibernate.type.BooleanType@609db43b
Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@609db43b
Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@6497b078
Adding type registration true_false -> org.hibernate.type.TrueFalseType@5f683daf
Adding type registration yes_no -> org.hibernate.type.YesNoType@76f2bbc1
Adding type registration byte -> org.hibernate.type.ByteType@2e1d27ba
Adding type registration byte -> org.hibernate.type.ByteType@2e1d27ba
Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@2e1d27ba
Adding type registration character -> org.hibernate.type.CharacterType@44a7bfbc
Adding type registration char -> org.hibernate.type.CharacterType@44a7bfbc
Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@44a7bfbc
Adding type registration short -> org.hibernate.type.ShortType@2beee7ff
Adding type registration short -> org.hibernate.type.ShortType@2beee7ff
Adding type registration java.lang.Short -> org.hibernate.type.ShortType@2beee7ff
Adding type registration integer -> org.hibernate.type.IntegerType@3541cb24
Adding type registration int -> org.hibernate.type.IntegerType@3541cb24
Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@3541cb24
Adding type registration long -> org.hibernate.type.LongType@3315d2d7
Adding type registration long -> org.hibernate.type.LongType@3315d2d7
Adding type registration java.lang.Long -> org.hibernate.type.LongType@3315d2d7
Adding type registration float -> org.hibernate.type.FloatType@4da4253
Adding type registration float -> org.hibernate.type.FloatType@4da4253
Adding type registration java.lang.Float -> org.hibernate.type.FloatType@4da4253
Adding type registration double -> org.hibernate.type.DoubleType@4cc8eb05
Adding type registration double -> org.hibernate.type.DoubleType@4cc8eb05
Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@4cc8eb05
Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@3246fb96
Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@3246fb96
Adding type registration big_integer -> org.hibernate.type.BigIntegerType@49dc7102
Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@49dc7102
Adding type registration string -> org.hibernate.type.StringType@34f7cfd9
Adding type registration java.lang.String -> org.hibernate.type.StringType@34f7cfd9
Adding type registration nstring -> org.hibernate.type.StringNVarcharType@55536d9e
Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@2e55dd0c
Adding type registration url -> org.hibernate.type.UrlType@69e1dd28
Adding type registration java.net.URL -> org.hibernate.type.UrlType@69e1dd28
Adding type registration Duration -> org.hibernate.type.DurationType@67080771
Adding type registration java.time.Duration -> org.hibernate.type.DurationType@67080771
Adding type registration Instant -> org.hibernate.type.InstantType@2accdbb5
Adding type registration java.time.Instant -> org.hibernate.type.InstantType@2accdbb5
Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@27ff5d15
Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@27ff5d15
Adding type registration LocalDate -> org.hibernate.type.LocalDateType@1cbb87f3
Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@1cbb87f3
Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@10163d6
Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@10163d6
Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@247d8ae
Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@247d8ae
Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@223aa2f7
Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@223aa2f7
Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@33990a0c
Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@33990a0c
Adding type registration date -> org.hibernate.type.DateType@24fcf36f
Adding type registration java.sql.Date -> org.hibernate.type.DateType@24fcf36f
Adding type registration time -> org.hibernate.type.TimeType@2b48a640
Adding type registration java.sql.Time -> org.hibernate.type.TimeType@2b48a640
Adding type registration timestamp -> org.hibernate.type.TimestampType@4bb33f74
Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@4bb33f74
Adding type registration java.util.Date -> org.hibernate.type.TimestampType@4bb33f74
Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@3d5c822d
Adding type registration calendar -> org.hibernate.type.CalendarType@4d5b6aac
Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@4d5b6aac
Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@4d5b6aac
Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@429bffaa
Adding type registration locale -> org.hibernate.type.LocaleType@28f3b248
Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@28f3b248
Adding type registration currency -> org.hibernate.type.CurrencyType@57d7f8ca
Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@57d7f8ca
Adding type registration timezone -> org.hibernate.type.TimeZoneType@662b4c69
Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@662b4c69
Adding type registration class -> org.hibernate.type.ClassType@3d6f0054
Adding type registration java.lang.Class -> org.hibernate.type.ClassType@3d6f0054
Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@71def8f8
Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@71def8f8
Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@53fdffa1
Adding type registration binary -> org.hibernate.type.BinaryType@3232a28a
Adding type registration byte[] -> org.hibernate.type.BinaryType@3232a28a
Adding type registration [B -> org.hibernate.type.BinaryType@3232a28a
Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@6da21078
Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@6da21078
Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@6da21078
Adding type registration row_version -> org.hibernate.type.RowVersionType@20ccf40b
Adding type registration image -> org.hibernate.type.ImageType@47987356
Adding type registration characters -> org.hibernate.type.CharArrayType@611889f4
Adding type registration char[] -> org.hibernate.type.CharArrayType@611889f4
Adding type registration [C -> org.hibernate.type.CharArrayType@611889f4
Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@1a18644
Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@1a18644
Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@1a18644
Adding type registration text -> org.hibernate.type.TextType@4738a206
Adding type registration ntext -> org.hibernate.type.NTextType@618425b5
Adding type registration blob -> org.hibernate.type.BlobType@342c38f8
Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@342c38f8
Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@485966cc
Adding type registration clob -> org.hibernate.type.ClobType@1de5f259
Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@1de5f259
Adding type registration nclob -> org.hibernate.type.NClobType@71a8adcf
Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@71a8adcf
Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@659499f1
Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@201a4587
Adding type registration serializable -> org.hibernate.type.SerializableType@27f981c6
Adding type registration object -> org.hibernate.type.ObjectType@48aca48b
Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@48aca48b
Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@506ae4d4
Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@7d4f9aae
Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@72e5a8e
Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@54e1c68b
Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@53aac487
Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@52b1beb6
Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@273e7444
Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@7db12bb6
Database ->
       name : MySQL
    version : 5.7.18-log
      major : 5
      minor : 7
Driver ->
       name : MySQL Connector Java
    version : mysql-connector-java-5.1.45 ( Revision: 9131eefa398531c7dc98776e8a3fe839e544c5b2 )
      major : 5
      minor : 1
JDBC version : 4.0
HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
JDBC driver metadata reported database stores quoted identifiers in more than one case
IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
Binding entity from annotated class: com.nsksoft.spring.hibernate.bean.User
Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
Import with entity name User
Bind entity com.nsksoft.spring.hibernate.bean.User on table UserDetails
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=user_id, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property user_id with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:user_id]
building SimpleValue for user_id
Building property user_id
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=country, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property country with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:country]
building SimpleValue for country
Building property country
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=dob, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property dob with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:dob]
building SimpleValue for dob
Building property dob
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=email, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property email with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:email]
building SimpleValue for email
Building property email
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=first_name, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property first_name with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:first_name]
building SimpleValue for first_name
Building property first_name
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=gender, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property gender with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:gender]
building SimpleValue for gender
Building property gender
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=last_name, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property last_name with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:last_name]
building SimpleValue for last_name
Building property last_name
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=marital_status, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property marital_status with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:marital_status]
building SimpleValue for marital_status
Building property marital_status
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=mobile, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property mobile with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:mobile]
building SimpleValue for mobile
Building property mobile
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=pass_word, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property password with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:password]
building SimpleValue for password
Building property password
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=permanent_adreess, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property permanent_adreess with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:permanent_adreess]
building SimpleValue for permanent_adreess
Building property permanent_adreess
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=pincode, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property pincode with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:pincode]
building SimpleValue for pincode
Building property pincode
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=present_address, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property present_address with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:present_address]
building SimpleValue for present_address
Building property present_address
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=state, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property state with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:state]
building SimpleValue for state
Building property state
Starting fillSimpleValue for user_id
Starting fillSimpleValue for country
Starting fillSimpleValue for dob
Starting fillSimpleValue for email
Starting fillSimpleValue for first_name
Starting fillSimpleValue for gender
Starting fillSimpleValue for last_name
Starting fillSimpleValue for marital_status
Starting fillSimpleValue for mobile
Starting fillSimpleValue for password
Starting fillSimpleValue for permanent_adreess
Starting fillSimpleValue for pincode
Starting fillSimpleValue for present_address
Starting fillSimpleValue for state
Forcing column [user_id] to be non-null as it is part of the primary key for table [userdetails]
Building session factory
SessionFactory name : null
Automatic flush during beforeCompletion(): enabled
Automatic session close at end of transaction: disabled
Statistics: disabled
Deleted entity synthetic identifier rollback: disabled
Default entity-mode: pojo
Check Nullability in Core (should be disabled when Bean Validation is on): enabled
Allow initialization of lazy state outside session : disabled
Using BatchFetchStyle : LEGACY
Default batch fetch size: -1
Maximum outer join fetch depth: 2
Default null ordering: NONE
Order SQL updates by primary key: disabled
Order SQL inserts for batching: disabled
multi-tenancy strategy : NONE
JTA Track by Thread: enabled
Query language substitutions: {}
JPA query language strict compliance: disabled
Named query checking : enabled
Second-level cache: enabled
Second-level query cache: disabled
Second-level query cache factory: org.hibernate.cache.internal.StandardQueryCacheFactory@2fc6f97f
Second-level cache region prefix: null
Optimize second-level cache for minimal puts: disabled
Structured second-level cache entries: disabled
Second-level cache direct-reference entries: disabled
Automatic eviction of collection cache: disabled
JDBC batch size: 15
JDBC batch updates for versioned data: enabled
Scrollable result sets: enabled
Wrap result sets: disabled
JDBC3 getGeneratedKeys(): enabled
JDBC result set fetch size: null
Connection release mode: ON_CLOSE
Generate SQL with comments: disabled
Session factory constructed with filter configurations : {}
Instantiating session factory with properties: {sun.desktop=windows, awt.toolkit=sun.awt.windows.WToolkit, file.encoding.pkg=sun.io, java.specification.version=1.8, hibernate.connection.handling_mode=DELAYED_ACQUISITION_AND_HOLD, sun.cpu.isalist=amd64, sun.jnu.encoding=Cp1252, hibernate.dialect=org.hibernate.dialect.MySQL5Dialect, java.class.path=C:\Program Files\Java\jre1.8.0_151\lib\resources.jar;C:\Program Files\Java\jre1.8.0_151\lib\rt.jar;C:\Program Files\Java\jre1.8.0_151\lib\jsse.jar;C:\Program Files\Java\jre1.8.0_151\lib\jce.jar;C:\Program Files\Java\jre1.8.0_151\lib\charsets.jar;C:\Program Files\Java\jre1.8.0_151\lib\jfr.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\access-bridge-64.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\cldrdata.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\dnsns.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\jaccess.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\jfxrt.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\localedata.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\nashorn.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunec.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunjce_provider.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunmscapi.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunpkcs11.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\zipfs.jar;E:\spring_hibernate17\SpringWithHibernate\target\classes;C:\Users\Sajjad\.m2\repository\org\springframework\spring-context\5.0.6.RELEASE\spring-context-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-aop\5.0.6.RELEASE\spring-aop-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-beans\5.0.6.RELEASE\spring-beans-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-core\5.0.6.RELEASE\spring-core-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-jcl\5.0.6.RELEASE\spring-jcl-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-expression\5.0.6.RELEASE\spring-expression-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-orm\4.3.14.RELEASE\spring-orm-4.3.14.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-jdbc\4.3.14.RELEASE\spring-jdbc-4.3.14.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-tx\4.3.14.RELEASE\spring-tx-4.3.14.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\hibernate\hibernate-core\5.2.16.Final\hibernate-core-5.2.16.Final.jar;C:\Users\Sajjad\.m2\repository\org\jboss\logging\jboss-logging\3.3.1.Final\jboss-logging-3.3.1.Final.jar;C:\Users\Sajjad\.m2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;C:\Users\Sajjad\.m2\repository\org\javassist\javassist\3.22.0-GA\javassist-3.22.0-GA.jar;C:\Users\Sajjad\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\Sajjad\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.0.1.Final\jboss-transaction-api_1.2_spec-1.0.1.Final.jar;C:\Users\Sajjad\.m2\repository\org\jboss\jandex\2.0.3.Final\jandex-2.0.3.Final.jar;C:\Users\Sajjad\.m2\repository\com\fasterxml\classmate\1.3.0\classmate-1.3.0.jar;C:\Users\Sajjad\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;C:\Users\Sajjad\.m2\repository\org\hibernate\common\hibernate-commons-annotations\5.0.1.Final\hibernate-commons-annotations-5.0.1.Final.jar;C:\Users\Sajjad\.m2\repository\mysql\mysql-connector-java\5.1.45\mysql-connector-java-5.1.45.jar, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=http://java.oracle.com/, user.timezone=Asia/Calcutta, os.name=Windows 10, java.vm.specification.version=1.8, user.country=IN, sun.java.launcher=SUN_STANDARD, sun.boot.library.path=C:\Program Files\Java\jre1.8.0_151\bin, sun.java.command=com.nsksoft.spring.hibernate.client.App, sun.cpu.endian=little, user.home=C:\Users\Sajjad, user.language=en, java.specification.vendor=Oracle Corporation, java.home=C:\Program Files\Java\jre1.8.0_151, file.separator=\, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, sun.boot.class.path=C:\Program Files\Java\jre1.8.0_151\lib\resources.jar;C:\Program Files\Java\jre1.8.0_151\lib\rt.jar;C:\Program Files\Java\jre1.8.0_151\lib\sunrsasign.jar;C:\Program Files\Java\jre1.8.0_151\lib\jsse.jar;C:\Program Files\Java\jre1.8.0_151\lib\jce.jar;C:\Program Files\Java\jre1.8.0_151\lib\charsets.jar;C:\Program Files\Java\jre1.8.0_151\lib\jfr.jar;C:\Program Files\Java\jre1.8.0_151\classes, hibernate.hbm2ddl.auto=update, user.script=, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=1.8.0_151-b12, user.name=Sajjad, path.separator=;, os.version=10.0, java.endorsed.dirs=C:\Program Files\Java\jre1.8.0_151\lib\endorsed, java.runtime.name=Java(TM) SE Runtime Environment, file.encoding=UTF-8, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.show_sql=true, hibernate.classLoaders=[sun.misc.Launcher$AppClassLoader@2a139a55], hibernate.current_session_context_class=org.springframework.orm.hibernate5.SpringSessionContext, java.vendor.url.bug=http://bugreport.sun.com/bugreport/, java.io.tmpdir=C:\Users\Sajjad\AppData\Local\Temp\, java.version=1.8.0_151, user.dir=E:\spring_hibernate17\SpringWithHibernate, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.os.patch.level=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@3bd418e4, java.library.path=C:\Program Files\Java\jre1.8.0_151\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:/Program Files/Java/jre1.8.0_151/bin/server;C:/Program Files/Java/jre1.8.0_151/bin;C:/Program Files/Java/jre1.8.0_151/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\Program Files\MySQL\MySQL Utilities 1.6\;"C:\Program Files\Java\jdk1.8.0_121\bin;";C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Git\cmd;C:\Users\Sajjad\AppData\Local\Microsoft\WindowsApps;C:\Users\Sajjad\AppData\Local\GitHubDesktop\bin;%USERPROFILE%\AppData\Local\Microsoft\WindowsApps;;E:\Softwares\spring-tool-suite-3.9.2.RELEASE-e4.7.2-win32-x86_64\sts-bundle\sts-3.9.2.RELEASE;;., java.vm.info=mixed mode, java.vendor=Oracle Corporation, java.vm.version=25.151-b12, hibernate.bytecode.use_reflection_optimizer=false, hibernate.connection.datasource=org.springframework.jdbc.datasource.DriverManagerDataSource@226a82c4, java.ext.dirs=C:\Program Files\Java\jre1.8.0_151\lib\ext;C:\WINDOWS\Sun\Java\lib\ext, sun.io.unicode.encoding=UnicodeLittle, java.class.version=52.0}
Skipping JACC integration as it was not enabled
Instantiated session factory
Not known whether passed class name [com.nsksoft.spring.hibernate.bean.User] is safe
No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.nsksoft.spring.hibernate.bean.User
Not known whether passed class name [com.nsksoft.spring.hibernate.bean.User] is safe
No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.nsksoft.spring.hibernate.bean.User
Static SQL for entity: com.nsksoft.spring.hibernate.bean.User
 Version select: select user_id from UserDetails where user_id =?
 Snapshot select: select user_.user_id, user_.country as country2_0_, user_.dob as dob3_0_, user_.email as email4_0_, user_.first_name as first_na5_0_, user_.gender as gender6_0_, user_.last_name as last_nam7_0_, user_.marital_status as marital_8_0_, user_.mobile as mobile9_0_, user_.pass_word as pass_wo10_0_, user_.permanent_adreess as permane11_0_, user_.pincode as pincode12_0_, user_.present_address as present13_0_, user_.state as state14_0_ from UserDetails user_ where user_.user_id=?
 Insert 0: insert into UserDetails (country, dob, email, first_name, gender, last_name, marital_status, mobile, pass_word, permanent_adreess, pincode, present_address, state, user_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
 Update 0: update UserDetails set country=?, dob=?, email=?, first_name=?, gender=?, last_name=?, marital_status=?, mobile=?, pass_word=?, permanent_adreess=?, pincode=?, present_address=?, state=? where user_id=?
 Delete 0: delete from UserDetails where user_id=?
 Identity insert: insert into UserDetails (country, dob, email, first_name, gender, last_name, marital_status, mobile, pass_word, permanent_adreess, pincode, present_address, state) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@76ba13c]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [NONE]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6c67e137]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [READ]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@191ae03f]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [UPGRADE]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@53ab0286]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [UPGRADE_NOWAIT]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2d10e0b1]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [UPGRADE_SKIPLOCKED]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@172ca72b]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [FORCE]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@71e5f61d]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [PESSIMISTIC_READ]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? lock in share mode
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5e8f9e2d]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [PESSIMISTIC_WRITE]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@fd46303]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4204541c]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [OPTIMISTIC]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4602c2a9]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
Static select for action ACTION_MERGE on entity com.nsksoft.spring.hibernate.bean.User: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
Static select for action ACTION_REFRESH on entity com.nsksoft.spring.hibernate.bean.User: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
No alter strings for table : UserDetails
No JtaPlatform was specified, checking resolver
No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
Checking 0 named HQL queries
Checking 0 named SQL queries
Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@578524c3
Registering SessionFactory: 322ecf8a-58de-4c1c-8934-4f122db32fc1 (<unnamed>)
Not binding SessionFactory to JNDI, no JNDI name configured
HHH000031: Closing
Implicitly destroying ServiceRegistry on de-registration of all child ServiceRegistries
Implicitly destroying Boot-strap registry on de-registration of all child ServiceRegistries
Logging Provider: org.jboss.logging.Log4jLoggerProvider
Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
HHH000412: Hibernate Core {5.2.16.Final}
HHH000206: hibernate.properties not found
Building session factory using internal StandardServiceRegistryBuilder
Overriding existing service binding [org.hibernate.secure.spi.JaccService]
Building session factory using provided StandardServiceRegistry
Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
Adding type registration boolean -> org.hibernate.type.BooleanType@609db43b
Adding type registration boolean -> org.hibernate.type.BooleanType@609db43b
Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@609db43b
Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@6497b078
Adding type registration true_false -> org.hibernate.type.TrueFalseType@5f683daf
Adding type registration yes_no -> org.hibernate.type.YesNoType@76f2bbc1
Adding type registration byte -> org.hibernate.type.ByteType@2e1d27ba
Adding type registration byte -> org.hibernate.type.ByteType@2e1d27ba
Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@2e1d27ba
Adding type registration character -> org.hibernate.type.CharacterType@44a7bfbc
Adding type registration char -> org.hibernate.type.CharacterType@44a7bfbc
Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@44a7bfbc
Adding type registration short -> org.hibernate.type.ShortType@2beee7ff
Adding type registration short -> org.hibernate.type.ShortType@2beee7ff
Adding type registration java.lang.Short -> org.hibernate.type.ShortType@2beee7ff
Adding type registration integer -> org.hibernate.type.IntegerType@3541cb24
Adding type registration int -> org.hibernate.type.IntegerType@3541cb24
Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@3541cb24
Adding type registration long -> org.hibernate.type.LongType@3315d2d7
Adding type registration long -> org.hibernate.type.LongType@3315d2d7
Adding type registration java.lang.Long -> org.hibernate.type.LongType@3315d2d7
Adding type registration float -> org.hibernate.type.FloatType@4da4253
Adding type registration float -> org.hibernate.type.FloatType@4da4253
Adding type registration java.lang.Float -> org.hibernate.type.FloatType@4da4253
Adding type registration double -> org.hibernate.type.DoubleType@4cc8eb05
Adding type registration double -> org.hibernate.type.DoubleType@4cc8eb05
Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@4cc8eb05
Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@3246fb96
Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@3246fb96
Adding type registration big_integer -> org.hibernate.type.BigIntegerType@49dc7102
Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@49dc7102
Adding type registration string -> org.hibernate.type.StringType@34f7cfd9
Adding type registration java.lang.String -> org.hibernate.type.StringType@34f7cfd9
Adding type registration nstring -> org.hibernate.type.StringNVarcharType@55536d9e
Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@2e55dd0c
Adding type registration url -> org.hibernate.type.UrlType@69e1dd28
Adding type registration java.net.URL -> org.hibernate.type.UrlType@69e1dd28
Adding type registration Duration -> org.hibernate.type.DurationType@67080771
Adding type registration java.time.Duration -> org.hibernate.type.DurationType@67080771
Adding type registration Instant -> org.hibernate.type.InstantType@2accdbb5
Adding type registration java.time.Instant -> org.hibernate.type.InstantType@2accdbb5
Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@27ff5d15
Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@27ff5d15
Adding type registration LocalDate -> org.hibernate.type.LocalDateType@1cbb87f3
Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@1cbb87f3
Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@10163d6
Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@10163d6
Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@247d8ae
Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@247d8ae
Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@223aa2f7
Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@223aa2f7
Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@33990a0c
Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@33990a0c
Adding type registration date -> org.hibernate.type.DateType@24fcf36f
Adding type registration java.sql.Date -> org.hibernate.type.DateType@24fcf36f
Adding type registration time -> org.hibernate.type.TimeType@2b48a640
Adding type registration java.sql.Time -> org.hibernate.type.TimeType@2b48a640
Adding type registration timestamp -> org.hibernate.type.TimestampType@4bb33f74
Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@4bb33f74
Adding type registration java.util.Date -> org.hibernate.type.TimestampType@4bb33f74
Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@3d5c822d
Adding type registration calendar -> org.hibernate.type.CalendarType@4d5b6aac
Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@4d5b6aac
Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@4d5b6aac
Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@429bffaa
Adding type registration locale -> org.hibernate.type.LocaleType@28f3b248
Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@28f3b248
Adding type registration currency -> org.hibernate.type.CurrencyType@57d7f8ca
Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@57d7f8ca
Adding type registration timezone -> org.hibernate.type.TimeZoneType@662b4c69
Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@662b4c69
Adding type registration class -> org.hibernate.type.ClassType@3d6f0054
Adding type registration java.lang.Class -> org.hibernate.type.ClassType@3d6f0054
Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@71def8f8
Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@71def8f8
Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@53fdffa1
Adding type registration binary -> org.hibernate.type.BinaryType@3232a28a
Adding type registration byte[] -> org.hibernate.type.BinaryType@3232a28a
Adding type registration [B -> org.hibernate.type.BinaryType@3232a28a
Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@6da21078
Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@6da21078
Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@6da21078
Adding type registration row_version -> org.hibernate.type.RowVersionType@20ccf40b
Adding type registration image -> org.hibernate.type.ImageType@47987356
Adding type registration characters -> org.hibernate.type.CharArrayType@611889f4
Adding type registration char[] -> org.hibernate.type.CharArrayType@611889f4
Adding type registration [C -> org.hibernate.type.CharArrayType@611889f4
Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@1a18644
Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@1a18644
Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@1a18644
Adding type registration text -> org.hibernate.type.TextType@4738a206
Adding type registration ntext -> org.hibernate.type.NTextType@618425b5
Adding type registration blob -> org.hibernate.type.BlobType@342c38f8
Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@342c38f8
Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@485966cc
Adding type registration clob -> org.hibernate.type.ClobType@1de5f259
Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@1de5f259
Adding type registration nclob -> org.hibernate.type.NClobType@71a8adcf
Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@71a8adcf
Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@659499f1
Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@201a4587
Adding type registration serializable -> org.hibernate.type.SerializableType@27f981c6
Adding type registration object -> org.hibernate.type.ObjectType@48aca48b
Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@48aca48b
Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@506ae4d4
Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@7d4f9aae
Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@72e5a8e
Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@54e1c68b
Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@53aac487
Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@52b1beb6
Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@273e7444
Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@7db12bb6
Database ->
       name : MySQL
    version : 5.7.18-log
      major : 5
      minor : 7
Driver ->
       name : MySQL Connector Java
    version : mysql-connector-java-5.1.45 ( Revision: 9131eefa398531c7dc98776e8a3fe839e544c5b2 )
      major : 5
      minor : 1
JDBC version : 4.0
HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
JDBC driver metadata reported database stores quoted identifiers in more than one case
IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
Binding entity from annotated class: com.nsksoft.spring.hibernate.bean.User
Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
Import with entity name User
Bind entity com.nsksoft.spring.hibernate.bean.User on table UserDetails
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=user_id, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property user_id with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:user_id]
building SimpleValue for user_id
Building property user_id
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=country, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property country with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:country]
building SimpleValue for country
Building property country
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=dob, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property dob with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:dob]
building SimpleValue for dob
Building property dob
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=email, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property email with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:email]
building SimpleValue for email
Building property email
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=first_name, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property first_name with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:first_name]
building SimpleValue for first_name
Building property first_name
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=gender, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property gender with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:gender]
building SimpleValue for gender
Building property gender
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=last_name, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property last_name with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:last_name]
building SimpleValue for last_name
Building property last_name
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=marital_status, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property marital_status with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:marital_status]
building SimpleValue for marital_status
Building property marital_status
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=mobile, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property mobile with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:mobile]
building SimpleValue for mobile
Building property mobile
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=pass_word, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property password with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:password]
building SimpleValue for password
Building property password
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=permanent_adreess, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property permanent_adreess with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:permanent_adreess]
building SimpleValue for permanent_adreess
Building property permanent_adreess
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=pincode, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property pincode with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:pincode]
building SimpleValue for pincode
Building property pincode
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=present_address, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property present_address with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:present_address]
building SimpleValue for present_address
Building property present_address
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=state, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property state with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:state]
building SimpleValue for state
Building property state
Starting fillSimpleValue for user_id
Starting fillSimpleValue for country
Starting fillSimpleValue for dob
Starting fillSimpleValue for email
Starting fillSimpleValue for first_name
Starting fillSimpleValue for gender
Starting fillSimpleValue for last_name
Starting fillSimpleValue for marital_status
Starting fillSimpleValue for mobile
Starting fillSimpleValue for password
Starting fillSimpleValue for permanent_adreess
Starting fillSimpleValue for pincode
Starting fillSimpleValue for present_address
Starting fillSimpleValue for state
Forcing column [user_id] to be non-null as it is part of the primary key for table [userdetails]
Building session factory
SessionFactory name : null
Automatic flush during beforeCompletion(): enabled
Automatic session close at end of transaction: disabled
Statistics: disabled
Deleted entity synthetic identifier rollback: disabled
Default entity-mode: pojo
Check Nullability in Core (should be disabled when Bean Validation is on): enabled
Allow initialization of lazy state outside session : disabled
Using BatchFetchStyle : LEGACY
Default batch fetch size: -1
Maximum outer join fetch depth: 2
Default null ordering: NONE
Order SQL updates by primary key: disabled
Order SQL inserts for batching: disabled
multi-tenancy strategy : NONE
JTA Track by Thread: enabled
Query language substitutions: {}
JPA query language strict compliance: disabled
Named query checking : enabled
Second-level cache: enabled
Second-level query cache: disabled
Second-level query cache factory: org.hibernate.cache.internal.StandardQueryCacheFactory@2fc6f97f
Second-level cache region prefix: null
Optimize second-level cache for minimal puts: disabled
Structured second-level cache entries: disabled
Second-level cache direct-reference entries: disabled
Automatic eviction of collection cache: disabled
JDBC batch size: 15
JDBC batch updates for versioned data: enabled
Scrollable result sets: enabled
Wrap result sets: disabled
JDBC3 getGeneratedKeys(): enabled
JDBC result set fetch size: null
Connection release mode: ON_CLOSE
Generate SQL with comments: disabled
Session factory constructed with filter configurations : {}
Instantiating session factory with properties: {sun.desktop=windows, awt.toolkit=sun.awt.windows.WToolkit, file.encoding.pkg=sun.io, java.specification.version=1.8, hibernate.connection.handling_mode=DELAYED_ACQUISITION_AND_HOLD, sun.cpu.isalist=amd64, sun.jnu.encoding=Cp1252, hibernate.dialect=org.hibernate.dialect.MySQL5Dialect, java.class.path=C:\Program Files\Java\jre1.8.0_151\lib\resources.jar;C:\Program Files\Java\jre1.8.0_151\lib\rt.jar;C:\Program Files\Java\jre1.8.0_151\lib\jsse.jar;C:\Program Files\Java\jre1.8.0_151\lib\jce.jar;C:\Program Files\Java\jre1.8.0_151\lib\charsets.jar;C:\Program Files\Java\jre1.8.0_151\lib\jfr.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\access-bridge-64.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\cldrdata.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\dnsns.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\jaccess.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\jfxrt.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\localedata.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\nashorn.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunec.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunjce_provider.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunmscapi.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunpkcs11.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\zipfs.jar;E:\spring_hibernate17\SpringWithHibernate\target\classes;C:\Users\Sajjad\.m2\repository\org\springframework\spring-context\5.0.6.RELEASE\spring-context-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-aop\5.0.6.RELEASE\spring-aop-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-beans\5.0.6.RELEASE\spring-beans-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-core\5.0.6.RELEASE\spring-core-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-jcl\5.0.6.RELEASE\spring-jcl-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-expression\5.0.6.RELEASE\spring-expression-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-orm\4.3.14.RELEASE\spring-orm-4.3.14.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-jdbc\4.3.14.RELEASE\spring-jdbc-4.3.14.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-tx\4.3.14.RELEASE\spring-tx-4.3.14.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\hibernate\hibernate-core\5.2.16.Final\hibernate-core-5.2.16.Final.jar;C:\Users\Sajjad\.m2\repository\org\jboss\logging\jboss-logging\3.3.1.Final\jboss-logging-3.3.1.Final.jar;C:\Users\Sajjad\.m2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;C:\Users\Sajjad\.m2\repository\org\javassist\javassist\3.22.0-GA\javassist-3.22.0-GA.jar;C:\Users\Sajjad\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\Sajjad\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.0.1.Final\jboss-transaction-api_1.2_spec-1.0.1.Final.jar;C:\Users\Sajjad\.m2\repository\org\jboss\jandex\2.0.3.Final\jandex-2.0.3.Final.jar;C:\Users\Sajjad\.m2\repository\com\fasterxml\classmate\1.3.0\classmate-1.3.0.jar;C:\Users\Sajjad\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;C:\Users\Sajjad\.m2\repository\org\hibernate\common\hibernate-commons-annotations\5.0.1.Final\hibernate-commons-annotations-5.0.1.Final.jar;C:\Users\Sajjad\.m2\repository\mysql\mysql-connector-java\5.1.45\mysql-connector-java-5.1.45.jar, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=http://java.oracle.com/, user.timezone=Asia/Calcutta, os.name=Windows 10, java.vm.specification.version=1.8, user.country=IN, sun.java.launcher=SUN_STANDARD, sun.boot.library.path=C:\Program Files\Java\jre1.8.0_151\bin, sun.java.command=com.nsksoft.spring.hibernate.client.App, sun.cpu.endian=little, user.home=C:\Users\Sajjad, user.language=en, java.specification.vendor=Oracle Corporation, java.home=C:\Program Files\Java\jre1.8.0_151, file.separator=\, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, sun.boot.class.path=C:\Program Files\Java\jre1.8.0_151\lib\resources.jar;C:\Program Files\Java\jre1.8.0_151\lib\rt.jar;C:\Program Files\Java\jre1.8.0_151\lib\sunrsasign.jar;C:\Program Files\Java\jre1.8.0_151\lib\jsse.jar;C:\Program Files\Java\jre1.8.0_151\lib\jce.jar;C:\Program Files\Java\jre1.8.0_151\lib\charsets.jar;C:\Program Files\Java\jre1.8.0_151\lib\jfr.jar;C:\Program Files\Java\jre1.8.0_151\classes, hibernate.hbm2ddl.auto=update, user.script=, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=1.8.0_151-b12, user.name=Sajjad, path.separator=;, os.version=10.0, java.endorsed.dirs=C:\Program Files\Java\jre1.8.0_151\lib\endorsed, java.runtime.name=Java(TM) SE Runtime Environment, file.encoding=UTF-8, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.show_sql=true, hibernate.classLoaders=[sun.misc.Launcher$AppClassLoader@2a139a55], hibernate.current_session_context_class=org.springframework.orm.hibernate5.SpringSessionContext, java.vendor.url.bug=http://bugreport.sun.com/bugreport/, java.io.tmpdir=C:\Users\Sajjad\AppData\Local\Temp\, java.version=1.8.0_151, user.dir=E:\spring_hibernate17\SpringWithHibernate, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.os.patch.level=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@3bd418e4, java.library.path=C:\Program Files\Java\jre1.8.0_151\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:/Program Files/Java/jre1.8.0_151/bin/server;C:/Program Files/Java/jre1.8.0_151/bin;C:/Program Files/Java/jre1.8.0_151/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\Program Files\MySQL\MySQL Utilities 1.6\;"C:\Program Files\Java\jdk1.8.0_121\bin;";C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Git\cmd;C:\Users\Sajjad\AppData\Local\Microsoft\WindowsApps;C:\Users\Sajjad\AppData\Local\GitHubDesktop\bin;%USERPROFILE%\AppData\Local\Microsoft\WindowsApps;;E:\Softwares\spring-tool-suite-3.9.2.RELEASE-e4.7.2-win32-x86_64\sts-bundle\sts-3.9.2.RELEASE;;., java.vm.info=mixed mode, java.vendor=Oracle Corporation, java.vm.version=25.151-b12, hibernate.bytecode.use_reflection_optimizer=false, hibernate.connection.datasource=org.springframework.jdbc.datasource.DriverManagerDataSource@226a82c4, java.ext.dirs=C:\Program Files\Java\jre1.8.0_151\lib\ext;C:\WINDOWS\Sun\Java\lib\ext, sun.io.unicode.encoding=UnicodeLittle, java.class.version=52.0}
Skipping JACC integration as it was not enabled
Instantiated session factory
Not known whether passed class name [com.nsksoft.spring.hibernate.bean.User] is safe
No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.nsksoft.spring.hibernate.bean.User
Not known whether passed class name [com.nsksoft.spring.hibernate.bean.User] is safe
No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.nsksoft.spring.hibernate.bean.User
Static SQL for entity: com.nsksoft.spring.hibernate.bean.User
 Version select: select user_id from UserDetails where user_id =?
 Snapshot select: select user_.user_id, user_.country as country2_0_, user_.dob as dob3_0_, user_.email as email4_0_, user_.first_name as first_na5_0_, user_.gender as gender6_0_, user_.last_name as last_nam7_0_, user_.marital_status as marital_8_0_, user_.mobile as mobile9_0_, user_.pass_word as pass_wo10_0_, user_.permanent_adreess as permane11_0_, user_.pincode as pincode12_0_, user_.present_address as present13_0_, user_.state as state14_0_ from UserDetails user_ where user_.user_id=?
 Insert 0: insert into UserDetails (country, dob, email, first_name, gender, last_name, marital_status, mobile, pass_word, permanent_adreess, pincode, present_address, state, user_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
 Update 0: update UserDetails set country=?, dob=?, email=?, first_name=?, gender=?, last_name=?, marital_status=?, mobile=?, pass_word=?, permanent_adreess=?, pincode=?, present_address=?, state=? where user_id=?
 Delete 0: delete from UserDetails where user_id=?
 Identity insert: insert into UserDetails (country, dob, email, first_name, gender, last_name, marital_status, mobile, pass_word, permanent_adreess, pincode, present_address, state) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@76ba13c]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [NONE]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6c67e137]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [READ]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@191ae03f]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [UPGRADE]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@53ab0286]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [UPGRADE_NOWAIT]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2d10e0b1]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [UPGRADE_SKIPLOCKED]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@172ca72b]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [FORCE]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@71e5f61d]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [PESSIMISTIC_READ]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? lock in share mode
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5e8f9e2d]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [PESSIMISTIC_WRITE]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@fd46303]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4204541c]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [OPTIMISTIC]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4602c2a9]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
Static select for action ACTION_MERGE on entity com.nsksoft.spring.hibernate.bean.User: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
Static select for action ACTION_REFRESH on entity com.nsksoft.spring.hibernate.bean.User: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
No alter strings for table : UserDetails
No JtaPlatform was specified, checking resolver
No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
Checking 0 named HQL queries
Checking 0 named SQL queries
Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@578524c3
Registering SessionFactory: b4091582-3725-4ba6-8f05-87dd95535133 (<unnamed>)
Not binding SessionFactory to JNDI, no JNDI name configured
Statistics initialized [enabled=false]
Executing identity-insert immediately
insert into UserDetails (country, dob, email, first_name, gender, last_name, marital_status, mobile, pass_word, permanent_adreess, pincode, present_address, state) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Natively generated identity: 2
HHH000387: ResultSet's statement was not registered
=========Executing the Main()=====================
Came inside the addDataSource and adding the Connection Properties
returning the datasource object
Sessionfactory Object is Created adding the Hibernate properties and Mapping files
Logging Provider: org.jboss.logging.Log4jLoggerProvider
Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
HHH000412: Hibernate Core {5.2.16.Final}
HHH000206: hibernate.properties not found
returning the sessionFactory
Building session factory using internal StandardServiceRegistryBuilder
Overriding existing service binding [org.hibernate.secure.spi.JaccService]
Building session factory using provided StandardServiceRegistry
Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
Adding type registration boolean -> org.hibernate.type.BooleanType@609db43b
Adding type registration boolean -> org.hibernate.type.BooleanType@609db43b
Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@609db43b
Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@6497b078
Adding type registration true_false -> org.hibernate.type.TrueFalseType@5f683daf
Adding type registration yes_no -> org.hibernate.type.YesNoType@76f2bbc1
Adding type registration byte -> org.hibernate.type.ByteType@2e1d27ba
Adding type registration byte -> org.hibernate.type.ByteType@2e1d27ba
Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@2e1d27ba
Adding type registration character -> org.hibernate.type.CharacterType@44a7bfbc
Adding type registration char -> org.hibernate.type.CharacterType@44a7bfbc
Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@44a7bfbc
Adding type registration short -> org.hibernate.type.ShortType@2beee7ff
Adding type registration short -> org.hibernate.type.ShortType@2beee7ff
Adding type registration java.lang.Short -> org.hibernate.type.ShortType@2beee7ff
Adding type registration integer -> org.hibernate.type.IntegerType@3541cb24
Adding type registration int -> org.hibernate.type.IntegerType@3541cb24
Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@3541cb24
Adding type registration long -> org.hibernate.type.LongType@3315d2d7
Adding type registration long -> org.hibernate.type.LongType@3315d2d7
Adding type registration java.lang.Long -> org.hibernate.type.LongType@3315d2d7
Adding type registration float -> org.hibernate.type.FloatType@4da4253
Adding type registration float -> org.hibernate.type.FloatType@4da4253
Adding type registration java.lang.Float -> org.hibernate.type.FloatType@4da4253
Adding type registration double -> org.hibernate.type.DoubleType@4cc8eb05
Adding type registration double -> org.hibernate.type.DoubleType@4cc8eb05
Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@4cc8eb05
Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@3246fb96
Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@3246fb96
Adding type registration big_integer -> org.hibernate.type.BigIntegerType@49dc7102
Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@49dc7102
Adding type registration string -> org.hibernate.type.StringType@34f7cfd9
Adding type registration java.lang.String -> org.hibernate.type.StringType@34f7cfd9
Adding type registration nstring -> org.hibernate.type.StringNVarcharType@55536d9e
Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@2e55dd0c
Adding type registration url -> org.hibernate.type.UrlType@69e1dd28
Adding type registration java.net.URL -> org.hibernate.type.UrlType@69e1dd28
Adding type registration Duration -> org.hibernate.type.DurationType@67080771
Adding type registration java.time.Duration -> org.hibernate.type.DurationType@67080771
Adding type registration Instant -> org.hibernate.type.InstantType@2accdbb5
Adding type registration java.time.Instant -> org.hibernate.type.InstantType@2accdbb5
Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@27ff5d15
Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@27ff5d15
Adding type registration LocalDate -> org.hibernate.type.LocalDateType@1cbb87f3
Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@1cbb87f3
Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@10163d6
Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@10163d6
Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@247d8ae
Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@247d8ae
Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@223aa2f7
Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@223aa2f7
Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@33990a0c
Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@33990a0c
Adding type registration date -> org.hibernate.type.DateType@24fcf36f
Adding type registration java.sql.Date -> org.hibernate.type.DateType@24fcf36f
Adding type registration time -> org.hibernate.type.TimeType@2b48a640
Adding type registration java.sql.Time -> org.hibernate.type.TimeType@2b48a640
Adding type registration timestamp -> org.hibernate.type.TimestampType@4bb33f74
Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@4bb33f74
Adding type registration java.util.Date -> org.hibernate.type.TimestampType@4bb33f74
Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@3d5c822d
Adding type registration calendar -> org.hibernate.type.CalendarType@4d5b6aac
Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@4d5b6aac
Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@4d5b6aac
Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@429bffaa
Adding type registration locale -> org.hibernate.type.LocaleType@28f3b248
Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@28f3b248
Adding type registration currency -> org.hibernate.type.CurrencyType@57d7f8ca
Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@57d7f8ca
Adding type registration timezone -> org.hibernate.type.TimeZoneType@662b4c69
Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@662b4c69
Adding type registration class -> org.hibernate.type.ClassType@3d6f0054
Adding type registration java.lang.Class -> org.hibernate.type.ClassType@3d6f0054
Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@71def8f8
Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@71def8f8
Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@53fdffa1
Adding type registration binary -> org.hibernate.type.BinaryType@3232a28a
Adding type registration byte[] -> org.hibernate.type.BinaryType@3232a28a
Adding type registration [B -> org.hibernate.type.BinaryType@3232a28a
Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@6da21078
Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@6da21078
Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@6da21078
Adding type registration row_version -> org.hibernate.type.RowVersionType@20ccf40b
Adding type registration image -> org.hibernate.type.ImageType@47987356
Adding type registration characters -> org.hibernate.type.CharArrayType@611889f4
Adding type registration char[] -> org.hibernate.type.CharArrayType@611889f4
Adding type registration [C -> org.hibernate.type.CharArrayType@611889f4
Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@1a18644
Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@1a18644
Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@1a18644
Adding type registration text -> org.hibernate.type.TextType@4738a206
Adding type registration ntext -> org.hibernate.type.NTextType@618425b5
Adding type registration blob -> org.hibernate.type.BlobType@342c38f8
Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@342c38f8
Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@485966cc
Adding type registration clob -> org.hibernate.type.ClobType@1de5f259
Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@1de5f259
Adding type registration nclob -> org.hibernate.type.NClobType@71a8adcf
Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@71a8adcf
Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@659499f1
Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@201a4587
Adding type registration serializable -> org.hibernate.type.SerializableType@27f981c6
Adding type registration object -> org.hibernate.type.ObjectType@48aca48b
Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@48aca48b
Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@506ae4d4
Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@7d4f9aae
Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@72e5a8e
Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@54e1c68b
Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@53aac487
Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@52b1beb6
Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@273e7444
Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@7db12bb6
Database ->
       name : MySQL
    version : 5.7.18-log
      major : 5
      minor : 7
Driver ->
       name : MySQL Connector Java
    version : mysql-connector-java-5.1.45 ( Revision: 9131eefa398531c7dc98776e8a3fe839e544c5b2 )
      major : 5
      minor : 1
JDBC version : 4.0
HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
JDBC driver metadata reported database stores quoted identifiers in more than one case
IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
Binding entity from annotated class: com.nsksoft.spring.hibernate.bean.User
Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
Import with entity name User
Bind entity com.nsksoft.spring.hibernate.bean.User on table UserDetails
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=user_id, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property user_id with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:user_id]
building SimpleValue for user_id
Building property user_id
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=country, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property country with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:country]
building SimpleValue for country
Building property country
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=dob, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property dob with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:dob]
building SimpleValue for dob
Building property dob
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=email, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property email with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:email]
building SimpleValue for email
Building property email
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=first_name, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property first_name with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:first_name]
building SimpleValue for first_name
Building property first_name
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=gender, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property gender with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:gender]
building SimpleValue for gender
Building property gender
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=last_name, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property last_name with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:last_name]
building SimpleValue for last_name
Building property last_name
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=marital_status, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property marital_status with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:marital_status]
building SimpleValue for marital_status
Building property marital_status
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=mobile, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property mobile with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:mobile]
building SimpleValue for mobile
Building property mobile
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=pass_word, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property password with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:password]
building SimpleValue for password
Building property password
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=permanent_adreess, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property permanent_adreess with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:permanent_adreess]
building SimpleValue for permanent_adreess
Building property permanent_adreess
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=pincode, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property pincode with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:pincode]
building SimpleValue for pincode
Building property pincode
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=present_address, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property present_address with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:present_address]
building SimpleValue for present_address
Building property present_address
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=state, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property state with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:state]
building SimpleValue for state
Building property state
Starting fillSimpleValue for user_id
Starting fillSimpleValue for country
Starting fillSimpleValue for dob
Starting fillSimpleValue for email
Starting fillSimpleValue for first_name
Starting fillSimpleValue for gender
Starting fillSimpleValue for last_name
Starting fillSimpleValue for marital_status
Starting fillSimpleValue for mobile
Starting fillSimpleValue for password
Starting fillSimpleValue for permanent_adreess
Starting fillSimpleValue for pincode
Starting fillSimpleValue for present_address
Starting fillSimpleValue for state
Forcing column [user_id] to be non-null as it is part of the primary key for table [userdetails]
Building session factory
SessionFactory name : null
Automatic flush during beforeCompletion(): enabled
Automatic session close at end of transaction: disabled
Statistics: disabled
Deleted entity synthetic identifier rollback: disabled
Default entity-mode: pojo
Check Nullability in Core (should be disabled when Bean Validation is on): enabled
Allow initialization of lazy state outside session : disabled
Using BatchFetchStyle : LEGACY
Default batch fetch size: -1
Maximum outer join fetch depth: 2
Default null ordering: NONE
Order SQL updates by primary key: disabled
Order SQL inserts for batching: disabled
multi-tenancy strategy : NONE
JTA Track by Thread: enabled
Query language substitutions: {}
JPA query language strict compliance: disabled
Named query checking : enabled
Second-level cache: enabled
Second-level query cache: disabled
Second-level query cache factory: org.hibernate.cache.internal.StandardQueryCacheFactory@2fc6f97f
Second-level cache region prefix: null
Optimize second-level cache for minimal puts: disabled
Structured second-level cache entries: disabled
Second-level cache direct-reference entries: disabled
Automatic eviction of collection cache: disabled
JDBC batch size: 15
JDBC batch updates for versioned data: enabled
Scrollable result sets: enabled
Wrap result sets: disabled
JDBC3 getGeneratedKeys(): enabled
JDBC result set fetch size: null
Connection release mode: ON_CLOSE
Generate SQL with comments: disabled
Session factory constructed with filter configurations : {}
Instantiating session factory with properties: {sun.desktop=windows, awt.toolkit=sun.awt.windows.WToolkit, file.encoding.pkg=sun.io, java.specification.version=1.8, hibernate.connection.handling_mode=DELAYED_ACQUISITION_AND_HOLD, sun.cpu.isalist=amd64, sun.jnu.encoding=Cp1252, hibernate.dialect=org.hibernate.dialect.MySQL5Dialect, java.class.path=C:\Program Files\Java\jre1.8.0_151\lib\resources.jar;C:\Program Files\Java\jre1.8.0_151\lib\rt.jar;C:\Program Files\Java\jre1.8.0_151\lib\jsse.jar;C:\Program Files\Java\jre1.8.0_151\lib\jce.jar;C:\Program Files\Java\jre1.8.0_151\lib\charsets.jar;C:\Program Files\Java\jre1.8.0_151\lib\jfr.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\access-bridge-64.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\cldrdata.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\dnsns.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\jaccess.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\jfxrt.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\localedata.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\nashorn.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunec.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunjce_provider.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunmscapi.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunpkcs11.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\zipfs.jar;E:\spring_hibernate17\SpringWithHibernate\target\classes;C:\Users\Sajjad\.m2\repository\org\springframework\spring-context\5.0.6.RELEASE\spring-context-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-aop\5.0.6.RELEASE\spring-aop-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-beans\5.0.6.RELEASE\spring-beans-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-core\5.0.6.RELEASE\spring-core-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-jcl\5.0.6.RELEASE\spring-jcl-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-expression\5.0.6.RELEASE\spring-expression-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-orm\4.3.14.RELEASE\spring-orm-4.3.14.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-jdbc\4.3.14.RELEASE\spring-jdbc-4.3.14.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-tx\4.3.14.RELEASE\spring-tx-4.3.14.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\hibernate\hibernate-core\5.2.16.Final\hibernate-core-5.2.16.Final.jar;C:\Users\Sajjad\.m2\repository\org\jboss\logging\jboss-logging\3.3.1.Final\jboss-logging-3.3.1.Final.jar;C:\Users\Sajjad\.m2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;C:\Users\Sajjad\.m2\repository\org\javassist\javassist\3.22.0-GA\javassist-3.22.0-GA.jar;C:\Users\Sajjad\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\Sajjad\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.0.1.Final\jboss-transaction-api_1.2_spec-1.0.1.Final.jar;C:\Users\Sajjad\.m2\repository\org\jboss\jandex\2.0.3.Final\jandex-2.0.3.Final.jar;C:\Users\Sajjad\.m2\repository\com\fasterxml\classmate\1.3.0\classmate-1.3.0.jar;C:\Users\Sajjad\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;C:\Users\Sajjad\.m2\repository\org\hibernate\common\hibernate-commons-annotations\5.0.1.Final\hibernate-commons-annotations-5.0.1.Final.jar;C:\Users\Sajjad\.m2\repository\mysql\mysql-connector-java\5.1.45\mysql-connector-java-5.1.45.jar, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=http://java.oracle.com/, user.timezone=Asia/Calcutta, os.name=Windows 10, java.vm.specification.version=1.8, user.country=IN, sun.java.launcher=SUN_STANDARD, sun.boot.library.path=C:\Program Files\Java\jre1.8.0_151\bin, sun.java.command=com.nsksoft.spring.hibernate.client.App, sun.cpu.endian=little, user.home=C:\Users\Sajjad, user.language=en, java.specification.vendor=Oracle Corporation, java.home=C:\Program Files\Java\jre1.8.0_151, file.separator=\, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, sun.boot.class.path=C:\Program Files\Java\jre1.8.0_151\lib\resources.jar;C:\Program Files\Java\jre1.8.0_151\lib\rt.jar;C:\Program Files\Java\jre1.8.0_151\lib\sunrsasign.jar;C:\Program Files\Java\jre1.8.0_151\lib\jsse.jar;C:\Program Files\Java\jre1.8.0_151\lib\jce.jar;C:\Program Files\Java\jre1.8.0_151\lib\charsets.jar;C:\Program Files\Java\jre1.8.0_151\lib\jfr.jar;C:\Program Files\Java\jre1.8.0_151\classes, hibernate.hbm2ddl.auto=update, user.script=, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=1.8.0_151-b12, user.name=Sajjad, path.separator=;, os.version=10.0, java.endorsed.dirs=C:\Program Files\Java\jre1.8.0_151\lib\endorsed, java.runtime.name=Java(TM) SE Runtime Environment, file.encoding=UTF-8, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.show_sql=true, hibernate.classLoaders=[sun.misc.Launcher$AppClassLoader@2a139a55], hibernate.current_session_context_class=org.springframework.orm.hibernate5.SpringSessionContext, java.vendor.url.bug=http://bugreport.sun.com/bugreport/, java.io.tmpdir=C:\Users\Sajjad\AppData\Local\Temp\, java.version=1.8.0_151, user.dir=E:\spring_hibernate17\SpringWithHibernate, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.os.patch.level=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@3bd418e4, java.library.path=C:\Program Files\Java\jre1.8.0_151\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:/Program Files/Java/jre1.8.0_151/bin/server;C:/Program Files/Java/jre1.8.0_151/bin;C:/Program Files/Java/jre1.8.0_151/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\Program Files\MySQL\MySQL Utilities 1.6\;"C:\Program Files\Java\jdk1.8.0_121\bin;";C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Git\cmd;C:\Users\Sajjad\AppData\Local\Microsoft\WindowsApps;C:\Users\Sajjad\AppData\Local\GitHubDesktop\bin;%USERPROFILE%\AppData\Local\Microsoft\WindowsApps;;E:\Softwares\spring-tool-suite-3.9.2.RELEASE-e4.7.2-win32-x86_64\sts-bundle\sts-3.9.2.RELEASE;;., java.vm.info=mixed mode, java.vendor=Oracle Corporation, java.vm.version=25.151-b12, hibernate.bytecode.use_reflection_optimizer=false, hibernate.connection.datasource=org.springframework.jdbc.datasource.DriverManagerDataSource@4b168fa9, java.ext.dirs=C:\Program Files\Java\jre1.8.0_151\lib\ext;C:\WINDOWS\Sun\Java\lib\ext, sun.io.unicode.encoding=UnicodeLittle, java.class.version=52.0}
Skipping JACC integration as it was not enabled
Instantiated session factory
Not known whether passed class name [com.nsksoft.spring.hibernate.bean.User] is safe
No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.nsksoft.spring.hibernate.bean.User
Not known whether passed class name [com.nsksoft.spring.hibernate.bean.User] is safe
No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.nsksoft.spring.hibernate.bean.User
Static SQL for entity: com.nsksoft.spring.hibernate.bean.User
 Version select: select user_id from UserDetails where user_id =?
 Snapshot select: select user_.user_id, user_.country as country2_0_, user_.dob as dob3_0_, user_.email as email4_0_, user_.first_name as first_na5_0_, user_.gender as gender6_0_, user_.last_name as last_nam7_0_, user_.marital_status as marital_8_0_, user_.mobile as mobile9_0_, user_.pass_word as pass_wo10_0_, user_.permanent_adreess as permane11_0_, user_.pincode as pincode12_0_, user_.present_address as present13_0_, user_.state as state14_0_ from UserDetails user_ where user_.user_id=?
 Insert 0: insert into UserDetails (country, dob, email, first_name, gender, last_name, marital_status, mobile, pass_word, permanent_adreess, pincode, present_address, state, user_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
 Update 0: update UserDetails set country=?, dob=?, email=?, first_name=?, gender=?, last_name=?, marital_status=?, mobile=?, pass_word=?, permanent_adreess=?, pincode=?, present_address=?, state=? where user_id=?
 Delete 0: delete from UserDetails where user_id=?
 Identity insert: insert into UserDetails (country, dob, email, first_name, gender, last_name, marital_status, mobile, pass_word, permanent_adreess, pincode, present_address, state) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@76ba13c]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [NONE]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6c67e137]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [READ]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@191ae03f]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [UPGRADE]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@53ab0286]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [UPGRADE_NOWAIT]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2d10e0b1]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [UPGRADE_SKIPLOCKED]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@172ca72b]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [FORCE]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@71e5f61d]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [PESSIMISTIC_READ]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? lock in share mode
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5e8f9e2d]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [PESSIMISTIC_WRITE]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@fd46303]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4204541c]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [OPTIMISTIC]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4602c2a9]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
Static select for action ACTION_MERGE on entity com.nsksoft.spring.hibernate.bean.User: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
Static select for action ACTION_REFRESH on entity com.nsksoft.spring.hibernate.bean.User: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
No alter strings for table : UserDetails
No JtaPlatform was specified, checking resolver
No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
Checking 0 named HQL queries
Checking 0 named SQL queries
Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@578524c3
Registering SessionFactory: c087e64b-2626-4137-b625-bd55bc927fbc (<unnamed>)
Not binding SessionFactory to JNDI, no JNDI name configured
returning the Respositry
Creating an Object Of User and Setting the Values
Calling the AddUser() method
Statistics initialized [enabled=false]
Executing identity-insert immediately
insert into UserDetails (country, dob, email, first_name, gender, last_name, marital_status, mobile, pass_word, permanent_adreess, pincode, present_address, state) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Natively generated identity: 3
HHH000387: ResultSet's statement was not registered
=========Executing the Main()=====================
Came inside the addDataSource and adding the Connection Properties
returning the datasource object
Sessionfactory Object is Created adding the Hibernate properties and Mapping files
Logging Provider: org.jboss.logging.Log4jLoggerProvider
Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
HHH000412: Hibernate Core {5.2.16.Final}
HHH000206: hibernate.properties not found
returning the sessionFactory
Building session factory using internal StandardServiceRegistryBuilder
Overriding existing service binding [org.hibernate.secure.spi.JaccService]
Building session factory using provided StandardServiceRegistry
Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
Adding type registration boolean -> org.hibernate.type.BooleanType@609db43b
Adding type registration boolean -> org.hibernate.type.BooleanType@609db43b
Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@609db43b
Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@6497b078
Adding type registration true_false -> org.hibernate.type.TrueFalseType@5f683daf
Adding type registration yes_no -> org.hibernate.type.YesNoType@76f2bbc1
Adding type registration byte -> org.hibernate.type.ByteType@2e1d27ba
Adding type registration byte -> org.hibernate.type.ByteType@2e1d27ba
Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@2e1d27ba
Adding type registration character -> org.hibernate.type.CharacterType@44a7bfbc
Adding type registration char -> org.hibernate.type.CharacterType@44a7bfbc
Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@44a7bfbc
Adding type registration short -> org.hibernate.type.ShortType@2beee7ff
Adding type registration short -> org.hibernate.type.ShortType@2beee7ff
Adding type registration java.lang.Short -> org.hibernate.type.ShortType@2beee7ff
Adding type registration integer -> org.hibernate.type.IntegerType@3541cb24
Adding type registration int -> org.hibernate.type.IntegerType@3541cb24
Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@3541cb24
Adding type registration long -> org.hibernate.type.LongType@3315d2d7
Adding type registration long -> org.hibernate.type.LongType@3315d2d7
Adding type registration java.lang.Long -> org.hibernate.type.LongType@3315d2d7
Adding type registration float -> org.hibernate.type.FloatType@4da4253
Adding type registration float -> org.hibernate.type.FloatType@4da4253
Adding type registration java.lang.Float -> org.hibernate.type.FloatType@4da4253
Adding type registration double -> org.hibernate.type.DoubleType@4cc8eb05
Adding type registration double -> org.hibernate.type.DoubleType@4cc8eb05
Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@4cc8eb05
Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@3246fb96
Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@3246fb96
Adding type registration big_integer -> org.hibernate.type.BigIntegerType@49dc7102
Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@49dc7102
Adding type registration string -> org.hibernate.type.StringType@34f7cfd9
Adding type registration java.lang.String -> org.hibernate.type.StringType@34f7cfd9
Adding type registration nstring -> org.hibernate.type.StringNVarcharType@55536d9e
Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@2e55dd0c
Adding type registration url -> org.hibernate.type.UrlType@69e1dd28
Adding type registration java.net.URL -> org.hibernate.type.UrlType@69e1dd28
Adding type registration Duration -> org.hibernate.type.DurationType@67080771
Adding type registration java.time.Duration -> org.hibernate.type.DurationType@67080771
Adding type registration Instant -> org.hibernate.type.InstantType@2accdbb5
Adding type registration java.time.Instant -> org.hibernate.type.InstantType@2accdbb5
Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@27ff5d15
Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@27ff5d15
Adding type registration LocalDate -> org.hibernate.type.LocalDateType@1cbb87f3
Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@1cbb87f3
Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@10163d6
Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@10163d6
Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@247d8ae
Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@247d8ae
Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@223aa2f7
Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@223aa2f7
Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@33990a0c
Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@33990a0c
Adding type registration date -> org.hibernate.type.DateType@24fcf36f
Adding type registration java.sql.Date -> org.hibernate.type.DateType@24fcf36f
Adding type registration time -> org.hibernate.type.TimeType@2b48a640
Adding type registration java.sql.Time -> org.hibernate.type.TimeType@2b48a640
Adding type registration timestamp -> org.hibernate.type.TimestampType@4bb33f74
Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@4bb33f74
Adding type registration java.util.Date -> org.hibernate.type.TimestampType@4bb33f74
Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@3d5c822d
Adding type registration calendar -> org.hibernate.type.CalendarType@4d5b6aac
Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@4d5b6aac
Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@4d5b6aac
Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@429bffaa
Adding type registration locale -> org.hibernate.type.LocaleType@28f3b248
Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@28f3b248
Adding type registration currency -> org.hibernate.type.CurrencyType@57d7f8ca
Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@57d7f8ca
Adding type registration timezone -> org.hibernate.type.TimeZoneType@662b4c69
Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@662b4c69
Adding type registration class -> org.hibernate.type.ClassType@3d6f0054
Adding type registration java.lang.Class -> org.hibernate.type.ClassType@3d6f0054
Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@71def8f8
Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@71def8f8
Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@53fdffa1
Adding type registration binary -> org.hibernate.type.BinaryType@3232a28a
Adding type registration byte[] -> org.hibernate.type.BinaryType@3232a28a
Adding type registration [B -> org.hibernate.type.BinaryType@3232a28a
Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@6da21078
Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@6da21078
Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@6da21078
Adding type registration row_version -> org.hibernate.type.RowVersionType@20ccf40b
Adding type registration image -> org.hibernate.type.ImageType@47987356
Adding type registration characters -> org.hibernate.type.CharArrayType@611889f4
Adding type registration char[] -> org.hibernate.type.CharArrayType@611889f4
Adding type registration [C -> org.hibernate.type.CharArrayType@611889f4
Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@1a18644
Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@1a18644
Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@1a18644
Adding type registration text -> org.hibernate.type.TextType@4738a206
Adding type registration ntext -> org.hibernate.type.NTextType@618425b5
Adding type registration blob -> org.hibernate.type.BlobType@342c38f8
Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@342c38f8
Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@485966cc
Adding type registration clob -> org.hibernate.type.ClobType@1de5f259
Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@1de5f259
Adding type registration nclob -> org.hibernate.type.NClobType@71a8adcf
Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@71a8adcf
Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@659499f1
Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@201a4587
Adding type registration serializable -> org.hibernate.type.SerializableType@27f981c6
Adding type registration object -> org.hibernate.type.ObjectType@48aca48b
Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@48aca48b
Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@506ae4d4
Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@7d4f9aae
Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@72e5a8e
Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@54e1c68b
Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@53aac487
Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@52b1beb6
Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@273e7444
Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@7db12bb6
Database ->
       name : MySQL
    version : 5.7.18-log
      major : 5
      minor : 7
Driver ->
       name : MySQL Connector Java
    version : mysql-connector-java-5.1.45 ( Revision: 9131eefa398531c7dc98776e8a3fe839e544c5b2 )
      major : 5
      minor : 1
JDBC version : 4.0
HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
JDBC driver metadata reported database stores quoted identifiers in more than one case
IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
Binding entity from annotated class: com.nsksoft.spring.hibernate.bean.User
Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
Import with entity name User
Bind entity com.nsksoft.spring.hibernate.bean.User on table UserDetails
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=user_id, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property user_id with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:user_id]
building SimpleValue for user_id
Building property user_id
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=country, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property country with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:country]
building SimpleValue for country
Building property country
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=dob, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property dob with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:dob]
building SimpleValue for dob
Building property dob
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=email, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property email with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:email]
building SimpleValue for email
Building property email
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=first_name, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property first_name with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:first_name]
building SimpleValue for first_name
Building property first_name
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=gender, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property gender with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:gender]
building SimpleValue for gender
Building property gender
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=last_name, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property last_name with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:last_name]
building SimpleValue for last_name
Building property last_name
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=marital_status, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property marital_status with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:marital_status]
building SimpleValue for marital_status
Building property marital_status
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=mobile, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property mobile with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:mobile]
building SimpleValue for mobile
Building property mobile
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=pass_word, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property password with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:password]
building SimpleValue for password
Building property password
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=permanent_adreess, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property permanent_adreess with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:permanent_adreess]
building SimpleValue for permanent_adreess
Building property permanent_adreess
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=pincode, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property pincode with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:pincode]
building SimpleValue for pincode
Building property pincode
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=present_address, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property present_address with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:present_address]
building SimpleValue for present_address
Building property present_address
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=state, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property state with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:state]
building SimpleValue for state
Building property state
Starting fillSimpleValue for user_id
Starting fillSimpleValue for country
Starting fillSimpleValue for dob
Starting fillSimpleValue for email
Starting fillSimpleValue for first_name
Starting fillSimpleValue for gender
Starting fillSimpleValue for last_name
Starting fillSimpleValue for marital_status
Starting fillSimpleValue for mobile
Starting fillSimpleValue for password
Starting fillSimpleValue for permanent_adreess
Starting fillSimpleValue for pincode
Starting fillSimpleValue for present_address
Starting fillSimpleValue for state
Forcing column [user_id] to be non-null as it is part of the primary key for table [userdetails]
Building session factory
SessionFactory name : null
Automatic flush during beforeCompletion(): enabled
Automatic session close at end of transaction: disabled
Statistics: disabled
Deleted entity synthetic identifier rollback: disabled
Default entity-mode: pojo
Check Nullability in Core (should be disabled when Bean Validation is on): enabled
Allow initialization of lazy state outside session : disabled
Using BatchFetchStyle : LEGACY
Default batch fetch size: -1
Maximum outer join fetch depth: 2
Default null ordering: NONE
Order SQL updates by primary key: disabled
Order SQL inserts for batching: disabled
multi-tenancy strategy : NONE
JTA Track by Thread: enabled
Query language substitutions: {}
JPA query language strict compliance: disabled
Named query checking : enabled
Second-level cache: enabled
Second-level query cache: disabled
Second-level query cache factory: org.hibernate.cache.internal.StandardQueryCacheFactory@2fc6f97f
Second-level cache region prefix: null
Optimize second-level cache for minimal puts: disabled
Structured second-level cache entries: disabled
Second-level cache direct-reference entries: disabled
Automatic eviction of collection cache: disabled
JDBC batch size: 15
JDBC batch updates for versioned data: enabled
Scrollable result sets: enabled
Wrap result sets: disabled
JDBC3 getGeneratedKeys(): enabled
JDBC result set fetch size: null
Connection release mode: ON_CLOSE
Generate SQL with comments: disabled
Session factory constructed with filter configurations : {}
Instantiating session factory with properties: {sun.desktop=windows, awt.toolkit=sun.awt.windows.WToolkit, file.encoding.pkg=sun.io, java.specification.version=1.8, hibernate.connection.handling_mode=DELAYED_ACQUISITION_AND_HOLD, sun.cpu.isalist=amd64, sun.jnu.encoding=Cp1252, hibernate.dialect=org.hibernate.dialect.MySQL5Dialect, java.class.path=C:\Program Files\Java\jre1.8.0_151\lib\resources.jar;C:\Program Files\Java\jre1.8.0_151\lib\rt.jar;C:\Program Files\Java\jre1.8.0_151\lib\jsse.jar;C:\Program Files\Java\jre1.8.0_151\lib\jce.jar;C:\Program Files\Java\jre1.8.0_151\lib\charsets.jar;C:\Program Files\Java\jre1.8.0_151\lib\jfr.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\access-bridge-64.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\cldrdata.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\dnsns.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\jaccess.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\jfxrt.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\localedata.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\nashorn.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunec.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunjce_provider.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunmscapi.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunpkcs11.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\zipfs.jar;E:\spring_hibernate17\SpringWithHibernate\target\classes;C:\Users\Sajjad\.m2\repository\org\springframework\spring-context\5.0.6.RELEASE\spring-context-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-aop\5.0.6.RELEASE\spring-aop-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-beans\5.0.6.RELEASE\spring-beans-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-core\5.0.6.RELEASE\spring-core-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-jcl\5.0.6.RELEASE\spring-jcl-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-expression\5.0.6.RELEASE\spring-expression-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-orm\4.3.14.RELEASE\spring-orm-4.3.14.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-jdbc\4.3.14.RELEASE\spring-jdbc-4.3.14.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-tx\4.3.14.RELEASE\spring-tx-4.3.14.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\hibernate\hibernate-core\5.2.16.Final\hibernate-core-5.2.16.Final.jar;C:\Users\Sajjad\.m2\repository\org\jboss\logging\jboss-logging\3.3.1.Final\jboss-logging-3.3.1.Final.jar;C:\Users\Sajjad\.m2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;C:\Users\Sajjad\.m2\repository\org\javassist\javassist\3.22.0-GA\javassist-3.22.0-GA.jar;C:\Users\Sajjad\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\Sajjad\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.0.1.Final\jboss-transaction-api_1.2_spec-1.0.1.Final.jar;C:\Users\Sajjad\.m2\repository\org\jboss\jandex\2.0.3.Final\jandex-2.0.3.Final.jar;C:\Users\Sajjad\.m2\repository\com\fasterxml\classmate\1.3.0\classmate-1.3.0.jar;C:\Users\Sajjad\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;C:\Users\Sajjad\.m2\repository\org\hibernate\common\hibernate-commons-annotations\5.0.1.Final\hibernate-commons-annotations-5.0.1.Final.jar;C:\Users\Sajjad\.m2\repository\mysql\mysql-connector-java\5.1.45\mysql-connector-java-5.1.45.jar, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=http://java.oracle.com/, user.timezone=Asia/Calcutta, os.name=Windows 10, java.vm.specification.version=1.8, user.country=IN, sun.java.launcher=SUN_STANDARD, sun.boot.library.path=C:\Program Files\Java\jre1.8.0_151\bin, sun.java.command=com.nsksoft.spring.hibernate.client.App, sun.cpu.endian=little, user.home=C:\Users\Sajjad, user.language=en, java.specification.vendor=Oracle Corporation, java.home=C:\Program Files\Java\jre1.8.0_151, file.separator=\, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, sun.boot.class.path=C:\Program Files\Java\jre1.8.0_151\lib\resources.jar;C:\Program Files\Java\jre1.8.0_151\lib\rt.jar;C:\Program Files\Java\jre1.8.0_151\lib\sunrsasign.jar;C:\Program Files\Java\jre1.8.0_151\lib\jsse.jar;C:\Program Files\Java\jre1.8.0_151\lib\jce.jar;C:\Program Files\Java\jre1.8.0_151\lib\charsets.jar;C:\Program Files\Java\jre1.8.0_151\lib\jfr.jar;C:\Program Files\Java\jre1.8.0_151\classes, hibernate.hbm2ddl.auto=update, user.script=, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=1.8.0_151-b12, user.name=Sajjad, path.separator=;, os.version=10.0, java.endorsed.dirs=C:\Program Files\Java\jre1.8.0_151\lib\endorsed, java.runtime.name=Java(TM) SE Runtime Environment, file.encoding=UTF-8, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.show_sql=true, hibernate.classLoaders=[sun.misc.Launcher$AppClassLoader@2a139a55], hibernate.current_session_context_class=org.springframework.orm.hibernate5.SpringSessionContext, java.vendor.url.bug=http://bugreport.sun.com/bugreport/, java.io.tmpdir=C:\Users\Sajjad\AppData\Local\Temp\, java.version=1.8.0_151, user.dir=E:\spring_hibernate17\SpringWithHibernate, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.os.patch.level=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@3bd418e4, java.library.path=C:\Program Files\Java\jre1.8.0_151\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:/Program Files/Java/jre1.8.0_151/bin/server;C:/Program Files/Java/jre1.8.0_151/bin;C:/Program Files/Java/jre1.8.0_151/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\Program Files\MySQL\MySQL Utilities 1.6\;"C:\Program Files\Java\jdk1.8.0_121\bin;";C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Git\cmd;C:\Users\Sajjad\AppData\Local\Microsoft\WindowsApps;C:\Users\Sajjad\AppData\Local\GitHubDesktop\bin;%USERPROFILE%\AppData\Local\Microsoft\WindowsApps;;E:\Softwares\spring-tool-suite-3.9.2.RELEASE-e4.7.2-win32-x86_64\sts-bundle\sts-3.9.2.RELEASE;;., java.vm.info=mixed mode, java.vendor=Oracle Corporation, java.vm.version=25.151-b12, hibernate.bytecode.use_reflection_optimizer=false, hibernate.connection.datasource=org.springframework.jdbc.datasource.DriverManagerDataSource@4b168fa9, java.ext.dirs=C:\Program Files\Java\jre1.8.0_151\lib\ext;C:\WINDOWS\Sun\Java\lib\ext, sun.io.unicode.encoding=UnicodeLittle, java.class.version=52.0}
Skipping JACC integration as it was not enabled
Instantiated session factory
Not known whether passed class name [com.nsksoft.spring.hibernate.bean.User] is safe
No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.nsksoft.spring.hibernate.bean.User
Not known whether passed class name [com.nsksoft.spring.hibernate.bean.User] is safe
No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.nsksoft.spring.hibernate.bean.User
Static SQL for entity: com.nsksoft.spring.hibernate.bean.User
 Version select: select user_id from UserDetails where user_id =?
 Snapshot select: select user_.user_id, user_.country as country2_0_, user_.dob as dob3_0_, user_.email as email4_0_, user_.first_name as first_na5_0_, user_.gender as gender6_0_, user_.last_name as last_nam7_0_, user_.marital_status as marital_8_0_, user_.mobile as mobile9_0_, user_.pass_word as pass_wo10_0_, user_.permanent_adreess as permane11_0_, user_.pincode as pincode12_0_, user_.present_address as present13_0_, user_.state as state14_0_ from UserDetails user_ where user_.user_id=?
 Insert 0: insert into UserDetails (country, dob, email, first_name, gender, last_name, marital_status, mobile, pass_word, permanent_adreess, pincode, present_address, state, user_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
 Update 0: update UserDetails set country=?, dob=?, email=?, first_name=?, gender=?, last_name=?, marital_status=?, mobile=?, pass_word=?, permanent_adreess=?, pincode=?, present_address=?, state=? where user_id=?
 Delete 0: delete from UserDetails where user_id=?
 Identity insert: insert into UserDetails (country, dob, email, first_name, gender, last_name, marital_status, mobile, pass_word, permanent_adreess, pincode, present_address, state) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@76ba13c]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [NONE]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6c67e137]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [READ]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@191ae03f]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [UPGRADE]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@53ab0286]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [UPGRADE_NOWAIT]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2d10e0b1]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [UPGRADE_SKIPLOCKED]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@172ca72b]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [FORCE]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@71e5f61d]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [PESSIMISTIC_READ]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? lock in share mode
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5e8f9e2d]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [PESSIMISTIC_WRITE]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@fd46303]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4204541c]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [OPTIMISTIC]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4602c2a9]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
Static select for action ACTION_MERGE on entity com.nsksoft.spring.hibernate.bean.User: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
Static select for action ACTION_REFRESH on entity com.nsksoft.spring.hibernate.bean.User: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
No alter strings for table : UserDetails
No JtaPlatform was specified, checking resolver
No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
Checking 0 named HQL queries
Checking 0 named SQL queries
Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@578524c3
Registering SessionFactory: feca0b77-55e2-4974-95f2-097f0d6272a0 (<unnamed>)
Not binding SessionFactory to JNDI, no JNDI name configured
returning the Respositry
Statistics initialized [enabled=false]
QueryTranslatorFactory : org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory@7a34b7b8
HHH000397: Using ASTQueryTranslatorFactory
parse() - HQL: select * from com.nsksoft.spring.hibernate.bean.User u
line 1:8: unexpected token: *
line 1:8: unexpected token: *
line 1:8: unexpected token: *
	at org.hibernate.hql.internal.antlr.HqlBaseParser.selectClause(HqlBaseParser.java:1263)
	at org.hibernate.hql.internal.antlr.HqlBaseParser.selectFrom(HqlBaseParser.java:1040)
	at org.hibernate.hql.internal.antlr.HqlBaseParser.queryRule(HqlBaseParser.java:748)
	at org.hibernate.hql.internal.antlr.HqlBaseParser.selectStatement(HqlBaseParser.java:319)
	at org.hibernate.hql.internal.antlr.HqlBaseParser.statement(HqlBaseParser.java:198)
	at org.hibernate.hql.internal.ast.QueryTranslatorImpl.parse(QueryTranslatorImpl.java:284)
	at org.hibernate.hql.internal.ast.QueryTranslatorImpl.doCompile(QueryTranslatorImpl.java:186)
	at org.hibernate.hql.internal.ast.QueryTranslatorImpl.compile(QueryTranslatorImpl.java:141)
	at org.hibernate.engine.query.spi.HQLQueryPlan.<init>(HQLQueryPlan.java:115)
	at org.hibernate.engine.query.spi.HQLQueryPlan.<init>(HQLQueryPlan.java:77)
	at org.hibernate.engine.query.spi.QueryPlanCache.getHQLQueryPlan(QueryPlanCache.java:153)
	at org.hibernate.internal.AbstractSharedSessionContract.getQueryPlan(AbstractSharedSessionContract.java:553)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:662)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:103)
	at com.nsksoft.spring.hibernate.repositry.SpringRepositry.get_User_info(SpringRepositry.java:41)
	at com.nsksoft.spring.hibernate.service.ServiceImpl.getUser(ServiceImpl.java:29)
	at com.nsksoft.spring.hibernate.client.App.main(App.java:37)
=========Executing the Main()=====================
Came inside the addDataSource and adding the Connection Properties
returning the datasource object
Sessionfactory Object is Created adding the Hibernate properties and Mapping files
Logging Provider: org.jboss.logging.Log4jLoggerProvider
Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
HHH000412: Hibernate Core {5.2.16.Final}
HHH000206: hibernate.properties not found
returning the sessionFactory
Building session factory using internal StandardServiceRegistryBuilder
Overriding existing service binding [org.hibernate.secure.spi.JaccService]
Building session factory using provided StandardServiceRegistry
Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
Adding type registration boolean -> org.hibernate.type.BooleanType@609db43b
Adding type registration boolean -> org.hibernate.type.BooleanType@609db43b
Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@609db43b
Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@6497b078
Adding type registration true_false -> org.hibernate.type.TrueFalseType@5f683daf
Adding type registration yes_no -> org.hibernate.type.YesNoType@76f2bbc1
Adding type registration byte -> org.hibernate.type.ByteType@2e1d27ba
Adding type registration byte -> org.hibernate.type.ByteType@2e1d27ba
Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@2e1d27ba
Adding type registration character -> org.hibernate.type.CharacterType@44a7bfbc
Adding type registration char -> org.hibernate.type.CharacterType@44a7bfbc
Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@44a7bfbc
Adding type registration short -> org.hibernate.type.ShortType@2beee7ff
Adding type registration short -> org.hibernate.type.ShortType@2beee7ff
Adding type registration java.lang.Short -> org.hibernate.type.ShortType@2beee7ff
Adding type registration integer -> org.hibernate.type.IntegerType@3541cb24
Adding type registration int -> org.hibernate.type.IntegerType@3541cb24
Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@3541cb24
Adding type registration long -> org.hibernate.type.LongType@3315d2d7
Adding type registration long -> org.hibernate.type.LongType@3315d2d7
Adding type registration java.lang.Long -> org.hibernate.type.LongType@3315d2d7
Adding type registration float -> org.hibernate.type.FloatType@4da4253
Adding type registration float -> org.hibernate.type.FloatType@4da4253
Adding type registration java.lang.Float -> org.hibernate.type.FloatType@4da4253
Adding type registration double -> org.hibernate.type.DoubleType@4cc8eb05
Adding type registration double -> org.hibernate.type.DoubleType@4cc8eb05
Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@4cc8eb05
Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@3246fb96
Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@3246fb96
Adding type registration big_integer -> org.hibernate.type.BigIntegerType@49dc7102
Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@49dc7102
Adding type registration string -> org.hibernate.type.StringType@34f7cfd9
Adding type registration java.lang.String -> org.hibernate.type.StringType@34f7cfd9
Adding type registration nstring -> org.hibernate.type.StringNVarcharType@55536d9e
Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@2e55dd0c
Adding type registration url -> org.hibernate.type.UrlType@69e1dd28
Adding type registration java.net.URL -> org.hibernate.type.UrlType@69e1dd28
Adding type registration Duration -> org.hibernate.type.DurationType@67080771
Adding type registration java.time.Duration -> org.hibernate.type.DurationType@67080771
Adding type registration Instant -> org.hibernate.type.InstantType@2accdbb5
Adding type registration java.time.Instant -> org.hibernate.type.InstantType@2accdbb5
Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@27ff5d15
Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@27ff5d15
Adding type registration LocalDate -> org.hibernate.type.LocalDateType@1cbb87f3
Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@1cbb87f3
Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@10163d6
Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@10163d6
Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@247d8ae
Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@247d8ae
Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@223aa2f7
Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@223aa2f7
Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@33990a0c
Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@33990a0c
Adding type registration date -> org.hibernate.type.DateType@24fcf36f
Adding type registration java.sql.Date -> org.hibernate.type.DateType@24fcf36f
Adding type registration time -> org.hibernate.type.TimeType@2b48a640
Adding type registration java.sql.Time -> org.hibernate.type.TimeType@2b48a640
Adding type registration timestamp -> org.hibernate.type.TimestampType@4bb33f74
Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@4bb33f74
Adding type registration java.util.Date -> org.hibernate.type.TimestampType@4bb33f74
Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@3d5c822d
Adding type registration calendar -> org.hibernate.type.CalendarType@4d5b6aac
Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@4d5b6aac
Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@4d5b6aac
Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@429bffaa
Adding type registration locale -> org.hibernate.type.LocaleType@28f3b248
Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@28f3b248
Adding type registration currency -> org.hibernate.type.CurrencyType@57d7f8ca
Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@57d7f8ca
Adding type registration timezone -> org.hibernate.type.TimeZoneType@662b4c69
Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@662b4c69
Adding type registration class -> org.hibernate.type.ClassType@3d6f0054
Adding type registration java.lang.Class -> org.hibernate.type.ClassType@3d6f0054
Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@71def8f8
Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@71def8f8
Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@53fdffa1
Adding type registration binary -> org.hibernate.type.BinaryType@3232a28a
Adding type registration byte[] -> org.hibernate.type.BinaryType@3232a28a
Adding type registration [B -> org.hibernate.type.BinaryType@3232a28a
Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@6da21078
Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@6da21078
Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@6da21078
Adding type registration row_version -> org.hibernate.type.RowVersionType@20ccf40b
Adding type registration image -> org.hibernate.type.ImageType@47987356
Adding type registration characters -> org.hibernate.type.CharArrayType@611889f4
Adding type registration char[] -> org.hibernate.type.CharArrayType@611889f4
Adding type registration [C -> org.hibernate.type.CharArrayType@611889f4
Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@1a18644
Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@1a18644
Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@1a18644
Adding type registration text -> org.hibernate.type.TextType@4738a206
Adding type registration ntext -> org.hibernate.type.NTextType@618425b5
Adding type registration blob -> org.hibernate.type.BlobType@342c38f8
Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@342c38f8
Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@485966cc
Adding type registration clob -> org.hibernate.type.ClobType@1de5f259
Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@1de5f259
Adding type registration nclob -> org.hibernate.type.NClobType@71a8adcf
Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@71a8adcf
Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@659499f1
Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@201a4587
Adding type registration serializable -> org.hibernate.type.SerializableType@27f981c6
Adding type registration object -> org.hibernate.type.ObjectType@48aca48b
Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@48aca48b
Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@506ae4d4
Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@7d4f9aae
Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@72e5a8e
Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@54e1c68b
Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@53aac487
Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@52b1beb6
Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@273e7444
Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@7db12bb6
Database ->
       name : MySQL
    version : 5.7.18-log
      major : 5
      minor : 7
Driver ->
       name : MySQL Connector Java
    version : mysql-connector-java-5.1.45 ( Revision: 9131eefa398531c7dc98776e8a3fe839e544c5b2 )
      major : 5
      minor : 1
JDBC version : 4.0
HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
JDBC driver metadata reported database stores quoted identifiers in more than one case
IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
Binding entity from annotated class: com.nsksoft.spring.hibernate.bean.User
Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
Import with entity name User
Bind entity com.nsksoft.spring.hibernate.bean.User on table UserDetails
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=user_id, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property user_id with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:user_id]
building SimpleValue for user_id
Building property user_id
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=country, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property country with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:country]
building SimpleValue for country
Building property country
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=dob, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property dob with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:dob]
building SimpleValue for dob
Building property dob
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=email, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property email with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:email]
building SimpleValue for email
Building property email
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=first_name, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property first_name with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:first_name]
building SimpleValue for first_name
Building property first_name
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=gender, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property gender with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:gender]
building SimpleValue for gender
Building property gender
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=last_name, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property last_name with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:last_name]
building SimpleValue for last_name
Building property last_name
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=marital_status, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property marital_status with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:marital_status]
building SimpleValue for marital_status
Building property marital_status
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=mobile, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property mobile with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:mobile]
building SimpleValue for mobile
Building property mobile
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=pass_word, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property password with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:password]
building SimpleValue for password
Building property password
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=permanent_adreess, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property permanent_adreess with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:permanent_adreess]
building SimpleValue for permanent_adreess
Building property permanent_adreess
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=pincode, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property pincode with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:pincode]
building SimpleValue for pincode
Building property pincode
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=present_address, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property present_address with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:present_address]
building SimpleValue for present_address
Building property present_address
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=state, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property state with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:state]
building SimpleValue for state
Building property state
Starting fillSimpleValue for user_id
Starting fillSimpleValue for country
Starting fillSimpleValue for dob
Starting fillSimpleValue for email
Starting fillSimpleValue for first_name
Starting fillSimpleValue for gender
Starting fillSimpleValue for last_name
Starting fillSimpleValue for marital_status
Starting fillSimpleValue for mobile
Starting fillSimpleValue for password
Starting fillSimpleValue for permanent_adreess
Starting fillSimpleValue for pincode
Starting fillSimpleValue for present_address
Starting fillSimpleValue for state
Forcing column [user_id] to be non-null as it is part of the primary key for table [userdetails]
Building session factory
SessionFactory name : null
Automatic flush during beforeCompletion(): enabled
Automatic session close at end of transaction: disabled
Statistics: disabled
Deleted entity synthetic identifier rollback: disabled
Default entity-mode: pojo
Check Nullability in Core (should be disabled when Bean Validation is on): enabled
Allow initialization of lazy state outside session : disabled
Using BatchFetchStyle : LEGACY
Default batch fetch size: -1
Maximum outer join fetch depth: 2
Default null ordering: NONE
Order SQL updates by primary key: disabled
Order SQL inserts for batching: disabled
multi-tenancy strategy : NONE
JTA Track by Thread: enabled
Query language substitutions: {}
JPA query language strict compliance: disabled
Named query checking : enabled
Second-level cache: enabled
Second-level query cache: disabled
Second-level query cache factory: org.hibernate.cache.internal.StandardQueryCacheFactory@2fc6f97f
Second-level cache region prefix: null
Optimize second-level cache for minimal puts: disabled
Structured second-level cache entries: disabled
Second-level cache direct-reference entries: disabled
Automatic eviction of collection cache: disabled
JDBC batch size: 15
JDBC batch updates for versioned data: enabled
Scrollable result sets: enabled
Wrap result sets: disabled
JDBC3 getGeneratedKeys(): enabled
JDBC result set fetch size: null
Connection release mode: ON_CLOSE
Generate SQL with comments: disabled
Session factory constructed with filter configurations : {}
Instantiating session factory with properties: {sun.desktop=windows, awt.toolkit=sun.awt.windows.WToolkit, file.encoding.pkg=sun.io, java.specification.version=1.8, hibernate.connection.handling_mode=DELAYED_ACQUISITION_AND_HOLD, sun.cpu.isalist=amd64, sun.jnu.encoding=Cp1252, hibernate.dialect=org.hibernate.dialect.MySQL5Dialect, java.class.path=C:\Program Files\Java\jre1.8.0_151\lib\resources.jar;C:\Program Files\Java\jre1.8.0_151\lib\rt.jar;C:\Program Files\Java\jre1.8.0_151\lib\jsse.jar;C:\Program Files\Java\jre1.8.0_151\lib\jce.jar;C:\Program Files\Java\jre1.8.0_151\lib\charsets.jar;C:\Program Files\Java\jre1.8.0_151\lib\jfr.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\access-bridge-64.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\cldrdata.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\dnsns.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\jaccess.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\jfxrt.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\localedata.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\nashorn.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunec.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunjce_provider.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunmscapi.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunpkcs11.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\zipfs.jar;E:\spring_hibernate17\SpringWithHibernate\target\classes;C:\Users\Sajjad\.m2\repository\org\springframework\spring-context\5.0.6.RELEASE\spring-context-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-aop\5.0.6.RELEASE\spring-aop-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-beans\5.0.6.RELEASE\spring-beans-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-core\5.0.6.RELEASE\spring-core-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-jcl\5.0.6.RELEASE\spring-jcl-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-expression\5.0.6.RELEASE\spring-expression-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-orm\4.3.14.RELEASE\spring-orm-4.3.14.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-jdbc\4.3.14.RELEASE\spring-jdbc-4.3.14.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-tx\4.3.14.RELEASE\spring-tx-4.3.14.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\hibernate\hibernate-core\5.2.16.Final\hibernate-core-5.2.16.Final.jar;C:\Users\Sajjad\.m2\repository\org\jboss\logging\jboss-logging\3.3.1.Final\jboss-logging-3.3.1.Final.jar;C:\Users\Sajjad\.m2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;C:\Users\Sajjad\.m2\repository\org\javassist\javassist\3.22.0-GA\javassist-3.22.0-GA.jar;C:\Users\Sajjad\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\Sajjad\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.0.1.Final\jboss-transaction-api_1.2_spec-1.0.1.Final.jar;C:\Users\Sajjad\.m2\repository\org\jboss\jandex\2.0.3.Final\jandex-2.0.3.Final.jar;C:\Users\Sajjad\.m2\repository\com\fasterxml\classmate\1.3.0\classmate-1.3.0.jar;C:\Users\Sajjad\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;C:\Users\Sajjad\.m2\repository\org\hibernate\common\hibernate-commons-annotations\5.0.1.Final\hibernate-commons-annotations-5.0.1.Final.jar;C:\Users\Sajjad\.m2\repository\mysql\mysql-connector-java\5.1.45\mysql-connector-java-5.1.45.jar, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=http://java.oracle.com/, user.timezone=Asia/Calcutta, os.name=Windows 10, java.vm.specification.version=1.8, user.country=IN, sun.java.launcher=SUN_STANDARD, sun.boot.library.path=C:\Program Files\Java\jre1.8.0_151\bin, sun.java.command=com.nsksoft.spring.hibernate.client.App, sun.cpu.endian=little, user.home=C:\Users\Sajjad, user.language=en, java.specification.vendor=Oracle Corporation, java.home=C:\Program Files\Java\jre1.8.0_151, file.separator=\, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, sun.boot.class.path=C:\Program Files\Java\jre1.8.0_151\lib\resources.jar;C:\Program Files\Java\jre1.8.0_151\lib\rt.jar;C:\Program Files\Java\jre1.8.0_151\lib\sunrsasign.jar;C:\Program Files\Java\jre1.8.0_151\lib\jsse.jar;C:\Program Files\Java\jre1.8.0_151\lib\jce.jar;C:\Program Files\Java\jre1.8.0_151\lib\charsets.jar;C:\Program Files\Java\jre1.8.0_151\lib\jfr.jar;C:\Program Files\Java\jre1.8.0_151\classes, hibernate.hbm2ddl.auto=update, user.script=, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=1.8.0_151-b12, user.name=Sajjad, path.separator=;, os.version=10.0, java.endorsed.dirs=C:\Program Files\Java\jre1.8.0_151\lib\endorsed, java.runtime.name=Java(TM) SE Runtime Environment, file.encoding=UTF-8, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.show_sql=true, hibernate.classLoaders=[sun.misc.Launcher$AppClassLoader@2a139a55], hibernate.current_session_context_class=org.springframework.orm.hibernate5.SpringSessionContext, java.vendor.url.bug=http://bugreport.sun.com/bugreport/, java.io.tmpdir=C:\Users\Sajjad\AppData\Local\Temp\, java.version=1.8.0_151, user.dir=E:\spring_hibernate17\SpringWithHibernate, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.os.patch.level=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@3bd418e4, java.library.path=C:\Program Files\Java\jre1.8.0_151\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:/Program Files/Java/jre1.8.0_151/bin/server;C:/Program Files/Java/jre1.8.0_151/bin;C:/Program Files/Java/jre1.8.0_151/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\Program Files\MySQL\MySQL Utilities 1.6\;"C:\Program Files\Java\jdk1.8.0_121\bin;";C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Git\cmd;C:\Users\Sajjad\AppData\Local\Microsoft\WindowsApps;C:\Users\Sajjad\AppData\Local\GitHubDesktop\bin;%USERPROFILE%\AppData\Local\Microsoft\WindowsApps;;E:\Softwares\spring-tool-suite-3.9.2.RELEASE-e4.7.2-win32-x86_64\sts-bundle\sts-3.9.2.RELEASE;;., java.vm.info=mixed mode, java.vendor=Oracle Corporation, java.vm.version=25.151-b12, hibernate.bytecode.use_reflection_optimizer=false, hibernate.connection.datasource=org.springframework.jdbc.datasource.DriverManagerDataSource@4b168fa9, java.ext.dirs=C:\Program Files\Java\jre1.8.0_151\lib\ext;C:\WINDOWS\Sun\Java\lib\ext, sun.io.unicode.encoding=UnicodeLittle, java.class.version=52.0}
Skipping JACC integration as it was not enabled
Instantiated session factory
Not known whether passed class name [com.nsksoft.spring.hibernate.bean.User] is safe
No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.nsksoft.spring.hibernate.bean.User
Not known whether passed class name [com.nsksoft.spring.hibernate.bean.User] is safe
No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.nsksoft.spring.hibernate.bean.User
Static SQL for entity: com.nsksoft.spring.hibernate.bean.User
 Version select: select user_id from UserDetails where user_id =?
 Snapshot select: select user_.user_id, user_.country as country2_0_, user_.dob as dob3_0_, user_.email as email4_0_, user_.first_name as first_na5_0_, user_.gender as gender6_0_, user_.last_name as last_nam7_0_, user_.marital_status as marital_8_0_, user_.mobile as mobile9_0_, user_.pass_word as pass_wo10_0_, user_.permanent_adreess as permane11_0_, user_.pincode as pincode12_0_, user_.present_address as present13_0_, user_.state as state14_0_ from UserDetails user_ where user_.user_id=?
 Insert 0: insert into UserDetails (country, dob, email, first_name, gender, last_name, marital_status, mobile, pass_word, permanent_adreess, pincode, present_address, state, user_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
 Update 0: update UserDetails set country=?, dob=?, email=?, first_name=?, gender=?, last_name=?, marital_status=?, mobile=?, pass_word=?, permanent_adreess=?, pincode=?, present_address=?, state=? where user_id=?
 Delete 0: delete from UserDetails where user_id=?
 Identity insert: insert into UserDetails (country, dob, email, first_name, gender, last_name, marital_status, mobile, pass_word, permanent_adreess, pincode, present_address, state) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@76ba13c]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [NONE]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6c67e137]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [READ]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@191ae03f]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [UPGRADE]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@53ab0286]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [UPGRADE_NOWAIT]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2d10e0b1]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [UPGRADE_SKIPLOCKED]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@172ca72b]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [FORCE]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@71e5f61d]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [PESSIMISTIC_READ]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? lock in share mode
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5e8f9e2d]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [PESSIMISTIC_WRITE]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@fd46303]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4204541c]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [OPTIMISTIC]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4602c2a9]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
Static select for action ACTION_MERGE on entity com.nsksoft.spring.hibernate.bean.User: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
Static select for action ACTION_REFRESH on entity com.nsksoft.spring.hibernate.bean.User: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
No alter strings for table : UserDetails
No JtaPlatform was specified, checking resolver
No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
Checking 0 named HQL queries
Checking 0 named SQL queries
Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@578524c3
Registering SessionFactory: 95be4bb0-6bd6-4fe2-a049-3b30f5300b5d (<unnamed>)
Not binding SessionFactory to JNDI, no JNDI name configured
returning the Respositry
Statistics initialized [enabled=false]
QueryTranslatorFactory : org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory@7a34b7b8
HHH000397: Using ASTQueryTranslatorFactory
parse() - HQL: from com.nsksoft.spring.hibernate.bean.User u
throwQueryException() : no errors
--- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[DOT] Node: '.'
             |  |  |  |  +-[DOT] Node: '.'
             |  |  |  |  |  +-[IDENT] Node: 'com'
             |  |  |  |  |  \-[IDENT] Node: 'nsksoft'
             |  |  |  |  \-[IDENT] Node: 'spring'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'bean'
             |  \-[IDENT] Node: 'User'
             \-[ALIAS] Node: 'u'

select << begin [level=1, statement=select]
FromClause{level=1} : com.nsksoft.spring.hibernate.bean.User (u) -> user0_
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( FromClause{level=1} UserDetails user0_ ) )
Derived SELECT clause created.
Using FROM fragment [UserDetails user0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (UserDetails)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user0_.user_id as user_id1_0_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=u,role=null,tableName=UserDetails,tableAlias=user0_,origin=null,columns={,className=com.nsksoft.spring.hibernate.bean.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user0_.country as country2_0_, user0_.dob as dob3_0_, user0_.email as email4_0_, user0_.first_name as first_na5_0_, user0_.gender as gender6_0_, user0_.last_name as last_nam7_0_, user0_.marital_status as marital_8_0_, user0_.mobile as mobile9_0_, user0_.pass_word as pass_wo10_0_, user0_.permanent_adreess as permane11_0_, user0_.pincode as pincode12_0_, user0_.present_address as present13_0_, user0_.state as state14_0_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[u], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'UserDetails user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=u,role=null,tableName=UserDetails,tableAlias=user0_,origin=null,columns={,className=com.nsksoft.spring.hibernate.bean.User}}

throwQueryException() : no errors
HQL: from com.nsksoft.spring.hibernate.bean.User u
SQL: select user0_.user_id as user_id1_0_, user0_.country as country2_0_, user0_.dob as dob3_0_, user0_.email as email4_0_, user0_.first_name as first_na5_0_, user0_.gender as gender6_0_, user0_.last_name as last_nam7_0_, user0_.marital_status as marital_8_0_, user0_.mobile as mobile9_0_, user0_.pass_word as pass_wo10_0_, user0_.permanent_adreess as permane11_0_, user0_.pincode as pincode12_0_, user0_.present_address as present13_0_, user0_.state as state14_0_ from UserDetails user0_
throwQueryException() : no errors
select user0_.user_id as user_id1_0_, user0_.country as country2_0_, user0_.dob as dob3_0_, user0_.email as email4_0_, user0_.first_name as first_na5_0_, user0_.gender as gender6_0_, user0_.last_name as last_nam7_0_, user0_.marital_status as marital_8_0_, user0_.mobile as mobile9_0_, user0_.pass_word as pass_wo10_0_, user0_.permanent_adreess as permane11_0_, user0_.pincode as pincode12_0_, user0_.present_address as present13_0_, user0_.state as state14_0_ from UserDetails user0_
Result set row: 0
Result row: EntityKey[com.nsksoft.spring.hibernate.bean.User#1]
Result set row: 1
Result row: EntityKey[com.nsksoft.spring.hibernate.bean.User#2]
Result set row: 2
Result row: EntityKey[com.nsksoft.spring.hibernate.bean.User#3]
Resolving associations for [com.nsksoft.spring.hibernate.bean.User#1]
Done materializing entity [com.nsksoft.spring.hibernate.bean.User#1]
Resolving associations for [com.nsksoft.spring.hibernate.bean.User#2]
Done materializing entity [com.nsksoft.spring.hibernate.bean.User#2]
Resolving associations for [com.nsksoft.spring.hibernate.bean.User#3]
Done materializing entity [com.nsksoft.spring.hibernate.bean.User#3]
=========Executing the Main()=====================
Came inside the addDataSource and adding the Connection Properties
returning the datasource object
Sessionfactory Object is Created adding the Hibernate properties and Mapping files
Logging Provider: org.jboss.logging.Log4jLoggerProvider
Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
HHH000412: Hibernate Core {5.2.16.Final}
HHH000206: hibernate.properties not found
returning the sessionFactory
Building session factory using internal StandardServiceRegistryBuilder
Overriding existing service binding [org.hibernate.secure.spi.JaccService]
Building session factory using provided StandardServiceRegistry
Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
Adding type registration boolean -> org.hibernate.type.BooleanType@609db43b
Adding type registration boolean -> org.hibernate.type.BooleanType@609db43b
Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@609db43b
Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@6497b078
Adding type registration true_false -> org.hibernate.type.TrueFalseType@5f683daf
Adding type registration yes_no -> org.hibernate.type.YesNoType@76f2bbc1
Adding type registration byte -> org.hibernate.type.ByteType@2e1d27ba
Adding type registration byte -> org.hibernate.type.ByteType@2e1d27ba
Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@2e1d27ba
Adding type registration character -> org.hibernate.type.CharacterType@44a7bfbc
Adding type registration char -> org.hibernate.type.CharacterType@44a7bfbc
Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@44a7bfbc
Adding type registration short -> org.hibernate.type.ShortType@2beee7ff
Adding type registration short -> org.hibernate.type.ShortType@2beee7ff
Adding type registration java.lang.Short -> org.hibernate.type.ShortType@2beee7ff
Adding type registration integer -> org.hibernate.type.IntegerType@3541cb24
Adding type registration int -> org.hibernate.type.IntegerType@3541cb24
Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@3541cb24
Adding type registration long -> org.hibernate.type.LongType@3315d2d7
Adding type registration long -> org.hibernate.type.LongType@3315d2d7
Adding type registration java.lang.Long -> org.hibernate.type.LongType@3315d2d7
Adding type registration float -> org.hibernate.type.FloatType@4da4253
Adding type registration float -> org.hibernate.type.FloatType@4da4253
Adding type registration java.lang.Float -> org.hibernate.type.FloatType@4da4253
Adding type registration double -> org.hibernate.type.DoubleType@4cc8eb05
Adding type registration double -> org.hibernate.type.DoubleType@4cc8eb05
Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@4cc8eb05
Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@3246fb96
Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@3246fb96
Adding type registration big_integer -> org.hibernate.type.BigIntegerType@49dc7102
Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@49dc7102
Adding type registration string -> org.hibernate.type.StringType@34f7cfd9
Adding type registration java.lang.String -> org.hibernate.type.StringType@34f7cfd9
Adding type registration nstring -> org.hibernate.type.StringNVarcharType@55536d9e
Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@2e55dd0c
Adding type registration url -> org.hibernate.type.UrlType@69e1dd28
Adding type registration java.net.URL -> org.hibernate.type.UrlType@69e1dd28
Adding type registration Duration -> org.hibernate.type.DurationType@67080771
Adding type registration java.time.Duration -> org.hibernate.type.DurationType@67080771
Adding type registration Instant -> org.hibernate.type.InstantType@2accdbb5
Adding type registration java.time.Instant -> org.hibernate.type.InstantType@2accdbb5
Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@27ff5d15
Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@27ff5d15
Adding type registration LocalDate -> org.hibernate.type.LocalDateType@1cbb87f3
Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@1cbb87f3
Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@10163d6
Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@10163d6
Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@247d8ae
Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@247d8ae
Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@223aa2f7
Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@223aa2f7
Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@33990a0c
Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@33990a0c
Adding type registration date -> org.hibernate.type.DateType@24fcf36f
Adding type registration java.sql.Date -> org.hibernate.type.DateType@24fcf36f
Adding type registration time -> org.hibernate.type.TimeType@2b48a640
Adding type registration java.sql.Time -> org.hibernate.type.TimeType@2b48a640
Adding type registration timestamp -> org.hibernate.type.TimestampType@4bb33f74
Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@4bb33f74
Adding type registration java.util.Date -> org.hibernate.type.TimestampType@4bb33f74
Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@3d5c822d
Adding type registration calendar -> org.hibernate.type.CalendarType@4d5b6aac
Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@4d5b6aac
Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@4d5b6aac
Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@429bffaa
Adding type registration locale -> org.hibernate.type.LocaleType@28f3b248
Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@28f3b248
Adding type registration currency -> org.hibernate.type.CurrencyType@57d7f8ca
Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@57d7f8ca
Adding type registration timezone -> org.hibernate.type.TimeZoneType@662b4c69
Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@662b4c69
Adding type registration class -> org.hibernate.type.ClassType@3d6f0054
Adding type registration java.lang.Class -> org.hibernate.type.ClassType@3d6f0054
Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@71def8f8
Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@71def8f8
Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@53fdffa1
Adding type registration binary -> org.hibernate.type.BinaryType@3232a28a
Adding type registration byte[] -> org.hibernate.type.BinaryType@3232a28a
Adding type registration [B -> org.hibernate.type.BinaryType@3232a28a
Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@6da21078
Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@6da21078
Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@6da21078
Adding type registration row_version -> org.hibernate.type.RowVersionType@20ccf40b
Adding type registration image -> org.hibernate.type.ImageType@47987356
Adding type registration characters -> org.hibernate.type.CharArrayType@611889f4
Adding type registration char[] -> org.hibernate.type.CharArrayType@611889f4
Adding type registration [C -> org.hibernate.type.CharArrayType@611889f4
Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@1a18644
Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@1a18644
Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@1a18644
Adding type registration text -> org.hibernate.type.TextType@4738a206
Adding type registration ntext -> org.hibernate.type.NTextType@618425b5
Adding type registration blob -> org.hibernate.type.BlobType@342c38f8
Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@342c38f8
Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@485966cc
Adding type registration clob -> org.hibernate.type.ClobType@1de5f259
Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@1de5f259
Adding type registration nclob -> org.hibernate.type.NClobType@71a8adcf
Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@71a8adcf
Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@659499f1
Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@201a4587
Adding type registration serializable -> org.hibernate.type.SerializableType@27f981c6
Adding type registration object -> org.hibernate.type.ObjectType@48aca48b
Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@48aca48b
Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@506ae4d4
Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@7d4f9aae
Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@72e5a8e
Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@54e1c68b
Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@53aac487
Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@52b1beb6
Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@273e7444
Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@7db12bb6
Database ->
       name : MySQL
    version : 5.7.18-log
      major : 5
      minor : 7
Driver ->
       name : MySQL Connector Java
    version : mysql-connector-java-5.1.45 ( Revision: 9131eefa398531c7dc98776e8a3fe839e544c5b2 )
      major : 5
      minor : 1
JDBC version : 4.0
HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
JDBC driver metadata reported database stores quoted identifiers in more than one case
IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
Binding entity from annotated class: com.nsksoft.spring.hibernate.bean.User
Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
Import with entity name User
Bind entity com.nsksoft.spring.hibernate.bean.User on table UserDetails
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=user_id, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property user_id with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:user_id]
building SimpleValue for user_id
Building property user_id
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=country, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property country with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:country]
building SimpleValue for country
Building property country
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=dob, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property dob with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:dob]
building SimpleValue for dob
Building property dob
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=email, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property email with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:email]
building SimpleValue for email
Building property email
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=first_name, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property first_name with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:first_name]
building SimpleValue for first_name
Building property first_name
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=gender, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property gender with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:gender]
building SimpleValue for gender
Building property gender
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=last_name, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property last_name with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:last_name]
building SimpleValue for last_name
Building property last_name
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=marital_status, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property marital_status with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:marital_status]
building SimpleValue for marital_status
Building property marital_status
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=mobile, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property mobile with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:mobile]
building SimpleValue for mobile
Building property mobile
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=pass_word, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property password with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:password]
building SimpleValue for password
Building property password
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=permanent_adreess, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property permanent_adreess with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:permanent_adreess]
building SimpleValue for permanent_adreess
Building property permanent_adreess
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=pincode, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property pincode with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:pincode]
building SimpleValue for pincode
Building property pincode
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=present_address, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property present_address with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:present_address]
building SimpleValue for present_address
Building property present_address
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=state, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property state with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:state]
building SimpleValue for state
Building property state
Starting fillSimpleValue for user_id
Starting fillSimpleValue for country
Starting fillSimpleValue for dob
Starting fillSimpleValue for email
Starting fillSimpleValue for first_name
Starting fillSimpleValue for gender
Starting fillSimpleValue for last_name
Starting fillSimpleValue for marital_status
Starting fillSimpleValue for mobile
Starting fillSimpleValue for password
Starting fillSimpleValue for permanent_adreess
Starting fillSimpleValue for pincode
Starting fillSimpleValue for present_address
Starting fillSimpleValue for state
Forcing column [user_id] to be non-null as it is part of the primary key for table [userdetails]
Building session factory
SessionFactory name : null
Automatic flush during beforeCompletion(): enabled
Automatic session close at end of transaction: disabled
Statistics: disabled
Deleted entity synthetic identifier rollback: disabled
Default entity-mode: pojo
Check Nullability in Core (should be disabled when Bean Validation is on): enabled
Allow initialization of lazy state outside session : disabled
Using BatchFetchStyle : LEGACY
Default batch fetch size: -1
Maximum outer join fetch depth: 2
Default null ordering: NONE
Order SQL updates by primary key: disabled
Order SQL inserts for batching: disabled
multi-tenancy strategy : NONE
JTA Track by Thread: enabled
Query language substitutions: {}
JPA query language strict compliance: disabled
Named query checking : enabled
Second-level cache: enabled
Second-level query cache: disabled
Second-level query cache factory: org.hibernate.cache.internal.StandardQueryCacheFactory@2fc6f97f
Second-level cache region prefix: null
Optimize second-level cache for minimal puts: disabled
Structured second-level cache entries: disabled
Second-level cache direct-reference entries: disabled
Automatic eviction of collection cache: disabled
JDBC batch size: 15
JDBC batch updates for versioned data: enabled
Scrollable result sets: enabled
Wrap result sets: disabled
JDBC3 getGeneratedKeys(): enabled
JDBC result set fetch size: null
Connection release mode: ON_CLOSE
Generate SQL with comments: disabled
Session factory constructed with filter configurations : {}
Instantiating session factory with properties: {sun.desktop=windows, awt.toolkit=sun.awt.windows.WToolkit, file.encoding.pkg=sun.io, java.specification.version=1.8, hibernate.connection.handling_mode=DELAYED_ACQUISITION_AND_HOLD, sun.cpu.isalist=amd64, sun.jnu.encoding=Cp1252, hibernate.dialect=org.hibernate.dialect.MySQL5Dialect, java.class.path=C:\Program Files\Java\jre1.8.0_151\lib\resources.jar;C:\Program Files\Java\jre1.8.0_151\lib\rt.jar;C:\Program Files\Java\jre1.8.0_151\lib\jsse.jar;C:\Program Files\Java\jre1.8.0_151\lib\jce.jar;C:\Program Files\Java\jre1.8.0_151\lib\charsets.jar;C:\Program Files\Java\jre1.8.0_151\lib\jfr.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\access-bridge-64.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\cldrdata.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\dnsns.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\jaccess.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\jfxrt.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\localedata.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\nashorn.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunec.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunjce_provider.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunmscapi.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunpkcs11.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\zipfs.jar;E:\spring_hibernate17\SpringWithHibernate\target\classes;C:\Users\Sajjad\.m2\repository\org\springframework\spring-context\5.0.6.RELEASE\spring-context-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-aop\5.0.6.RELEASE\spring-aop-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-beans\5.0.6.RELEASE\spring-beans-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-core\5.0.6.RELEASE\spring-core-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-jcl\5.0.6.RELEASE\spring-jcl-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-expression\5.0.6.RELEASE\spring-expression-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-orm\4.3.14.RELEASE\spring-orm-4.3.14.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-jdbc\4.3.14.RELEASE\spring-jdbc-4.3.14.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-tx\4.3.14.RELEASE\spring-tx-4.3.14.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\hibernate\hibernate-core\5.2.16.Final\hibernate-core-5.2.16.Final.jar;C:\Users\Sajjad\.m2\repository\org\jboss\logging\jboss-logging\3.3.1.Final\jboss-logging-3.3.1.Final.jar;C:\Users\Sajjad\.m2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;C:\Users\Sajjad\.m2\repository\org\javassist\javassist\3.22.0-GA\javassist-3.22.0-GA.jar;C:\Users\Sajjad\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\Sajjad\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.0.1.Final\jboss-transaction-api_1.2_spec-1.0.1.Final.jar;C:\Users\Sajjad\.m2\repository\org\jboss\jandex\2.0.3.Final\jandex-2.0.3.Final.jar;C:\Users\Sajjad\.m2\repository\com\fasterxml\classmate\1.3.0\classmate-1.3.0.jar;C:\Users\Sajjad\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;C:\Users\Sajjad\.m2\repository\org\hibernate\common\hibernate-commons-annotations\5.0.1.Final\hibernate-commons-annotations-5.0.1.Final.jar;C:\Users\Sajjad\.m2\repository\mysql\mysql-connector-java\5.1.45\mysql-connector-java-5.1.45.jar, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=http://java.oracle.com/, user.timezone=Asia/Calcutta, os.name=Windows 10, java.vm.specification.version=1.8, user.country=IN, sun.java.launcher=SUN_STANDARD, sun.boot.library.path=C:\Program Files\Java\jre1.8.0_151\bin, sun.java.command=com.nsksoft.spring.hibernate.client.App, sun.cpu.endian=little, user.home=C:\Users\Sajjad, user.language=en, java.specification.vendor=Oracle Corporation, java.home=C:\Program Files\Java\jre1.8.0_151, file.separator=\, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, sun.boot.class.path=C:\Program Files\Java\jre1.8.0_151\lib\resources.jar;C:\Program Files\Java\jre1.8.0_151\lib\rt.jar;C:\Program Files\Java\jre1.8.0_151\lib\sunrsasign.jar;C:\Program Files\Java\jre1.8.0_151\lib\jsse.jar;C:\Program Files\Java\jre1.8.0_151\lib\jce.jar;C:\Program Files\Java\jre1.8.0_151\lib\charsets.jar;C:\Program Files\Java\jre1.8.0_151\lib\jfr.jar;C:\Program Files\Java\jre1.8.0_151\classes, hibernate.hbm2ddl.auto=update, user.script=, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=1.8.0_151-b12, user.name=Sajjad, path.separator=;, os.version=10.0, java.endorsed.dirs=C:\Program Files\Java\jre1.8.0_151\lib\endorsed, java.runtime.name=Java(TM) SE Runtime Environment, file.encoding=UTF-8, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.show_sql=true, hibernate.classLoaders=[sun.misc.Launcher$AppClassLoader@2a139a55], hibernate.current_session_context_class=org.springframework.orm.hibernate5.SpringSessionContext, java.vendor.url.bug=http://bugreport.sun.com/bugreport/, java.io.tmpdir=C:\Users\Sajjad\AppData\Local\Temp\, java.version=1.8.0_151, user.dir=E:\spring_hibernate17\SpringWithHibernate, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.os.patch.level=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@3bd418e4, java.library.path=C:\Program Files\Java\jre1.8.0_151\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:/Program Files/Java/jre1.8.0_151/bin/server;C:/Program Files/Java/jre1.8.0_151/bin;C:/Program Files/Java/jre1.8.0_151/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\Program Files\MySQL\MySQL Utilities 1.6\;"C:\Program Files\Java\jdk1.8.0_121\bin;";C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Git\cmd;C:\Users\Sajjad\AppData\Local\Microsoft\WindowsApps;C:\Users\Sajjad\AppData\Local\GitHubDesktop\bin;%USERPROFILE%\AppData\Local\Microsoft\WindowsApps;;E:\Softwares\spring-tool-suite-3.9.2.RELEASE-e4.7.2-win32-x86_64\sts-bundle\sts-3.9.2.RELEASE;;., java.vm.info=mixed mode, java.vendor=Oracle Corporation, java.vm.version=25.151-b12, hibernate.bytecode.use_reflection_optimizer=false, hibernate.connection.datasource=org.springframework.jdbc.datasource.DriverManagerDataSource@4b168fa9, java.ext.dirs=C:\Program Files\Java\jre1.8.0_151\lib\ext;C:\WINDOWS\Sun\Java\lib\ext, sun.io.unicode.encoding=UnicodeLittle, java.class.version=52.0}
Skipping JACC integration as it was not enabled
Instantiated session factory
Not known whether passed class name [com.nsksoft.spring.hibernate.bean.User] is safe
No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.nsksoft.spring.hibernate.bean.User
Not known whether passed class name [com.nsksoft.spring.hibernate.bean.User] is safe
No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.nsksoft.spring.hibernate.bean.User
Static SQL for entity: com.nsksoft.spring.hibernate.bean.User
 Version select: select user_id from UserDetails where user_id =?
 Snapshot select: select user_.user_id, user_.country as country2_0_, user_.dob as dob3_0_, user_.email as email4_0_, user_.first_name as first_na5_0_, user_.gender as gender6_0_, user_.last_name as last_nam7_0_, user_.marital_status as marital_8_0_, user_.mobile as mobile9_0_, user_.pass_word as pass_wo10_0_, user_.permanent_adreess as permane11_0_, user_.pincode as pincode12_0_, user_.present_address as present13_0_, user_.state as state14_0_ from UserDetails user_ where user_.user_id=?
 Insert 0: insert into UserDetails (country, dob, email, first_name, gender, last_name, marital_status, mobile, pass_word, permanent_adreess, pincode, present_address, state, user_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
 Update 0: update UserDetails set country=?, dob=?, email=?, first_name=?, gender=?, last_name=?, marital_status=?, mobile=?, pass_word=?, permanent_adreess=?, pincode=?, present_address=?, state=? where user_id=?
 Delete 0: delete from UserDetails where user_id=?
 Identity insert: insert into UserDetails (country, dob, email, first_name, gender, last_name, marital_status, mobile, pass_word, permanent_adreess, pincode, present_address, state) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@76ba13c]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [NONE]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6c67e137]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [READ]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@191ae03f]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [UPGRADE]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@53ab0286]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [UPGRADE_NOWAIT]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2d10e0b1]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [UPGRADE_SKIPLOCKED]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@172ca72b]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [FORCE]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@71e5f61d]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [PESSIMISTIC_READ]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? lock in share mode
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5e8f9e2d]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [PESSIMISTIC_WRITE]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@fd46303]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4204541c]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [OPTIMISTIC]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4602c2a9]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
Static select for action ACTION_MERGE on entity com.nsksoft.spring.hibernate.bean.User: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
Static select for action ACTION_REFRESH on entity com.nsksoft.spring.hibernate.bean.User: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
No alter strings for table : UserDetails
No JtaPlatform was specified, checking resolver
No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
Checking 0 named HQL queries
Checking 0 named SQL queries
Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@578524c3
Registering SessionFactory: d0cb03e2-9ec1-4592-9ba5-43fa0771fb7c (<unnamed>)
Not binding SessionFactory to JNDI, no JNDI name configured
returning the Respositry
Statistics initialized [enabled=false]
QueryTranslatorFactory : org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory@7a34b7b8
HHH000397: Using ASTQueryTranslatorFactory
parse() - HQL: from com.nsksoft.spring.hibernate.bean.User u
throwQueryException() : no errors
--- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[DOT] Node: '.'
             |  |  |  |  +-[DOT] Node: '.'
             |  |  |  |  |  +-[IDENT] Node: 'com'
             |  |  |  |  |  \-[IDENT] Node: 'nsksoft'
             |  |  |  |  \-[IDENT] Node: 'spring'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'bean'
             |  \-[IDENT] Node: 'User'
             \-[ALIAS] Node: 'u'

select << begin [level=1, statement=select]
FromClause{level=1} : com.nsksoft.spring.hibernate.bean.User (u) -> user0_
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( FromClause{level=1} UserDetails user0_ ) )
Derived SELECT clause created.
Using FROM fragment [UserDetails user0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (UserDetails)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user0_.user_id as user_id1_0_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=u,role=null,tableName=UserDetails,tableAlias=user0_,origin=null,columns={,className=com.nsksoft.spring.hibernate.bean.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user0_.country as country2_0_, user0_.dob as dob3_0_, user0_.email as email4_0_, user0_.first_name as first_na5_0_, user0_.gender as gender6_0_, user0_.last_name as last_nam7_0_, user0_.marital_status as marital_8_0_, user0_.mobile as mobile9_0_, user0_.pass_word as pass_wo10_0_, user0_.permanent_adreess as permane11_0_, user0_.pincode as pincode12_0_, user0_.present_address as present13_0_, user0_.state as state14_0_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[u], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'UserDetails user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=u,role=null,tableName=UserDetails,tableAlias=user0_,origin=null,columns={,className=com.nsksoft.spring.hibernate.bean.User}}

throwQueryException() : no errors
HQL: from com.nsksoft.spring.hibernate.bean.User u
SQL: select user0_.user_id as user_id1_0_, user0_.country as country2_0_, user0_.dob as dob3_0_, user0_.email as email4_0_, user0_.first_name as first_na5_0_, user0_.gender as gender6_0_, user0_.last_name as last_nam7_0_, user0_.marital_status as marital_8_0_, user0_.mobile as mobile9_0_, user0_.pass_word as pass_wo10_0_, user0_.permanent_adreess as permane11_0_, user0_.pincode as pincode12_0_, user0_.present_address as present13_0_, user0_.state as state14_0_ from UserDetails user0_
throwQueryException() : no errors
select user0_.user_id as user_id1_0_, user0_.country as country2_0_, user0_.dob as dob3_0_, user0_.email as email4_0_, user0_.first_name as first_na5_0_, user0_.gender as gender6_0_, user0_.last_name as last_nam7_0_, user0_.marital_status as marital_8_0_, user0_.mobile as mobile9_0_, user0_.pass_word as pass_wo10_0_, user0_.permanent_adreess as permane11_0_, user0_.pincode as pincode12_0_, user0_.present_address as present13_0_, user0_.state as state14_0_ from UserDetails user0_
Result set row: 0
Result row: EntityKey[com.nsksoft.spring.hibernate.bean.User#1]
Result set row: 1
Result row: EntityKey[com.nsksoft.spring.hibernate.bean.User#2]
Result set row: 2
Result row: EntityKey[com.nsksoft.spring.hibernate.bean.User#3]
Resolving associations for [com.nsksoft.spring.hibernate.bean.User#1]
Done materializing entity [com.nsksoft.spring.hibernate.bean.User#1]
Resolving associations for [com.nsksoft.spring.hibernate.bean.User#2]
Done materializing entity [com.nsksoft.spring.hibernate.bean.User#2]
Resolving associations for [com.nsksoft.spring.hibernate.bean.User#3]
Done materializing entity [com.nsksoft.spring.hibernate.bean.User#3]
=========Executing the Main()=====================
Came inside the addDataSource and adding the Connection Properties
returning the datasource object
Sessionfactory Object is Created adding the Hibernate properties and Mapping files
Logging Provider: org.jboss.logging.Log4jLoggerProvider
Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
HHH000412: Hibernate Core {5.2.16.Final}
HHH000206: hibernate.properties not found
returning the sessionFactory
Building session factory using internal StandardServiceRegistryBuilder
Overriding existing service binding [org.hibernate.secure.spi.JaccService]
Building session factory using provided StandardServiceRegistry
Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
Adding type registration boolean -> org.hibernate.type.BooleanType@609db43b
Adding type registration boolean -> org.hibernate.type.BooleanType@609db43b
Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@609db43b
Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@6497b078
Adding type registration true_false -> org.hibernate.type.TrueFalseType@5f683daf
Adding type registration yes_no -> org.hibernate.type.YesNoType@76f2bbc1
Adding type registration byte -> org.hibernate.type.ByteType@2e1d27ba
Adding type registration byte -> org.hibernate.type.ByteType@2e1d27ba
Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@2e1d27ba
Adding type registration character -> org.hibernate.type.CharacterType@44a7bfbc
Adding type registration char -> org.hibernate.type.CharacterType@44a7bfbc
Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@44a7bfbc
Adding type registration short -> org.hibernate.type.ShortType@2beee7ff
Adding type registration short -> org.hibernate.type.ShortType@2beee7ff
Adding type registration java.lang.Short -> org.hibernate.type.ShortType@2beee7ff
Adding type registration integer -> org.hibernate.type.IntegerType@3541cb24
Adding type registration int -> org.hibernate.type.IntegerType@3541cb24
Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@3541cb24
Adding type registration long -> org.hibernate.type.LongType@3315d2d7
Adding type registration long -> org.hibernate.type.LongType@3315d2d7
Adding type registration java.lang.Long -> org.hibernate.type.LongType@3315d2d7
Adding type registration float -> org.hibernate.type.FloatType@4da4253
Adding type registration float -> org.hibernate.type.FloatType@4da4253
Adding type registration java.lang.Float -> org.hibernate.type.FloatType@4da4253
Adding type registration double -> org.hibernate.type.DoubleType@4cc8eb05
Adding type registration double -> org.hibernate.type.DoubleType@4cc8eb05
Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@4cc8eb05
Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@3246fb96
Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@3246fb96
Adding type registration big_integer -> org.hibernate.type.BigIntegerType@49dc7102
Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@49dc7102
Adding type registration string -> org.hibernate.type.StringType@34f7cfd9
Adding type registration java.lang.String -> org.hibernate.type.StringType@34f7cfd9
Adding type registration nstring -> org.hibernate.type.StringNVarcharType@55536d9e
Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@2e55dd0c
Adding type registration url -> org.hibernate.type.UrlType@69e1dd28
Adding type registration java.net.URL -> org.hibernate.type.UrlType@69e1dd28
Adding type registration Duration -> org.hibernate.type.DurationType@67080771
Adding type registration java.time.Duration -> org.hibernate.type.DurationType@67080771
Adding type registration Instant -> org.hibernate.type.InstantType@2accdbb5
Adding type registration java.time.Instant -> org.hibernate.type.InstantType@2accdbb5
Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@27ff5d15
Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@27ff5d15
Adding type registration LocalDate -> org.hibernate.type.LocalDateType@1cbb87f3
Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@1cbb87f3
Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@10163d6
Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@10163d6
Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@247d8ae
Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@247d8ae
Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@223aa2f7
Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@223aa2f7
Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@33990a0c
Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@33990a0c
Adding type registration date -> org.hibernate.type.DateType@24fcf36f
Adding type registration java.sql.Date -> org.hibernate.type.DateType@24fcf36f
Adding type registration time -> org.hibernate.type.TimeType@2b48a640
Adding type registration java.sql.Time -> org.hibernate.type.TimeType@2b48a640
Adding type registration timestamp -> org.hibernate.type.TimestampType@4bb33f74
Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@4bb33f74
Adding type registration java.util.Date -> org.hibernate.type.TimestampType@4bb33f74
Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@3d5c822d
Adding type registration calendar -> org.hibernate.type.CalendarType@4d5b6aac
Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@4d5b6aac
Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@4d5b6aac
Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@429bffaa
Adding type registration locale -> org.hibernate.type.LocaleType@28f3b248
Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@28f3b248
Adding type registration currency -> org.hibernate.type.CurrencyType@57d7f8ca
Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@57d7f8ca
Adding type registration timezone -> org.hibernate.type.TimeZoneType@662b4c69
Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@662b4c69
Adding type registration class -> org.hibernate.type.ClassType@3d6f0054
Adding type registration java.lang.Class -> org.hibernate.type.ClassType@3d6f0054
Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@71def8f8
Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@71def8f8
Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@53fdffa1
Adding type registration binary -> org.hibernate.type.BinaryType@3232a28a
Adding type registration byte[] -> org.hibernate.type.BinaryType@3232a28a
Adding type registration [B -> org.hibernate.type.BinaryType@3232a28a
Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@6da21078
Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@6da21078
Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@6da21078
Adding type registration row_version -> org.hibernate.type.RowVersionType@20ccf40b
Adding type registration image -> org.hibernate.type.ImageType@47987356
Adding type registration characters -> org.hibernate.type.CharArrayType@611889f4
Adding type registration char[] -> org.hibernate.type.CharArrayType@611889f4
Adding type registration [C -> org.hibernate.type.CharArrayType@611889f4
Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@1a18644
Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@1a18644
Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@1a18644
Adding type registration text -> org.hibernate.type.TextType@4738a206
Adding type registration ntext -> org.hibernate.type.NTextType@618425b5
Adding type registration blob -> org.hibernate.type.BlobType@342c38f8
Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@342c38f8
Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@485966cc
Adding type registration clob -> org.hibernate.type.ClobType@1de5f259
Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@1de5f259
Adding type registration nclob -> org.hibernate.type.NClobType@71a8adcf
Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@71a8adcf
Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@659499f1
Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@201a4587
Adding type registration serializable -> org.hibernate.type.SerializableType@27f981c6
Adding type registration object -> org.hibernate.type.ObjectType@48aca48b
Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@48aca48b
Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@506ae4d4
Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@7d4f9aae
Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@72e5a8e
Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@54e1c68b
Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@53aac487
Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@52b1beb6
Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@273e7444
Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@7db12bb6
Database ->
       name : MySQL
    version : 5.7.18-log
      major : 5
      minor : 7
Driver ->
       name : MySQL Connector Java
    version : mysql-connector-java-5.1.45 ( Revision: 9131eefa398531c7dc98776e8a3fe839e544c5b2 )
      major : 5
      minor : 1
JDBC version : 4.0
HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
JDBC driver metadata reported database stores quoted identifiers in more than one case
IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
Binding entity from annotated class: com.nsksoft.spring.hibernate.bean.User
Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
Import with entity name User
Bind entity com.nsksoft.spring.hibernate.bean.User on table UserDetails
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=user_id, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property user_id with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:user_id]
building SimpleValue for user_id
Building property user_id
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=country, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property country with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:country]
building SimpleValue for country
Building property country
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=dob, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property dob with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:dob]
building SimpleValue for dob
Building property dob
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=email, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property email with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:email]
building SimpleValue for email
Building property email
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=first_name, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property first_name with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:first_name]
building SimpleValue for first_name
Building property first_name
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=gender, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property gender with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:gender]
building SimpleValue for gender
Building property gender
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=last_name, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property last_name with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:last_name]
building SimpleValue for last_name
Building property last_name
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=marital_status, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property marital_status with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:marital_status]
building SimpleValue for marital_status
Building property marital_status
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=mobile, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property mobile with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:mobile]
building SimpleValue for mobile
Building property mobile
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=pass_word, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property password with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:password]
building SimpleValue for password
Building property password
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=permanent_adreess, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property permanent_adreess with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:permanent_adreess]
building SimpleValue for permanent_adreess
Building property permanent_adreess
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=pincode, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property pincode with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:pincode]
building SimpleValue for pincode
Building property pincode
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=present_address, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property present_address with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:present_address]
building SimpleValue for present_address
Building property present_address
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(UserDetails), mappingColumn=state, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property state with lazy=false
Attempting to locate auto-apply AttributeConverter for property [com.nsksoft.spring.hibernate.bean.User:state]
building SimpleValue for state
Building property state
Starting fillSimpleValue for user_id
Starting fillSimpleValue for country
Starting fillSimpleValue for dob
Starting fillSimpleValue for email
Starting fillSimpleValue for first_name
Starting fillSimpleValue for gender
Starting fillSimpleValue for last_name
Starting fillSimpleValue for marital_status
Starting fillSimpleValue for mobile
Starting fillSimpleValue for password
Starting fillSimpleValue for permanent_adreess
Starting fillSimpleValue for pincode
Starting fillSimpleValue for present_address
Starting fillSimpleValue for state
Forcing column [user_id] to be non-null as it is part of the primary key for table [userdetails]
Building session factory
SessionFactory name : null
Automatic flush during beforeCompletion(): enabled
Automatic session close at end of transaction: disabled
Statistics: disabled
Deleted entity synthetic identifier rollback: disabled
Default entity-mode: pojo
Check Nullability in Core (should be disabled when Bean Validation is on): enabled
Allow initialization of lazy state outside session : disabled
Using BatchFetchStyle : LEGACY
Default batch fetch size: -1
Maximum outer join fetch depth: 2
Default null ordering: NONE
Order SQL updates by primary key: disabled
Order SQL inserts for batching: disabled
multi-tenancy strategy : NONE
JTA Track by Thread: enabled
Query language substitutions: {}
JPA query language strict compliance: disabled
Named query checking : enabled
Second-level cache: enabled
Second-level query cache: disabled
Second-level query cache factory: org.hibernate.cache.internal.StandardQueryCacheFactory@2fc6f97f
Second-level cache region prefix: null
Optimize second-level cache for minimal puts: disabled
Structured second-level cache entries: disabled
Second-level cache direct-reference entries: disabled
Automatic eviction of collection cache: disabled
JDBC batch size: 15
JDBC batch updates for versioned data: enabled
Scrollable result sets: enabled
Wrap result sets: disabled
JDBC3 getGeneratedKeys(): enabled
JDBC result set fetch size: null
Connection release mode: ON_CLOSE
Generate SQL with comments: disabled
Session factory constructed with filter configurations : {}
Instantiating session factory with properties: {sun.desktop=windows, awt.toolkit=sun.awt.windows.WToolkit, file.encoding.pkg=sun.io, java.specification.version=1.8, hibernate.connection.handling_mode=DELAYED_ACQUISITION_AND_HOLD, sun.cpu.isalist=amd64, sun.jnu.encoding=Cp1252, hibernate.dialect=org.hibernate.dialect.MySQL5Dialect, java.class.path=C:\Program Files\Java\jre1.8.0_151\lib\resources.jar;C:\Program Files\Java\jre1.8.0_151\lib\rt.jar;C:\Program Files\Java\jre1.8.0_151\lib\jsse.jar;C:\Program Files\Java\jre1.8.0_151\lib\jce.jar;C:\Program Files\Java\jre1.8.0_151\lib\charsets.jar;C:\Program Files\Java\jre1.8.0_151\lib\jfr.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\access-bridge-64.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\cldrdata.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\dnsns.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\jaccess.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\jfxrt.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\localedata.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\nashorn.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunec.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunjce_provider.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunmscapi.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\sunpkcs11.jar;C:\Program Files\Java\jre1.8.0_151\lib\ext\zipfs.jar;E:\spring_hibernate17\SpringWithHibernate\target\classes;C:\Users\Sajjad\.m2\repository\org\springframework\spring-context\5.0.6.RELEASE\spring-context-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-aop\5.0.6.RELEASE\spring-aop-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-beans\5.0.6.RELEASE\spring-beans-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-core\5.0.6.RELEASE\spring-core-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-jcl\5.0.6.RELEASE\spring-jcl-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-expression\5.0.6.RELEASE\spring-expression-5.0.6.RELEASE.jar;C:\Users\Sajjad\.m2\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-orm\4.3.14.RELEASE\spring-orm-4.3.14.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-jdbc\4.3.14.RELEASE\spring-jdbc-4.3.14.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\springframework\spring-tx\4.3.14.RELEASE\spring-tx-4.3.14.RELEASE.jar;C:\Users\Sajjad\.m2\repository\org\hibernate\hibernate-core\5.2.16.Final\hibernate-core-5.2.16.Final.jar;C:\Users\Sajjad\.m2\repository\org\jboss\logging\jboss-logging\3.3.1.Final\jboss-logging-3.3.1.Final.jar;C:\Users\Sajjad\.m2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;C:\Users\Sajjad\.m2\repository\org\javassist\javassist\3.22.0-GA\javassist-3.22.0-GA.jar;C:\Users\Sajjad\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\Sajjad\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.0.1.Final\jboss-transaction-api_1.2_spec-1.0.1.Final.jar;C:\Users\Sajjad\.m2\repository\org\jboss\jandex\2.0.3.Final\jandex-2.0.3.Final.jar;C:\Users\Sajjad\.m2\repository\com\fasterxml\classmate\1.3.0\classmate-1.3.0.jar;C:\Users\Sajjad\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;C:\Users\Sajjad\.m2\repository\org\hibernate\common\hibernate-commons-annotations\5.0.1.Final\hibernate-commons-annotations-5.0.1.Final.jar;C:\Users\Sajjad\.m2\repository\mysql\mysql-connector-java\5.1.45\mysql-connector-java-5.1.45.jar, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=http://java.oracle.com/, user.timezone=Asia/Calcutta, os.name=Windows 10, java.vm.specification.version=1.8, user.country=IN, sun.java.launcher=SUN_STANDARD, sun.boot.library.path=C:\Program Files\Java\jre1.8.0_151\bin, sun.java.command=com.nsksoft.spring.hibernate.client.App, sun.cpu.endian=little, user.home=C:\Users\Sajjad, user.language=en, java.specification.vendor=Oracle Corporation, java.home=C:\Program Files\Java\jre1.8.0_151, file.separator=\, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, sun.boot.class.path=C:\Program Files\Java\jre1.8.0_151\lib\resources.jar;C:\Program Files\Java\jre1.8.0_151\lib\rt.jar;C:\Program Files\Java\jre1.8.0_151\lib\sunrsasign.jar;C:\Program Files\Java\jre1.8.0_151\lib\jsse.jar;C:\Program Files\Java\jre1.8.0_151\lib\jce.jar;C:\Program Files\Java\jre1.8.0_151\lib\charsets.jar;C:\Program Files\Java\jre1.8.0_151\lib\jfr.jar;C:\Program Files\Java\jre1.8.0_151\classes, hibernate.hbm2ddl.auto=update, user.script=, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=1.8.0_151-b12, user.name=Sajjad, path.separator=;, os.version=10.0, java.endorsed.dirs=C:\Program Files\Java\jre1.8.0_151\lib\endorsed, java.runtime.name=Java(TM) SE Runtime Environment, file.encoding=UTF-8, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.show_sql=true, hibernate.classLoaders=[sun.misc.Launcher$AppClassLoader@2a139a55], hibernate.current_session_context_class=org.springframework.orm.hibernate5.SpringSessionContext, java.vendor.url.bug=http://bugreport.sun.com/bugreport/, java.io.tmpdir=C:\Users\Sajjad\AppData\Local\Temp\, java.version=1.8.0_151, user.dir=E:\spring_hibernate17\SpringWithHibernate, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.os.patch.level=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@3bd418e4, java.library.path=C:\Program Files\Java\jre1.8.0_151\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:/Program Files/Java/jre1.8.0_151/bin/server;C:/Program Files/Java/jre1.8.0_151/bin;C:/Program Files/Java/jre1.8.0_151/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\Program Files\MySQL\MySQL Utilities 1.6\;"C:\Program Files\Java\jdk1.8.0_121\bin;";C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Git\cmd;C:\Users\Sajjad\AppData\Local\Microsoft\WindowsApps;C:\Users\Sajjad\AppData\Local\GitHubDesktop\bin;%USERPROFILE%\AppData\Local\Microsoft\WindowsApps;;E:\Softwares\spring-tool-suite-3.9.2.RELEASE-e4.7.2-win32-x86_64\sts-bundle\sts-3.9.2.RELEASE;;., java.vm.info=mixed mode, java.vendor=Oracle Corporation, java.vm.version=25.151-b12, hibernate.bytecode.use_reflection_optimizer=false, hibernate.connection.datasource=org.springframework.jdbc.datasource.DriverManagerDataSource@4b168fa9, java.ext.dirs=C:\Program Files\Java\jre1.8.0_151\lib\ext;C:\WINDOWS\Sun\Java\lib\ext, sun.io.unicode.encoding=UnicodeLittle, java.class.version=52.0}
Skipping JACC integration as it was not enabled
Instantiated session factory
Not known whether passed class name [com.nsksoft.spring.hibernate.bean.User] is safe
No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.nsksoft.spring.hibernate.bean.User
Not known whether passed class name [com.nsksoft.spring.hibernate.bean.User] is safe
No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.nsksoft.spring.hibernate.bean.User
Static SQL for entity: com.nsksoft.spring.hibernate.bean.User
 Version select: select user_id from UserDetails where user_id =?
 Snapshot select: select user_.user_id, user_.country as country2_0_, user_.dob as dob3_0_, user_.email as email4_0_, user_.first_name as first_na5_0_, user_.gender as gender6_0_, user_.last_name as last_nam7_0_, user_.marital_status as marital_8_0_, user_.mobile as mobile9_0_, user_.pass_word as pass_wo10_0_, user_.permanent_adreess as permane11_0_, user_.pincode as pincode12_0_, user_.present_address as present13_0_, user_.state as state14_0_ from UserDetails user_ where user_.user_id=?
 Insert 0: insert into UserDetails (country, dob, email, first_name, gender, last_name, marital_status, mobile, pass_word, permanent_adreess, pincode, present_address, state, user_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
 Update 0: update UserDetails set country=?, dob=?, email=?, first_name=?, gender=?, last_name=?, marital_status=?, mobile=?, pass_word=?, permanent_adreess=?, pincode=?, present_address=?, state=? where user_id=?
 Delete 0: delete from UserDetails where user_id=?
 Identity insert: insert into UserDetails (country, dob, email, first_name, gender, last_name, marital_status, mobile, pass_word, permanent_adreess, pincode, present_address, state) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@76ba13c]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [NONE]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6c67e137]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [READ]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@191ae03f]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [UPGRADE]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@53ab0286]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [UPGRADE_NOWAIT]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2d10e0b1]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [UPGRADE_SKIPLOCKED]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@172ca72b]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [FORCE]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@71e5f61d]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [PESSIMISTIC_READ]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? lock in share mode
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5e8f9e2d]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [PESSIMISTIC_WRITE]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@fd46303]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=? for update
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4204541c]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [OPTIMISTIC]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4602c2a9]
Visiting attribute path : country
Visiting attribute path : dob
Visiting attribute path : email
Visiting attribute path : first_name
Visiting attribute path : gender
Visiting attribute path : last_name
Visiting attribute path : marital_status
Visiting attribute path : mobile
Visiting attribute path : password
Visiting attribute path : permanent_adreess
Visiting attribute path : pincode
Visiting attribute path : present_address
Visiting attribute path : state
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=com.nsksoft.spring.hibernate.bean.User)
    - Returns
       - EntityReturnImpl(entity=com.nsksoft.spring.hibernate.bean.User, querySpaceUid=<gen:0>, path=com.nsksoft.spring.hibernate.bean.User)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.nsksoft.spring.hibernate.bean.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {user_id1_0_0_}

Static select for entity com.nsksoft.spring.hibernate.bean.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
Static select for action ACTION_MERGE on entity com.nsksoft.spring.hibernate.bean.User: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
Static select for action ACTION_REFRESH on entity com.nsksoft.spring.hibernate.bean.User: select user0_.user_id as user_id1_0_0_, user0_.country as country2_0_0_, user0_.dob as dob3_0_0_, user0_.email as email4_0_0_, user0_.first_name as first_na5_0_0_, user0_.gender as gender6_0_0_, user0_.last_name as last_nam7_0_0_, user0_.marital_status as marital_8_0_0_, user0_.mobile as mobile9_0_0_, user0_.pass_word as pass_wo10_0_0_, user0_.permanent_adreess as permane11_0_0_, user0_.pincode as pincode12_0_0_, user0_.present_address as present13_0_0_, user0_.state as state14_0_0_ from UserDetails user0_ where user0_.user_id=?
No alter strings for table : UserDetails
No JtaPlatform was specified, checking resolver
No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
Checking 0 named HQL queries
Checking 0 named SQL queries
Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@578524c3
Registering SessionFactory: 1ca5af67-fc84-48dd-b660-da8816004d4f (<unnamed>)
Not binding SessionFactory to JNDI, no JNDI name configured
returning the Respositry
Statistics initialized [enabled=false]
QueryTranslatorFactory : org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory@7a34b7b8
HHH000397: Using ASTQueryTranslatorFactory
parse() - HQL: from com.nsksoft.spring.hibernate.bean.User u
throwQueryException() : no errors
--- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[DOT] Node: '.'
             |  |  |  |  +-[DOT] Node: '.'
             |  |  |  |  |  +-[IDENT] Node: 'com'
             |  |  |  |  |  \-[IDENT] Node: 'nsksoft'
             |  |  |  |  \-[IDENT] Node: 'spring'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'bean'
             |  \-[IDENT] Node: 'User'
             \-[ALIAS] Node: 'u'

select << begin [level=1, statement=select]
FromClause{level=1} : com.nsksoft.spring.hibernate.bean.User (u) -> user0_
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( FromClause{level=1} UserDetails user0_ ) )
Derived SELECT clause created.
Using FROM fragment [UserDetails user0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (UserDetails)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user0_.user_id as user_id1_0_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=u,role=null,tableName=UserDetails,tableAlias=user0_,origin=null,columns={,className=com.nsksoft.spring.hibernate.bean.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user0_.country as country2_0_, user0_.dob as dob3_0_, user0_.email as email4_0_, user0_.first_name as first_na5_0_, user0_.gender as gender6_0_, user0_.last_name as last_nam7_0_, user0_.marital_status as marital_8_0_, user0_.mobile as mobile9_0_, user0_.pass_word as pass_wo10_0_, user0_.permanent_adreess as permane11_0_, user0_.pincode as pincode12_0_, user0_.present_address as present13_0_, user0_.state as state14_0_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[u], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'UserDetails user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=u,role=null,tableName=UserDetails,tableAlias=user0_,origin=null,columns={,className=com.nsksoft.spring.hibernate.bean.User}}

throwQueryException() : no errors
HQL: from com.nsksoft.spring.hibernate.bean.User u
SQL: select user0_.user_id as user_id1_0_, user0_.country as country2_0_, user0_.dob as dob3_0_, user0_.email as email4_0_, user0_.first_name as first_na5_0_, user0_.gender as gender6_0_, user0_.last_name as last_nam7_0_, user0_.marital_status as marital_8_0_, user0_.mobile as mobile9_0_, user0_.pass_word as pass_wo10_0_, user0_.permanent_adreess as permane11_0_, user0_.pincode as pincode12_0_, user0_.present_address as present13_0_, user0_.state as state14_0_ from UserDetails user0_
throwQueryException() : no errors
select user0_.user_id as user_id1_0_, user0_.country as country2_0_, user0_.dob as dob3_0_, user0_.email as email4_0_, user0_.first_name as first_na5_0_, user0_.gender as gender6_0_, user0_.last_name as last_nam7_0_, user0_.marital_status as marital_8_0_, user0_.mobile as mobile9_0_, user0_.pass_word as pass_wo10_0_, user0_.permanent_adreess as permane11_0_, user0_.pincode as pincode12_0_, user0_.present_address as present13_0_, user0_.state as state14_0_ from UserDetails user0_
Result set row: 0
Result row: EntityKey[com.nsksoft.spring.hibernate.bean.User#1]
Result set row: 1
Result row: EntityKey[com.nsksoft.spring.hibernate.bean.User#2]
Result set row: 2
Result row: EntityKey[com.nsksoft.spring.hibernate.bean.User#3]
Resolving associations for [com.nsksoft.spring.hibernate.bean.User#1]
Done materializing entity [com.nsksoft.spring.hibernate.bean.User#1]
Resolving associations for [com.nsksoft.spring.hibernate.bean.User#2]
Done materializing entity [com.nsksoft.spring.hibernate.bean.User#2]
Resolving associations for [com.nsksoft.spring.hibernate.bean.User#3]
Done materializing entity [com.nsksoft.spring.hibernate.bean.User#3]
